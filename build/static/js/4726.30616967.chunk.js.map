{"version":3,"file":"static/js/4726.30616967.chunk.js","mappings":"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","sources":["components/common/Modals/AboutCVModal.jsx","components/common/Modals/DeveloperDetails.jsx","components/common/Modals/EducationModal.jsx","components/common/Modals/ExperienceCVModal.jsx","components/common/Modals/ExpertiseModal.jsx","components/common/Modals/SkillsCVModal.jsx","components/common/Modals/SocialMediaModal.jsx","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport {\r\n  fetchDeveloperCv,\r\n  updateDeveloperCvBio,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst AboutCV = ({ show, handleClose, data, id, role,isEdited }) => {\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n  const { smallLoader } = useSelector((state) => state.developerData);\r\n  const {\r\n    register,\r\n    setValue,\r\n    handleSubmit,\r\n    watch,\r\n    clearErrors,\r\n    formState: { errors, isDirty, isValid, isSubmitting },\r\n  } = useForm({});\r\n  const maxChars = 1000;\r\n\r\n  useEffect(() => {\r\n    setValue(\"bio\", data);\r\n  }, [data]);\r\n\r\n  const onSubmit = (values) => {\r\n    if (role === \"developer\") {\r\n      let data = {\r\n        ...values,\r\n        user_id: id,\r\n      };\r\n      dispatch(\r\n        updateDeveloperCvBio(data,role, () => {\r\n          dispatch(fetchDeveloperCv());\r\n          handleClose();\r\n        })\r\n      );\r\n    } else {\r\n      let data = {\r\n        ...values,\r\n        user_id: id,\r\n      };\r\n      dispatch(\r\n        updateDeveloperCvBio(data,role, () => {\r\n          dispatch(getDeveloperDetails(id));\r\n          handleClose();\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const handleCloseAndModalData = () => {\r\n    setValue(\"bio\",data);\r\n    handleClose()\r\n    clearErrors(\"bio\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"popup-heading\">{t(\"aboutSection\")}</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n          <Form.Group className=\"mb-4\">\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              className=\"common-field\"\r\n              rows=\"6\"\r\n              name=\"bio\"\r\n              placeholder=\"Enter your bio\"\r\n              {...register(\"bio\", {\r\n                required: {\r\n                  value: true,\r\n                  message: \"Please Enter Bio Data\",\r\n                },\r\n                validate: (value) =>\r\n                  value.length <= maxChars || \"Maximum character limit reached\",\r\n              })}\r\n              // onChange={handleChange}\r\n              maxLength={1000}\r\n            ></Form.Control>\r\n            <p className=\"error-message\">{errors.bio?.message}</p>\r\n            <p className=\"font-13 text-end\">\r\n              {watch(\"bio\")?.length >= maxChars\r\n                ? t(\"max_character_limit_msg\")\r\n                : maxChars - watch(\"bio\")?.length}{\" \"}\r\n              {t(\"charactersRemaining\")}\r\n            </p>\r\n          </Form.Group>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text={t(\"submit\")}\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n    </>\r\n    \r\n      \r\n     \r\n  );\r\n};\r\nexport default AboutCV;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport { filePreassignedUrlGenerate, getDeveloperDetails, updateDeveloperCvDetails } from \"../../../redux/slices/clientDataSlice\";\r\nimport { fetchDeveloperCv } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst DeveloperDetails = ({ show, handleClose, name, position, profile ,experience, id,role,isEdited }) => {\r\n    const dispatch = useDispatch();\r\n    const { smallLoader } = useSelector(state => state.clientData)\r\n    const [file, setFile] = useState(null)\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const{ t } =  useTranslation() \r\n    const {\r\n        register,\r\n        setValue,\r\n        handleSubmit,\r\n        formState: { errors, isDirty, isValid, isSubmitting },\r\n    } = useForm({});\r\n\r\n    useEffect(() => {\r\n        setValue(\"name\", name);\r\n        setValue(\"professional_title\", position);\r\n        setValue(\"profile_picture\", profile);\r\n        setValue(\"total_experience\" , experience)\r\n    }, [name, position ,experience])\r\n\r\n    console.log(selectedImage,\"selectedImage\")\r\n\r\n    const handleChange = (e) => {\r\n        const file = e.target.files[0];\r\n        console.log(file,'file')\r\n        setFile(file)\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setSelectedImage(reader.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n    console.log(selectedImage,\"selectedImage\")\r\n\r\n   \r\n\r\n    const onSubmit = (values) => {\r\n        console.log(values , \"values\")\r\n        let fileData = new FormData();\r\n        fileData.append(\"file\",file);\r\n        if(file==null){\r\n            let data = {\r\n                ...values,\r\n                \"user_id\" : +id\r\n            };\r\n            console.log(data,\"data\")\r\n            dispatch(updateDeveloperCvDetails(data,role, () => {\r\n                if(role==\"developer\"){\r\n                    dispatch(fetchDeveloperCv())\r\n                }else{\r\n                    dispatch(getDeveloperDetails(id))\r\n\r\n                }\r\n                handleClose()\r\n            }))\r\n        }else{\r\n            dispatch(filePreassignedUrlGenerate(fileData, (url) => {\r\n                let data = {\r\n                    ...values,\r\n                    \"profile_picture\": url,\r\n                    \"user_id\" : +id\r\n                };\r\n                console.log(data,\"data\")\r\n                dispatch(updateDeveloperCvDetails(data,role, () => {\r\n                    if(role==\"developer\"){\r\n                        dispatch(fetchDeveloperCv())\r\n                    }else{\r\n                        dispatch(getDeveloperDetails(id))\r\n    \r\n                    }\r\n                    handleClose()\r\n                }))\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} centered className=\"custom-modal\" animation>\r\n            <Modal.Header closeButton className=\"border-0 pb-3\">\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h3 className=\"popup-heading\">Developer Section</h3>\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <Form.Group className=\"mb-4\">\r\n                        <Form.Label className=\"font-14\">Name</Form.Label>\r\n                        <Form.Control name=\"name\" className=\"common-field\" placeholder=\"Enter your name\"\r\n                            {...register(\"name\", {\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Please Enter Name\",\r\n                                },\r\n\r\n                            })}\r\n\r\n                        ></Form.Control>\r\n                        <p className=\"error-message\">\r\n                            {errors.name?.message}\r\n                        </p>\r\n                        <Form.Label className=\"font-14\">Position</Form.Label>\r\n                        <Form.Control name=\"professional_title\" className=\"common-field\" placeholder=\"Enter your Position\"\r\n                            {...register(\"professional_title\", {\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Please Enter Position\",\r\n                                },\r\n\r\n\r\n                            })}\r\n\r\n                        ></Form.Control>\r\n                        <p className=\"error-message\">\r\n                            {errors.professional_title?.message}\r\n                        </p>\r\n                        <div className=\"flex-none\">\r\n                                    <Form.Label className=\"common-label\">{t(\"experience\")}</Form.Label>\r\n                                    <Form.Select className=\"filter-select shadow-none\"\r\n                                      {...register(\"total_experience\", {\r\n                                        required: {\r\n                                            value: true,\r\n                                            message: \"Please Enter Experience\",\r\n                                        },\r\n                                    })}\r\n                                    >\r\n                                        <option value=\"\" > {t(\"selectExperience\")} </option>\r\n                                        <option value=\"1 years\" onClick={(e) => e.stopPropagation()}>1 {t(\"years\")}</option>\r\n                                        <option value=\"2 years\" onClick={(e) => e.stopPropagation()}>2 {t(\"years\")}</option>\r\n                                        <option value=\"3 years\" onClick={(e) => e.stopPropagation()}>3 {t(\"years\")}</option>\r\n                                        <option value=\"5 years\" onClick={(e) => e.stopPropagation()}>5 {t(\"years\")}</option>\r\n                                        <option value=\"above 5\" onClick={(e) => e.stopPropagation()}>above 5  {t(\"years\")}</option>\r\n                                    </Form.Select>\r\n                                </div>\r\n                        <p className=\"error-message\">\r\n                            {errors.professional_title?.message}\r\n                        </p>\r\n\r\n\r\n                        <Form.Label className=\"font-14\">Image</Form.Label>\r\n                        <Form.Control type=\"file\" id=\"developer-image\"\r\n                            name=\"profile_picture\"\r\n                            {...register(\"profile_picture\", {\r\n                                onChange: (e) => handleChange(e),\r\n                                required: {\r\n                                    value: false,\r\n                                    message: \"Profile Picture is required\",\r\n                                },\r\n                            })}\r\n                            className=\"d-none\" />\r\n                        <Form.Label htmlFor=\"developer-image\" className=\"upload-image-label d-block\"><HiUpload /> Upload Image, Image must be jpg or png</Form.Label>\r\n                        <div>\r\n                            <img src={selectedImage ? selectedImage : profile} alt=\"Selected\" style={{ width: \"150px\", maxHeight: \"150px\" }} />\r\n                        </div>\r\n\r\n\r\n                    </Form.Group>\r\n                    <div className=\"text-center\">\r\n                        <RexettButton\r\n                            type=\"submit\"\r\n                            text=\"Submit\"\r\n                            className=\"main-btn px-4 font-14 fw-semibold\"\r\n                            variant=\"transparent\"\r\n                            disabled={smallLoader}\r\n                            isLoading={smallLoader}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nexport default DeveloperDetails;","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  addDegree,\r\n  addDeveloperCvEducation,\r\n  deleteEducationCv,\r\n  fetchDeveloperCv,\r\n  getDegreeList,\r\n  updateDeveloperCvEducation,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\";\r\nimport Select from \"react-select\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { GOOGLE_AUTOCOMPLETE_API_KEY } from \"../../clients/TimeReporiting/constant\";\r\n\r\n\r\nconst EducationCV = ({ show, handleClose, data, id, role }) => {\r\n  const dispatch = useDispatch();\r\n  const [disbaleYear, setDisbaleYear] = useState([]);\r\n  const [renderModalData, setRenderModalData] = useState(data);\r\n  const { degreeList, smallLoader } = useSelector(\r\n    (state) => state.developerData\r\n  );\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    watch,\r\n    setValue,\r\n    trigger,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: \"educations\",\r\n  });\r\n\r\n  function generateYears() {\r\n    const currentYear = new Date().getFullYear();\r\n    const years = [];\r\n    for (let year = 1995; year <= currentYear; year++) {\r\n      years.push(year);\r\n    }\r\n    return years;\r\n  }\r\n  console.log(data, \"data\");\r\n  console.log(degreeList, \"degreeeelist\");\r\n\r\n  // Example usage:\r\n  const yearsArray = generateYears();\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data.forEach((item, index) => {\r\n        append({\r\n          university_name: item.university_name,\r\n          degree_id: item.degree_id,\r\n          address: item.address,\r\n          start_year: item.start_year,\r\n          end_year: item.end_year,\r\n          currently_attending: item.currently_attending,\r\n          education_id: item?.id,\r\n        });\r\n        setDisbaleYear((prevState) => [...prevState, item.currently_attending]);\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n  }, []);\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, null);\r\n    } else {\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, end_year);\r\n    }\r\n  };\r\n\r\n  const handleAddMore = async () => {\r\n    const isValid = await trigger();\r\n    if (isValid) {\r\n      append({\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteDeveloperEducation = (id, devId, index) => {\r\n    remove(index);\r\n    if (id) {\r\n      dispatch(\r\n        deleteEducationCv(id, devId, () => {\r\n          if (role == \"developer\") {\r\n            dispatch(fetchDeveloperCv());\r\n          } else {\r\n            dispatch(getDeveloperDetails(devId));\r\n          }\r\n          // handleClose()\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmit = (value) => {\r\n    let { educations } = value;\r\n    let data = {\r\n      developer_id: id,\r\n      educations: educations,\r\n    };\r\n\r\n    dispatch(\r\n      updateDeveloperCvEducation(data, role, () => {\r\n        if (role == \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreate = (inputValue) => {\r\n    const payload = {\r\n      title: inputValue,\r\n    };\r\n    dispatch(\r\n      addDegree(payload, () => {\r\n        dispatch(getDegreeList());\r\n      })\r\n    );\r\n  };\r\n\r\n  const deletetooltip = <Tooltip id=\"tooltip\">Delete Row</Tooltip>;\r\n  const addtooltip = <Tooltip id=\"tooltip\">Add Row</Tooltip>;\r\n  console.log(fields, \"----educationfirld\");\r\n  const next = degreeList.find((option) => option.value === fields.degree_id);\r\n  console.log(next, \"next\");\r\n  return (\r\n    <>\r\n      <h3 className=\"popup-heading\">Education</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          {fields.map((item, index) => (\r\n            <div className=\"experience-container mb-3\" key={item.id}>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">University Name</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      placeholder=\"Enter University Name\"\r\n                      {...register(`educations.${index}.university_name`, {\r\n                        required: true,\r\n                      })}\r\n                      defaultValue={item.university_name}\r\n                    />\r\n                    {errors &&\r\n                      errors.educations &&\r\n                      errors.educations[index] &&\r\n                      errors.educations[index].university_name && (\r\n                        <p className=\"error-message\">\r\n                          University name is required\r\n                        </p>\r\n                      )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">Degree Name</Form.Label>\r\n                    <CreatableSelect\r\n                      isClearable\r\n                      onChange={(val) =>\r\n                        setValue(\r\n                          `educations.${index}.degree_id`,\r\n                          val ? val.value : \"\"\r\n                        )\r\n                      }\r\n                      // value={degreeList.find(\r\n                      //   (option) => option.value === item.degree_id\r\n                      // )}\r\n                      onCreateOption={handleCreate}\r\n                      options={degreeList}\r\n                    />\r\n                    {/* <Select\r\n                                            options={degreeList}\r\n                                            onCreateOption={handleCreate}\r\n                                            onChange={(val) => setValue(`educations.${index}.degree_id`, val ? val.value : '')}\r\n                                            defaultValue={degreeList.find(option => option.value === item.degree_id)}\r\n\r\n                                        /> */}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">Address</Form.Label>\r\n                    {/* <Form.Control\r\n                                            type=\"text\"\r\n                                            className=\"common-field\"\r\n                                            placeholder=\"Enter Address\"\r\n                                            {...register(`educations.${index}.address`, { required: true })}\r\n                                            defaultValue={item.address}\r\n                                        /> */}\r\n                    <Controller\r\n                      name=\"address\"\r\n                      className=\"common-field \"\r\n                        control={control}\r\n                      rules={{\r\n                        required: \"Address is required\",\r\n                      }}\r\n                    \r\n                      // value={item.address}\r\n                      render={({ field, fieldState }) => (\r\n                        <Autocomplete\r\n                          style={{ width: \"500px\" }}\r\n                          // errors={fieldState?.errors}\r\n                          className=\"common-field font-14 w-100 p-2\"\r\n                          apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                          onPlaceSelected={(place) => {\r\n                            console.log(place);\r\n                          }}\r\n                          options={{\r\n                            types: [\"establishment\", \"geocode\"], \r\n                          }}\r\n                          onChange={(event) => {\r\n                            field.onChange(event.target.value);\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    {/* {errors &&\r\n                      errors.educations &&\r\n                      errors.educations[index] &&\r\n                      errors. educations[index].address&& (\r\n                        <p className=\"error-message\">\r\n                        {errors.educations[index].address?.message}\r\n                      </p>\r\n                        \r\n                      )} */}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">Start Year</Form.Label>\r\n                    <Form.Select\r\n                      {...register(`educations.${index}.start_year`, {\r\n                        required: \"Start Year is required\",\r\n                        validate: {\r\n                          lessThanEndYear: (value) => {\r\n                            const endYear = watch(\r\n                              `educations.${index}.end_year`\r\n                            );\r\n                            if (\r\n                              !endYear ||\r\n                              parseInt(value) < parseInt(endYear)\r\n                            ) {\r\n                              return true;\r\n                            }\r\n                            return \"Start Year must be less than End Year\";\r\n                          },\r\n                        },\r\n                      })}\r\n                    >\r\n                      <option disabled selected>\r\n                        Please select year\r\n                      </option>\r\n                      {yearsArray?.map((item) => (\r\n                        <option key={item} value={item}>\r\n                          {item}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                    {errors &&\r\n                      errors.educations &&\r\n                      errors.educations[index] &&\r\n                      errors.educations[index].start_year && (\r\n                        <p className=\"error-message\">\r\n                          {errors.educations[index].start_year.message}\r\n                        </p>\r\n                      )}\r\n                  </Form.Group>\r\n                </Col>\r\n                {!disbaleYear[index] ? (\r\n                  <Col md=\"6\">\r\n                    <Form.Group className=\"mb-4\">\r\n                      <Form.Label className=\"font-14\">End Year</Form.Label>\r\n                      <Form.Select\r\n                        {...register(`educations.${index}.end_year`, {\r\n                          required: {\r\n                            value: disbaleYear[index] ? false : true,\r\n                            message: \"End year is required\",\r\n                          },\r\n                        })}\r\n                        disabled={disbaleYear[index]}\r\n                      >\r\n                        <option disabled selected>\r\n                          Please select year\r\n                        </option>\r\n                        {yearsArray?.map((item) => (\r\n                          <option key={item} value={item}>\r\n                            {item}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      {errors &&\r\n                        errors.educations &&\r\n                        errors.educations[index] &&\r\n                        errors.educations[index].end_year && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].end_year.message}\r\n                          </p>\r\n                        )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Col md=\"12\">\r\n                  <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                    <Form.Group className=\"d-flex gap-2 align-items-center\">\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        className=\"cv-field\"\r\n                        id={`currently_attending_${index}`}\r\n                        {...register(`educations.${index}.currently_attending`)}\r\n                        defaultChecked={item.currently_attending}\r\n                        onChange={(e) => handleCurrentlyWorkingChange(e, index)}\r\n                      />\r\n                      <Form.Label\r\n                        htmlFor={`currently_attending_${index}`}\r\n                        className=\"mb-0 font-14\"\r\n                      >\r\n                        Currently Attending\r\n                      </Form.Label>\r\n                    </Form.Group>\r\n\r\n                    {index !== 0 && (\r\n                      <div>\r\n                        <OverlayTrigger\r\n                          placement=\"bottom\"\r\n                          overlay={deletetooltip}\r\n                        >\r\n                          <Button\r\n                            variant=\"danger\"\r\n                            onClick={() =>\r\n                              deleteDeveloperEducation(\r\n                                item.new_id,\r\n                                item?.education_id,\r\n                                index\r\n                              )\r\n                            }\r\n                          >\r\n                            <FaTrashAlt />\r\n                          </Button>\r\n                        </OverlayTrigger>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-end mb-3\">\r\n            <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n              <Button\r\n                className=\"main-btn\r\n                        py-2 px-3\"\r\n                onClick={handleAddMore}\r\n              >\r\n                +\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Submit\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n    </>\r\n    \r\n      \r\n     \r\n  );\r\n};\r\n\r\nexport default EducationCV;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Form, Row, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { useForm, useFieldArray } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { addDeveloperCvExperience, deleteExperience, fetchDeveloperCv, updateDeveloperCvExperience } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst ExperienceCVModal = ({ show, handleClose, data, id, role, onSubmitVendor }) => {\r\n  const [renderModalData, setRenderModalData] = useState(data);\r\n  const [disabledEndDates, setDisabledEndDates] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      test: data ? data : [{ company_name: \"\", job_title: \"\" }]\r\n    }\r\n  });\r\n  const { t } = useTranslation();\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"test\",\r\n  });\r\n  const { smallLoader } = useSelector(state => state.developerData);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data?.forEach((item, index) => {\r\n        append({\r\n          company_name: item.company_name,\r\n          job_title: item.job_title,\r\n          description: item.description,\r\n          start_date: item.start_date?.slice(0, 10),\r\n          end_date: item.end_date?.slice(0, 10),\r\n          is_still_working: item.is_still_working,\r\n          experience_id: item.id\r\n        });\r\n        setDisabledEndDates(prevState => [...prevState, item.is_still_working]);\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n      setValue(`test[${index}].end_date`, \"\");\r\n    } else {\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (value) => {\r\n    let { test } = value;\r\n    let data = {\r\n      developer_id: id,\r\n      experiences: test\r\n    };\r\n    if (role === \"vendor\") {\r\n      if (onSubmitVendor) {\r\n        console.log(data, \"newDat\")\r\n        onSubmitVendor(data);\r\n      }\r\n      handleClose();\r\n    } else {\r\n      dispatch(updateDeveloperCvExperience(data, role, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleAppend = async () => {\r\n    const isValid = await trigger();\r\n    if (isValid) {\r\n      append({\r\n        company_name: \"\",\r\n        job_title: \"\",\r\n        description: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        is_still_working: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteDeveloperExperience = (itemId, index) => {\r\n    remove(index);\r\n    if (itemId) {\r\n      dispatch(deleteExperience(itemId, id, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deletetooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {t(\"deleteRow\")}\r\n    </Tooltip>\r\n  );\r\n  const addtooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {t(\"addRow\")}\r\n    </Tooltip>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n        {fields?.map((item, index) => (\r\n          <div className=\"experience-container mb-3\" key={item.id}>\r\n            <Row>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14 fw-medium\">{t(\"companyName\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"common-field font-14\"\r\n                    name=\"company_name\"\r\n                    placeholder=\"Enter Company Name\"\r\n                    {...register(`test[${index}].company_name`, {\r\n                      required: \"Company name is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.company_name && (\r\n                    <p className=\"error-message\">{errors.test[index].company_name.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14 fw-medium\">{t(\"jobPosition\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"common-field font-14\"\r\n                    name=\"job_title\"\r\n                    placeholder=\"Enter Job Position\"\r\n                    {...register(`test[${index}].job_title`, {\r\n                      required: \"Job Position is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.job_title && (\r\n                    <p className=\"error-message\">{errors.test[index].job_title.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14 fw-medium\">{t(\"startDate\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    className=\"common-field font-14\"\r\n                    placeholder=\"Enter Start Date\"\r\n                    max={new Date().toISOString().split(\"T\")[0]}\r\n                    {...register(`test[${index}].start_date`, {\r\n                      required: \"Start Date is required\",\r\n                      validate: {\r\n                        dateRange: (value) => {\r\n                          const endDate = watch(`test[${index}].end_date`);\r\n                          if (!endDate || value <= endDate) {\r\n                            return true;\r\n                          }\r\n                          return \"Start Date must be before End Date\";\r\n                        },\r\n                      },\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.start_date && (\r\n                    <p className=\"error-message\">{errors.test[index].start_date.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14 fw-medium\">{t(\"endDate\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    className=\"common-field font-14\"\r\n                    placeholder=\"Enter End Date\"\r\n                    max={new Date().toISOString().split(\"T\")[0]}\r\n                    {...register(`test[${index}].end_date`, {\r\n                      required: {\r\n                        value: disabledEndDates[index] ? false : true,\r\n                        message: \"End Date is required\",\r\n                      },\r\n                    })}\r\n                    disabled={disabledEndDates[index]}\r\n                  />\r\n                  {errors?.test?.[index]?.end_date && (\r\n                    <p className=\"error-message\">{errors.test[index].end_date.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <Form.Group className=\"d-flex gap-2 align-items-center\">\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      className=\"cv-field\"\r\n                      {...register(`test[${index}].is_still_working`, {\r\n                        required: false,\r\n                      })}\r\n                      onChange={(e) => handleCurrentlyWorkingChange(e, index)}\r\n                    />\r\n                    <Form.Label className=\"mb-0 font-14\">{t(\"currentlyWorking\")}</Form.Label>\r\n                  </Form.Group>\r\n                  {index !== 0 && (\r\n                    <div>\r\n                      <OverlayTrigger placement=\"bottom\" overlay={deletetooltip}>\r\n                        <Button variant=\"danger\" className=\"font-14\" onClick={() => deleteDeveloperExperience(item.experience_id, index)}>\r\n                          <FaTrashAlt />\r\n                        </Button>\r\n                      </OverlayTrigger>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14 fw-medium\">{t(\"jobDescription\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    className=\"common-field font-14\"\r\n                    placeholder=\"Enter Job Description\"\r\n                    {...register(`test[${index}].description`, {\r\n                      required: \"Description is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.description && (\r\n                    <p className=\"error-message\">{errors.test[index].description.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        <div className=\"text-end mb-3\">\r\n          <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n            <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n              +\r\n            </Button>\r\n          </OverlayTrigger>\r\n        </div>\r\n        {role !== \"vendor\" && <div className=\"text-center\">\r\n          <RexettButton\r\n            type=\"submit\"\r\n            text=\"Submit\"\r\n            className=\"main-btn px-4 font-14 fw-semibold\"\r\n            variant=\"transparent\"\r\n            disabled={smallLoader}\r\n            isLoading={smallLoader}\r\n          />\r\n        </div>}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExperienceCVModal;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deleteSkill,\r\n  fetchDeveloperCv,\r\n  updateDeveloperSkills,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  getDeveloperDetails,\r\n  getSkillList,\r\n} from \"../../../redux/slices/clientDataSlice\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport { FaTrash } from \"react-icons/fa6\";\r\nimport { EXPERIENCE_OPTIONS } from \"../../../helper/utlis\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\n\r\nconst ExpertiseModal = ({ show, handleClose, data, id, role }) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const [selectedOption, setSelectedOption] = useState();\r\n  const { smallLoader } = useSelector((state) => state.developerData);\r\n  const [options, setOptions] = useState([]);\r\n  const [skillOptions, setSkillOptions] = useState([]);\r\n  const { skillList } = useSelector((state) => state.clientData);\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    setValue,\r\n    clearErrors,\r\n    watch,\r\n    reset,\r\n    trigger,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      skills: [\r\n        {\r\n          skill: \"\",\r\n          experience: \"\",\r\n        },\r\n      ],\r\n    },\r\n  });\r\n\r\n  console.log(data, \"data\");\r\n\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"skills\",\r\n    rules: {\r\n      required: t(\"required_message\"),\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    setSkillOptions(skillListMapped);\r\n    if (data?.length) {\r\n      let formattedData = [];\r\n      formattedData = data?.map((curElem) => {\r\n        const skill = {\r\n          label: curElem.skill,\r\n          value: curElem.skill,\r\n          id: curElem.id,\r\n        };\r\n        return {\r\n          ...curElem,\r\n          skill: skill,\r\n        };\r\n      });\r\n      setValue(\"skills\", formattedData)\r\n    } else {\r\n      setValue(\"skills\", [{ skill: \"\", experience: \"\" }]);\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const handleAppend = () => {\r\n    const expertise = watch(\"skills\");\r\n    const index = expertise.findIndex(\r\n      (curElem) => curElem.experience === \"\" || curElem.skill === \"\"\r\n    );\r\n    if (index === -1) {\r\n      append({\r\n        skill: \"\",\r\n        experience: \"\",\r\n      });\r\n    }\r\n  };\r\n  const handleDelete = (skill_id, index) => {\r\n    remove(index);\r\n    if (skill_id) {\r\n      dispatch(\r\n        deleteSkill(id, skill_id, () => {\r\n          if (role == \"developer\") {\r\n            dispatch(fetchDeveloperCv());\r\n          } else {\r\n            dispatch(getDeveloperDetails(id));\r\n          }\r\n          handleClose();\r\n        })\r\n      );\r\n    }\r\n  };\r\n  // const skillListMapped = skillList.map((item) => {\r\n  //     return { value: item.id, label: item.title };\r\n  // });\r\n\r\n  // useEffect(() => {\r\n  //     if (data) {\r\n  //         const array = data\r\n  //             .split(\",\")\r\n  //             .map((tech) => ({ label: tech.trim(), value: tech.trim() }));\r\n  //         setSelectedOption(array);\r\n  //     }\r\n  // }, [data]);\r\n\r\n  // useEffect(() => {\r\n  //     setSkillsCate(skillListMapped)\r\n  // }, [skillList]);\r\n\r\n  // const handleSubmit = (e) => {\r\n  //     e.preventDefault();\r\n  //     let convertString = selectedOption.map((item) => item.label);\r\n  //     if (role === \"developer\") {\r\n  //         let data = {\r\n  //             skills: convertString.toString(),\r\n  //             user_id: +id,\r\n  //         };\r\n  //         dispatch(\r\n  //             updateDeveloperSkills(data, () => {\r\n  //                 dispatch(fetchDeveloperCv());\r\n  //                 handleClose();\r\n  //             })\r\n  //         );\r\n  //     } else {\r\n  //         let data = {\r\n  //             skills: convertString.toString(),\r\n  //             user_id: +id,\r\n  //         };\r\n  //         dispatch(\r\n  //             updateDeveloperSkills(data, () => {\r\n  //                 dispatch(getDeveloperDetails(id));\r\n  //                 handleClose();\r\n  //             })\r\n  //         );\r\n  //     }\r\n  // };\r\n  // const handleExperience = () => {\r\n\r\n  // }\r\n\r\n  // const handleAppend = async () => {\r\n  //     // Trigger validation for all fields\r\n  //     append({\r\n  //         skills: \"\",\r\n  //         experience: \"\"\r\n  //     });\r\n  //     const isValid = await trigger();\r\n  //     console.log(isValid,\"isValid\")\r\n  //     // Check if all fields are valid\r\n  //     if (isValid) {\r\n  //         append({\r\n  //             skills: \"\",\r\n  //             experience: \"\"\r\n  //         });\r\n  //     }\r\n  // };\r\n  const addtooltip = <Tooltip id=\"tooltip\">{t(\"addRow\")}</Tooltip>;\r\n\r\n  // const filteredOptions = options.filter(\r\n  //     (option) =>\r\n  //         !selectedOption.find((selected) => selected.value === option.value)\r\n  // );\r\n\r\n  const onChangeSelect = (val, index) => {\r\n    const newOption = createOption(val);\r\n    setSkillOptions((prev) => [...prev, newOption]);\r\n    setValue(`skills.${index}.skill`, newOption);\r\n    setSelectedOption(newOption);\r\n  };\r\n  const onSubmit = (values) => {\r\n    let skills = [];\r\n    skills = values?.skills?.map(({ skill, experience }) => {\r\n      return { skill: skill.label, experience: experience };\r\n    });\r\n    const payload = {\r\n      user_id: id,\r\n      skills: [...skills],\r\n    };\r\n    dispatch(\r\n      updateDeveloperSkills(payload, role ,() => {\r\n        if (role == \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      })\r\n    );\r\n    // commented for future use\r\n    // if (data.length) {\r\n    //   dispatch(\r\n    //     updateDeveloperSkills(\r\n    //       payload,\r\n    //       () => {\r\n    //         dispatch(fetchDeveloperCv());\r\n    //         handleClose();\r\n    //       },\r\n    //       \"put\"\r\n    //     )\r\n    //   );\r\n    // } else {\r\n    //   dispatch(\r\n    //     updateDeveloperSkills(\r\n    //       payload,\r\n    //       () => {\r\n    //         dispatch(fetchDeveloperCv());\r\n    //         handleClose();\r\n    //       },\r\n    //       \"post\"\r\n    //     )\r\n    //   );\r\n    // }\r\n  };\r\n  return (\r\n    <>\r\n      <h3 className=\"popup-heading\">{t(\"expertise\")}</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          {fields.map((field, index) => (\r\n            <Fragment key={field.id}>\r\n              <div className=\"experience-container\">\r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <Form.Group className=\"mb-4\">\r\n                      <Form.Label className=\"common-label\">\r\n                        {t(\"enterSkill\")}\r\n                      </Form.Label>\r\n                      <CreatableSelect\r\n                        {...register(`skills.${index}.skill`, {\r\n                          required: {\r\n                            value: true,\r\n                            message: t(\"required_message\"),\r\n                          },\r\n                        })}\r\n                        isClearable\r\n                        options={skillOptions}\r\n                        onChange={(newValue) => {\r\n                          console.log(newValue, \"newvalue\");\r\n                          setSelectedOption(newValue);\r\n                          setValue(`skills.${index}.skill`, newValue);\r\n                          clearErrors(`skills.${index}.skill`);\r\n                        }}\r\n                        onCreateOption={(val) => {\r\n                          onChangeSelect(val, index);\r\n                        }}\r\n                        value={watch(`skills.${index}.skill`)}\r\n                      />\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                {errors?.skills?.[index]?.skill && (\r\n                  <p className=\"error-message\">\r\n                    {errors?.skills[index]?.skill?.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n              <div className=\"flex-none\">\r\n                <Form.Label className=\"common-label\">\r\n                  {t(\"experience\")}\r\n                </Form.Label>\r\n                <Form.Select\r\n                  {...register(`skills.${index}.experience`, {\r\n                    required: {\r\n                      value: true,\r\n                      message: t(\"required_message\"),\r\n                    },\r\n                  })}\r\n                  className=\"filter-select shadow-none\"\r\n                  //   onChange={(e) => handleExperience(e)}\r\n                >\r\n                  <option value=\"\"> {t(\"selectExperience\")} </option>\r\n                  {EXPERIENCE_OPTIONS.map(({ label, value }, index) => (\r\n                    <option value={value} key={index}>\r\n                      {label} {t(\"years\")}\r\n                    </option>\r\n                  ))}\r\n                </Form.Select>\r\n                {errors?.skills?.[index]?.experience && (\r\n                  <p className=\"error-message\">\r\n                    {errors?.skills[index]?.experience?.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n              {watch(\"skills\")?.length !== 1 && (\r\n                <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    onClick={() => handleDelete(field?.skill?.id, index)}\r\n                  >\r\n                    <FaTrash />\r\n                  </Button>\r\n                </Col>\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n          <div className=\"text-end mb-3\">\r\n            <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n              <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n                +\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Submit\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n\r\n          {/* <div className=\"experience-container\">\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"common-label\">\r\n                    {t(\"Enter Skills\")}\r\n                  </Form.Label>\r\n                  <CreatableSelect\r\n                    isMulti\r\n                    isClearable\r\n                    name={selectedOption}\r\n                    onChange={(newValue) => {\r\n                        setSelectedOption(newValue)\r\n                    }}\r\n                    // onCreateOption={onChangeSelect}\r\n                    options={skillCate}\r\n                    value={selectedOption}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </div> */}\r\n          {/* <div className=\"flex-none\">\r\n            <Form.Label className=\"common-label\">{t(\"experience\")}</Form.Label>\r\n            <Form.Select\r\n              className=\"filter-select shadow-none\"\r\n              onChange={(e) => handleExperience(e)}\r\n            >\r\n              <option value=\"\"> {t(\"selectExperience\")} </option>\r\n              {EXPERIENCE_OPTIONS.map(({ label, value }, index) => (\r\n                <option value={value} key={index}>\r\n                  {label} {t(\"years\")}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n          </div> */}\r\n          {/* <p className=\"error-message\">\r\n                            {errors.professional_title?.message}\r\n                        </p> */}\r\n\r\n          {/* <div className=\"text-end mb-3\">\r\n            <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n              <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n                +\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Submit\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div> */}\r\n        </form>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default ExpertiseModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchDeveloperCv,\r\n  updateDeveloperSkills,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\n\r\nconst SkillsModal = ({ show, handleClose, data, id, role }) => {\r\n  const { skillList } = useSelector((state) => state.clientData);\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const { smallLoader } = useSelector((state) => state.developerData);\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n  const [skillCate, setSkillsCate] = useState(skillListMapped);\r\n\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  console.log(data, \"data,,,,\");\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const array = data?.map((tech) => ({\r\n        label: tech.skill,\r\n        value: tech.skill,\r\n        id: tech.id,\r\n      }));\r\n      setSelectedOption(array);\r\n    }\r\n  }, [data]);\r\n  console.log(selectedOption, \"selectedOption\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let formattedSkills = [];\r\n    // let convertString = selectedOption.map((item) => item.label);\r\n    formattedSkills = selectedOption.map((item) => {\r\n      return { skill: item.label, experience: \"\" };\r\n    });\r\n\r\n    let data = {\r\n      skills: formattedSkills,\r\n      user_id: +id,\r\n    };\r\n    dispatch(\r\n      updateDeveloperSkills(data, role, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChangeSelect = (val) => {\r\n    setTimeout(() => {\r\n      const newOption = createOption(val);\r\n      setSelectedOption((prev) => [...prev, newOption]);\r\n      setSkillsCate((prev) => [...prev, newOption]);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <h3 className=\"popup-heading\">{t(\"skills\")}</h3>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"experience-container\">\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <CreatableSelect\r\n                    isMulti\r\n                    isClearable\r\n                    name={selectedOption}\r\n                    onChange={(newValue) => {\r\n                      setSelectedOption(newValue);\r\n                    }}\r\n                    onCreateOption={onChangeSelect}\r\n                    options={skillCate}\r\n                    value={selectedOption}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text={t(\"submit\")}\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n    </>\r\n  \r\n        \r\n    \r\n  );\r\n};\r\nexport default SkillsModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form, Row, Col, InputGroup } from \"react-bootstrap\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport { addDeveloperSocialMedia, deleteDeveloperSocialMedia, fetchDeveloperCv, updateDeveloperSocialMedia } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst socialMediaOptions = [\r\n  { value: \"facebook\", label: \"Facebook\" },\r\n  { value: \"linkedin\", label: \"Linkedin\" },\r\n  { value: \"twitter\", label: \"Twitter\" },\r\n  { value: \"github\", label: \"Github\" },\r\n  { value: \"instagram\", label: \"Instagram\" },\r\n  { value: \"gitlab\", label: \"Gitlab\" },\r\n  { value: \"pinterest\", label: \"Pinterest\" }\r\n];\r\n\r\nconst SocialMediaModal = ({ show, handleClose, data, id ,role }) => {\r\n  const dispatch = useDispatch()\r\n  const [renderModalData, setRenderModalData] = useState(data)\r\n  const { smallLoader, btnLoader } = useSelector(state => state.developerData)\r\n  const { t } = useTranslation()\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    // setError,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"test\",\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data?.forEach((item, index) => {\r\n        append({\r\n          new_id: item.id,\r\n          url: item.url,\r\n          name: item.name,\r\n          slug: item.slug\r\n        });\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n\r\n\r\n\r\n  const onSubmit = (value) => {\r\n    let { test } = value\r\n    if (role === \"developer\") {\r\n      let data={\r\n        \"social_links\": test,\r\n        \"user_id\" : id\r\n      }\r\n      dispatch(addDeveloperSocialMedia(data, () => {\r\n        dispatch(fetchDeveloperCv())\r\n        handleClose()\r\n      }))\r\n    } else {\r\n      let data={\r\n        \"social_links\": test,\r\n        \"user_id\" : id\r\n      }\r\n      dispatch(addDeveloperSocialMedia(data, () => {\r\n        dispatch(getDeveloperDetails(id))\r\n        handleClose()\r\n      }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"popup-heading\">{t(\"addSocialMedia\")}</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n\r\n          {fields?.map((row, index) => (\r\n            <div className=\"experience-container\" key={row.id}>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Text id=\"basic-addon1\">{row.slug}</InputGroup.Text>\r\n                    <Form.Control type=\"text\" className=\"cv-field\" placeholder=\"Enter Url\"\r\n                      {...register(`test[${index}].url`, {\r\n                        required: {\r\n                          value: true,\r\n                          message: \"Url can't blank\",\r\n                        },\r\n                        pattern: {\r\n                          value: /^(https?:\\/\\/)?(www\\.)?(facebook|twitter|instagram|linkedin|github)\\.com\\/\\S*$/,\r\n                          message: \"Please enter a valid social media URL\",\r\n                        }\r\n                      })}\r\n                    ></Form.Control>\r\n                    {errors && errors.test && errors.test[index] && errors.test[index].url && (\r\n                      <p className=\"error-message\">{errors.test[index].url.message}</p>\r\n                    )}\r\n                  </InputGroup>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-center\">\r\n            {/* <Button variant=\"transparent\" className=\"main-btn px-4\" type=\"submit\">Submit</Button> */}\r\n\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Update Profile\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={btnLoader}\r\n              isLoading={btnLoader}\r\n            />\r\n          </div>\r\n\r\n        </form>\r\n    </>\r\n \r\n      \r\n\r\n  )\r\n}\r\n\r\nexport default SocialMediaModal;\r\n","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["_ref","_errors$bio","_watch","_watch2","show","handleClose","data","id","role","isEdited","dispatch","useDispatch","t","useTranslation","smallLoader","useSelector","state","developerData","register","setValue","handleSubmit","watch","clearErrors","formState","errors","isDirty","isValid","isSubmitting","useForm","maxChars","useEffect","_jsxs","_Fragment","children","_jsx","className","onSubmit","values","user_id","updateDeveloperCvBio","fetchDeveloperCv","getDeveloperDetails","noValidate","Form","Group","Control","as","rows","name","placeholder","required","value","message","validate","length","maxLength","bio","RexettButton","type","text","variant","disabled","isLoading","_errors$name","_errors$professional_","_errors$professional_2","position","profile","experience","clientData","file","setFile","useState","selectedImage","setSelectedImage","console","log","Modal","onHide","centered","animation","Header","closeButton","Body","fileData","FormData","append","updateDeveloperCvDetails","filePreassignedUrlGenerate","url","Label","professional_title","Select","onClick","e","stopPropagation","onChange","target","files","reader","FileReader","onloadend","result","readAsDataURL","handleChange","htmlFor","HiUpload","src","alt","style","width","maxHeight","disbaleYear","setDisbaleYear","renderModalData","setRenderModalData","degreeList","control","trigger","fields","remove","useFieldArray","yearsArray","currentYear","Date","getFullYear","years","year","push","generateYears","forEach","item","index","university_name","degree_id","address","start_year","end_year","currently_attending","education_id","prevState","getDegreeList","handleCreate","inputValue","payload","title","addDegree","deletetooltip","Tooltip","addtooltip","next","find","option","educations","developer_id","updateDeveloperCvEducation","map","Row","Col","md","concat","defaultValue","CreatableSelect","isClearable","val","onCreateOption","options","Controller","rules","render","_ref2","field","fieldState","Autocomplete","apiKey","GOOGLE_AUTOCOMPLETE_API_KEY","onPlaceSelected","place","types","event","lessThanEndYear","endYear","parseInt","selected","Check","defaultChecked","handleCurrentlyWorkingChange","checked","updatedDisabledEndDates","OverlayTrigger","placement","overlay","Button","deleteDeveloperEducation","devId","deleteEducationCv","new_id","FaTrashAlt","async","onSubmitVendor","disabledEndDates","setDisabledEndDates","reset","setError","defaultValues","test","company_name","job_title","replace","_item$start_date","_item$end_date","description","start_date","slice","end_date","is_still_working","experience_id","experiences","updateDeveloperCvExperience","_errors$test","_errors$test$index","_errors$test2","_errors$test2$index","_errors$test3","_errors$test3$index","_errors$test4","_errors$test4$index","_errors$test5","_errors$test5$index","max","toISOString","split","dateRange","endDate","deleteDeveloperExperience","itemId","deleteExperience","localStorage","getItem","selectedOption","setSelectedOption","setOptions","skillOptions","setSkillOptions","skillList","skillListMapped","label","skills","skill","formattedData","curElem","_values$skills","updateDeveloperSkills","_errors$skills","_errors$skills$index","_errors$skills$index2","_errors$skills$index3","_errors$skills2","_errors$skills2$index","_errors$skills$index4","_errors$skills$index5","Fragment","newValue","onChangeSelect","newOption","toLowerCase","prev","EXPERIENCE_OPTIONS","_ref3","_field$skill","handleDelete","skill_id","deleteSkill","FaTrash","handleAppend","findIndex","skillCate","setSkillsCate","array","tech","preventDefault","formattedSkills","isMulti","setTimeout","btnLoader","slug","addDeveloperSocialMedia","row","InputGroup","Text","pattern","InputGroupText","React","ref","bsPrefix","Component","props","useBootstrapPrefix","classNames","displayName","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}