{"version":3,"file":"static/js/5097.b8917d24.chunk.js","mappings":"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","sources":["pages/vendor/RegisterDeveloper.jsx","../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/AccordionItemContext.js","../node_modules/react-bootstrap/esm/AccordionBody.js","../node_modules/react-bootstrap/esm/AccordionButton.js","../node_modules/react-bootstrap/esm/AccordionHeader.js","../node_modules/react-bootstrap/esm/AccordionItem.js","../node_modules/react-bootstrap/esm/Accordion.js","../node_modules/react-bootstrap/esm/createChainedFunction.js","../node_modules/react-bootstrap/esm/Collapse.js"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  Col,\r\n  Form,\r\n  InputGroup,\r\n  OverlayTrigger,\r\n  Row,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FaCheck, FaTrash } from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  filePreassignedUrlGenerate,\r\n  getAddNewDeveloper,\r\n  getCitiesList,\r\n  getCoutriesList,\r\n  getSkillList,\r\n  getStatesList,\r\n  getTimeZoneForCountry,\r\n} from \"../../redux/slices/clientDataSlice\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport {\r\n  addDegree,\r\n  getDegreeList,\r\n} from \"../../redux/slices/developerDataSlice\";\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport { EXPERIENCE_OPTIONS } from \"../../helper/utlis\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { GOOGLE_AUTOCOMPLETE_API_KEY } from \"../../components/clients/TimeReporiting/constant\";\r\nimport CommonReactSelect from \"../../components/atomic/CommonReactSelect\";\r\nimport ExperienceCV from \"../../components/common/Modals/ExperienceCVModal\";\r\nimport demoImg from '../../assets/img/demo-img.jpg';\r\nimport { IoCameraOutline } from \"react-icons/io5\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\nconst RegisterDeveloper = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [file, setFile] = useState(null);\r\n  const [CvFile, setCVFile] = useState(null);\r\n  const { smallLoader, skillList } = useSelector((state) => state.clientData);\r\n  const [disbaleYear, setDisbaleYear] = useState([]);\r\n  const [selectedCv, setSelectedCv] = useState(null);\r\n  const [selectedCvErr, setSelectedCvErr] = useState(null);\r\n  const [disabledEndDates, setDisabledEndDates] = useState([]);\r\n  const [skillCate, setSkillsCate] = useState([]);\r\n  const { degreeList } = useSelector((state) => state.developerData);\r\n  const skillLabels = skillCate?.map((skill) => skill.value);\r\n  const skillSet = skillLabels?.toString();\r\n  const { t } = useTranslation();\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [expertSkill, setExpertSkill] = useState([]);\r\n  const [fileTypeError, setFileTypeError] = useState(false);\r\n  const [socialMediaRows, setSocialMediaRows] = useState([\r\n    {\r\n      name: \"\",\r\n      url: \"\",\r\n    },\r\n  ]);\r\n  const { allTimeZones, countriesList, statesList, citiesList, timeZones } =\r\n    useSelector((state) => state.clientData);\r\n  const navigate = useNavigate();\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    clearErrors,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      educations: [\r\n        {\r\n          university_name: \"\",\r\n          degree_id: \"\",\r\n          address: \"\",\r\n          start_year: \"\",\r\n          end_year: \"\",\r\n          currently_attending: false,\r\n          description: \"\",\r\n        },\r\n      ],\r\n    },\r\n  });\r\n  console.log(selectedOption, \"select-----\");\r\n  console.log(expertSkill, \"experskilll\");\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    // name: \"educations\",\r\n    name: \"experiences\",\r\n    name: \"expertise\",\r\n    name: \"social_links\",\r\n    name: \"skills\",\r\n  });\r\n  const {\r\n    fields: educationField,\r\n    append: appendEducationField,\r\n    remove: removeEducationField,\r\n  } = useFieldArray({\r\n    control,\r\n    name: \"educations\",\r\n  });\r\n\r\n  const [experienceFields, setExperienceFields] = useState([\r\n    {\r\n      id: 0,\r\n      job_title: \"\",\r\n      company_name: \"\",\r\n      start_date: \"\",\r\n      end_date: \"\",\r\n      is_still_working: true,\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  const [expertiseFields, setExpertiseFields] = useState([\r\n    { id: 0, skill: \"\", experience: \"\" },\r\n  ]);\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n    dispatch(getCoutriesList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSkillList());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setSkillsCate(skillListMapped);\r\n  }, [skillList]);\r\n\r\n  const handleAppend = () => {\r\n    const expertise = watch(\"expertise\");\r\n    let index = expertise?.findIndex(\r\n      (item) => item.skill == undefined || item.experience == \"\"\r\n    );\r\n    if (index == -1) {\r\n      setExpertiseFields([\r\n        ...expertiseFields,\r\n        { id: expertiseFields?.id + 1, skill: \"\", experience: \"\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (id, index) => {\r\n    const expertise = watch(\"expertise\");\r\n    expertise.splice(index, 1);\r\n    let expertiseFieldsCopy = [...expertiseFields];\r\n    expertiseFieldsCopy.splice(index, 1);\r\n    // const updatedExpertFields = expertiseFieldsCopy.filter(\r\n    //   (field) => field.id !== id\r\n    // );\r\n    setExpertiseFields(expertiseFieldsCopy);\r\n  };\r\n\r\n  function generateYears() {\r\n    const currentYear = new Date().getFullYear();\r\n    const years = [];\r\n    for (let year = 1995; year <= currentYear; year++) {\r\n      years.push(year);\r\n    }\r\n    return years;\r\n  }\r\n\r\n  const yearsArray = generateYears();\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data, \"data---\");\r\n    // let fileData = new FormData();\r\n    // fileData.append(\"file\", file);\r\n    // let fileCVData = new FormData();\r\n    // fileCVData.append(\"file\", CvFile);\r\n    // let formattedExpertise = [];\r\n    // formattedExpertise = data?.expertise?.map((val) => {\r\n    //   return { skill: val?.skill?.label, experience: val?.experience };\r\n    // });\r\n    // let formattedSkills = [];\r\n    // let convertString = selectedOption?.map((item) => item.label);\r\n    // formattedSkills = convertString.map((item) => {\r\n    //   return { skill: item, experience: null };\r\n    // });\r\n\r\n    // const EducationFieldCpy = [...data.educations];\r\n    // let formattedEducationField = [];\r\n    // formattedEducationField = EducationFieldCpy.map((curElem) => {\r\n    //   return { ...curElem, degree_id: curElem.degree_id.value };\r\n    // });\r\n\r\n    // if (data) {\r\n    //   let resume;\r\n    //   console.log(data, \"formData\");\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileCVData, (url) => {\r\n    //       resume=url\r\n    //     }))\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileData, (url) => {\r\n    //       let formData = {\r\n    //         ...data,\r\n    //         skills: formattedSkills,\r\n    //         expertise: formattedExpertise,\r\n    //         profile_picture: url,\r\n    //         educations: formattedEducationField,\r\n    //       };\r\n    //       dispatch(\r\n    //         getAddNewDeveloper(formData, () => {\r\n    //           navigate(\"/vendor-dashboard\");\r\n    //         })\r\n    //       );\r\n    //     })\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  const addtooltip = <Tooltip id=\"tooltip\">{t(\"addRow\")}</Tooltip>;\r\n\r\n  const handleAddMoreExp = async () => {\r\n    const experiences = watch(\"experiences\");\r\n    console.log(experiences, \"experiences\")\r\n    const index = experiences?.findIndex(\r\n      ({\r\n        job_title,\r\n        company_name,\r\n        description,\r\n        start_date,\r\n        end_date,\r\n        is_still_working,\r\n      }) =>\r\n        !company_name ||\r\n        !job_title ||\r\n        !description ||\r\n        !start_date ||\r\n        (!is_still_working && !end_date)\r\n    );\r\n    if (index === -1) {\r\n      const newExperienceField = {\r\n        id: experienceFields.length + 1,\r\n        company_name: \"\",\r\n        job_title: \"\",\r\n        description: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        is_still_working: false,\r\n      };\r\n      setExperienceFields([...experienceFields, newExperienceField]);\r\n    }\r\n  };\r\n  const handleDeleteFieldExp = (index, id) => {\r\n    const experiencesCopy = watch(\"experiences\"); // Copy the experiences array\r\n    const expCop = [...experienceFields]; // Copy the experienceFields array\r\n    experiencesCopy.splice(index, 1);\r\n    const updatedExpertFields = expCop.filter(\r\n      (field) => field.id !== parseInt(id)\r\n    );\r\n\r\n    // Set the state with the updated arrays\r\n    setExperienceFields([...updatedExpertFields]);\r\n  };\r\n  const [educationFields, setEducationFields] = useState([\r\n    {\r\n      university_name: \"\",\r\n      degree_id: \"\",\r\n      address: \"\",\r\n      start_year: \"\",\r\n      end_year: \"\",\r\n      currently_attending: true,\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"country\")?.value) {\r\n      dispatch(getStatesList(watch(\"country\")?.value));\r\n      dispatch(getTimeZoneForCountry(watch(\"country\")?.value));\r\n    }\r\n  }, [watch(\"country\")]);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"state\")?.value) {\r\n      dispatch(getCitiesList(watch(\"country\")?.value, watch(\"state\")?.value));\r\n      setValue(\"city\", null);\r\n    }\r\n  }, [watch(\"state\")]);\r\n\r\n  const handleAddMore = () => {\r\n    const educations = watch(\"educations\");\r\n    const index = educations.findIndex(\r\n      ({ university_name, degree_id, address, start_year, end_year }) =>\r\n        !university_name ||\r\n        !degree_id ||\r\n        !address ||\r\n        end_year === \"Please Select Year\" ||\r\n        start_year === \"Please Select Year\"\r\n    );\r\n    if (index === -1) {\r\n      const newEducationField = {\r\n        id: educationFields.length + 1,\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      };\r\n      // setEducationFields([...educationFields, newEducationField]);\r\n      appendEducationField({\r\n        // id: educationFields.length + 1,\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      });\r\n      setEducationFields([...watch(\"educations\"), newEducationField]);\r\n    }\r\n  };\r\n  const handleDeleteField = (index, id) => {\r\n    const educations = watch(\"educations\");\r\n    educations.splice(index, 1);\r\n    console.log(educationFields, \"educationfield\");\r\n\r\n    // const educationFieldsCpy=[...educationFields];\r\n    const temp = [...educationFields];\r\n    temp.splice(index, 1);\r\n    // const updatedEducationFields = educationFields.filter(\r\n    //   (field) => field.id !== id\r\n    // );\r\n    setEducationFields(temp);\r\n  };\r\n\r\n  const handleAddMoreSocial = () => {\r\n    const newRow = { id: socialMediaRows.length + 1, name: \"\", url: \"\" };\r\n    setSocialMediaRows([...socialMediaRows, newRow]);\r\n  };\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const isChecked = watch(`experiences[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n      setValue(`experiences[${index}].end_date`, null);\r\n    } else {\r\n      const isChecked = watch(`experiences[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n    }\r\n  };\r\n\r\n  const handleCurrentlyAttendingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const isChecked = watch(`educations[${index}].is_still_attending`);\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, null);\r\n    } else {\r\n      const isChecked = watch(`educations[${index}].is_still_attending`);\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, end_year);\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/svg\"];\r\n    const file = event.target.files[0];\r\n    if (file && allowedTypes.includes(file.type)) {\r\n      // clearErrors(\"profile_picture\");\r\n      setFileTypeError(false);\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n      setFile(file);\r\n    } else {\r\n      // setError(\"profile_picture\", {\r\n      //   type: \"manual\",\r\n      //   message: t(\"invalid_file_type\"),\r\n      // });\r\n      setFileTypeError(true);\r\n      setSelectedImage(null);\r\n      // setValue(\"profile_picture\",\"\")\r\n    }\r\n  };\r\n\r\n  const handleUploadCv = (event) => {\r\n    const allowedTypes = [\"application/pdf\"];\r\n    const file = event.target.files[0];\r\n    if (file && allowedTypes.includes(file.type)) {\r\n      setFileTypeError(false);\r\n      setCVFile(file);\r\n      setSelectedCv(file.name);\r\n      setSelectedCvErr(null);\r\n    } else {\r\n      setSelectedCvErr(true);\r\n    }\r\n  };\r\n  const onChangeSelect = (val, arg) => {\r\n    const newOption = createOption(val);\r\n    if (arg == \"skills\") {\r\n      setSelectedOption((prev) => [...prev, newOption]);\r\n      setSkillsCate((prev) => [...prev, newOption]);\r\n    } else {\r\n      setExpertSkill((prev) => [...prev, newOption]);\r\n    }\r\n  };\r\n  const handleCreate = (inputValue, index) => {\r\n    const payload = {\r\n      title: inputValue,\r\n    };\r\n\r\n    dispatch(\r\n      addDegree(payload, () => {\r\n        dispatch(getDegreeList());\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <section className=\"register-developer card-box\">\r\n        <div className=\"\">\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Accordion className=\"register-collapse-main\" defaultActiveKey=\"0\">\r\n              <Accordion.Item className=\"register-collapse-item completed\" eventKey=\"0\">\r\n                <Accordion.Header className=\"register-collapse-header\">\r\n                  <h2 className=\"subheading-resume mb-0\">\r\n                    <span className=\"resume-step\"><span className=\"count\">1</span> <span className=\"compl-check\"><FaCheck /></span> </span> {t(\"enterPersonalDetails\")}\r\n                  </h2>\r\n                </Accordion.Header>\r\n                <Accordion.Body className=\"register-collapse-body\">\r\n\r\n                  <div className=\"inner-form mb-3\">\r\n                    <Row>\r\n\r\n                      <Col md={6}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <Form.Label className=\"font-14 fw-medium\">Image*</Form.Label>\r\n                          <div className=\"profile-upload-preview position-relative\">\r\n                            <div className=\"profile-img-preview w-100 h-100\">\r\n                              <img src={demoImg} className=\"demo-upload-img\" />\r\n                            </div>\r\n                            <Form.Control\r\n                              type=\"file\"\r\n                              id=\"developer-image\"\r\n                              name=\"profile_picture\"\r\n                              {...register(\"profile_picture\", {\r\n                                onChange: (e) => handleFileChange(e),\r\n                                required: {\r\n                                  value: true,\r\n                                  message: t(\"profilePictureValidation\"),\r\n                                },\r\n                              })}\r\n                              className=\"d-none\"\r\n                            />\r\n\r\n                            <Form.Label\r\n                              htmlFor=\"developer-image\"\r\n                              className=\"profile-img-label border\"\r\n                            >\r\n                              <IoCameraOutline />\r\n                            </Form.Label>\r\n                          </div>\r\n                          <span className=\"font-12\">{t(\"uploadImage\")}</span>\r\n                        </Form.Group>\r\n                        {fileTypeError ? (\r\n                          <p className=\"error-message\">{t(\"invalid_file_type\")}</p>\r\n                        ) : (\r\n                          errors?.profile_picture && (\r\n                            <p className=\"error-message\">\r\n                              {errors?.profile_picture?.message}\r\n                            </p>\r\n                          )\r\n                        )}\r\n                        {selectedImage && (\r\n                          <div>\r\n                            <img\r\n                              src={selectedImage && selectedImage}\r\n                              alt=\"Selected\"\r\n                              className=\"uploaded-image\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </Col>\r\n                      <Col md={6}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <Form.Label className=\"common-label font-14 fw-medium\">\r\n                            Upload CV*\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            type=\"file\"\r\n                            id=\"upload_cv\"\r\n                            name=\"upload_cv\"\r\n                            {...register(\"upload_cv\", {\r\n                              onChange: (e) => handleUploadCv(e),\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"profilePictureValidation\"),\r\n                              },\r\n                            })}\r\n                            className=\"d-none\"\r\n                          />\r\n\r\n                          <Form.Label\r\n                            htmlFor=\"upload_cv\"\r\n                            className=\"upload-cv-label\"\r\n                          >\r\n                            <HiUpload />\r\n                            Upload your CV\r\n                          </Form.Label>\r\n                          <span className=\"font-12\">Please upload only pdf, jpeg, png format file. Max file size 5MB.</span>\r\n                        </Form.Group>\r\n                        {selectedCvErr && (\r\n                          <p style={{ color: \"red\" }}>\r\n                            Please upload a valid PDF file.\r\n                          </p>\r\n                        )}\r\n                        {selectedCv && <div>{selectedCv}</div>}\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <Form.Label className=\"common-label font-14 fw-medium\">\r\n                            {t(\"developerName\")} *\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            type=\"text\"\r\n                            className=\"common-field font-14\"\r\n                            {...register(\"name\", {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"nameValidation\"),\r\n                              },\r\n                            })}\r\n                          />\r\n                          <p className=\"error-message\">{errors.name?.message}</p>\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <Form.Label className=\"common-label font-14 fw-medium\">\r\n                            {t(\"email\")} *\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            type=\"email\"\r\n                            className=\"common-field font-14\"\r\n                            {...register(\"email\", {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"emailValidation\"),\r\n                              },\r\n                              pattern: {\r\n                                value: /^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/,\r\n                                message: t(\"invalidEmail\"),\r\n                              },\r\n                            })}\r\n                          />\r\n                          <p className=\"error-message\">{errors.email?.message}</p>\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <Form.Label className=\"common-label font-14 fw-medium\">\r\n                            {t(\"phoneNumber\")} *\r\n                          </Form.Label>\r\n                          {/* <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field font-14\"\r\n                      name=\"phone_number\"\r\n                      {...register(\"phone_number\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"phoneNumberValidation\"),\r\n                        },\r\n                        pattern: {\r\n                          value: /^[0-9]{10}$/,\r\n                          message: \"Please enter a valid phone number\",\r\n                        },\r\n                      })}\r\n                    /> */}\r\n                          <Controller\r\n                            name=\"phone_number\"\r\n                            control={control}\r\n                            rules={{\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"phoneNumberValidation\"),\r\n                              },\r\n                              pattern: {\r\n                                value: /^[0-9]{10}$/,\r\n                                message: \"Please enter a valid phone number\",\r\n                              },\r\n                            }}\r\n                            render={({ field }) => (\r\n                              <input\r\n                                {...field}\r\n                                type=\"text\"\r\n                                className=\"common-field font-14 form-control\"\r\n                                onChange={(e) => {\r\n                                  const numericValue = e.target.value.replace(\r\n                                    /[^0-9]/g,\r\n                                    \"\"\r\n                                  );\r\n                                  field.onChange(numericValue);\r\n                                }}\r\n                              />\r\n                            )}\r\n                          />\r\n                          {errors?.phone_number && (\r\n                            <p className=\"error-message\">\r\n                              {errors?.phone_number?.message}\r\n                            </p>\r\n                          )}\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <Form.Label className=\"common-label font-14 fw-medium\">\r\n                            {t(\"address\")} *\r\n                          </Form.Label>\r\n                          {/* <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field font-14\"\r\n                      // name=\"address\"\r\n                      {...register(\"address\", {\r\n                        required: t(\"addressValidation\"),\r\n                      })}\r\n                    /> */}\r\n                          <Controller\r\n                            name=\"address\"\r\n                            rules={{\r\n                              required: \"Address is required\",\r\n                            }}\r\n                            className=\"common-field font-14 \"\r\n                            control={control}\r\n                            render={({ field, fieldState }) => (\r\n                              <Autocomplete\r\n                                style={{ width: \"500px\" }}\r\n                                errors={fieldState?.errors}\r\n                                className=\"common-field font-14 w-100\"\r\n                                apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                                onPlaceSelected={(place) => {\r\n                                  console.log(place);\r\n                                }}\r\n                                options={{\r\n                                  types: [\"establishment\", \"geocode\"],\r\n                                }}\r\n                                onChange={(event) => {\r\n                                  field.onChange(event.target.value);\r\n                                }}\r\n                                onLoadFailed={(error) => {\r\n                                  console.error(\r\n                                    \"Google Places Autocomplete failed to load\",\r\n                                    error\r\n                                  );\r\n                                }}\r\n                              />\r\n                            )}\r\n                          />\r\n                          {errors?.address && (\r\n                            <p className=\"error-message\">{errors.address.message} </p>\r\n                          )}\r\n                        </Form.Group>\r\n                      </Col>\r\n\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <Form.Label className=\"common-label font-14 fw-medium\">\r\n                            {t(\"professional_title\")} *\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            type=\"text\"\r\n                            className=\"common-field font-14\"\r\n                            name=\"professional_title\"\r\n                            {...register(\"professional_title\", {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"professionalTitleValidation\"),\r\n                              },\r\n                              // pattern: {\r\n                              //     value: /^[A-Za-z\\s]+$/,\r\n                              //     message: \"Country should not contain numbers or special character\",\r\n                              // }\r\n                            })}\r\n                          />\r\n                          <p className=\"error-message\">\r\n                            {errors.professional_title?.message}{\" \"}\r\n                          </p>\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <Form.Group>\r\n                          <Form.Label>{t(\"experienceRequired\")}*</Form.Label>\r\n                          <Form.Select\r\n                            className=\"common-field font-14\"\r\n                            {...register(\"total_experience\", {\r\n                              required: {\r\n                                value: true,\r\n                                message: \"Experienced is required\",\r\n                              },\r\n                            })}\r\n                          >\r\n                            <option disabled selected value=\"\">\r\n                              {t(\"select\")} {t(\"experienceRequired\")}\r\n                            </option>\r\n                            <option value=\"Less_than_one\">\r\n                              {t(\"lessThan1Year\")}\r\n                            </option>\r\n                            <option value=\"1 year\">1 {t(\"year\")}</option>\r\n                            <option value=\"2 years\">2 {t(\"year\")}</option>\r\n                            <option value=\"3 years\">3 {t(\"year\")}</option>\r\n                            <option value=\"4 years\">4 {t(\"year\")}</option>\r\n                            <option value=\"5 years\">5 {t(\"year\")}</option>\r\n                            <option value=\"6+ years \">6 +{t(\"year\")}</option>\r\n                          </Form.Select>\r\n                        </Form.Group>\r\n                        <p className=\"error-message\">{errors.experience?.message}</p>\r\n                      </Col>\r\n\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <CommonReactSelect\r\n                            name=\"country\"\r\n                            errors={errors}\r\n                            // watch={watch}\r\n                            control={control}\r\n                            required=\"Country is required\"\r\n                            label=\"Country\"\r\n                            className=\"common-field font-14\"\r\n                            type=\"country\"\r\n                            options={countriesList}\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n\r\n                          <CommonReactSelect\r\n                            name=\"state\"\r\n                            errors={errors}\r\n                            control={control}\r\n                            required=\"State is required\"\r\n                            label=\"State\"\r\n                            type=\"state\"\r\n                            options={statesList}\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n\r\n                      <Col md={4}>\r\n                        <Form.Group className=\"mb-3\">\r\n                          <CommonReactSelect\r\n                            name=\"city\"\r\n                            errors={errors}\r\n                            control={control}\r\n                            // required=\"City is required\"\r\n                            label=\"City\"\r\n                            type=\"city\"\r\n                            options={citiesList}\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                      {/* <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label font-14 fw-medium\">\r\n                      {t(\"experience\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field font-14\"\r\n                      name=\"experience\"\r\n                      {...register(\"professional_title\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"experienceValidation\"),\r\n                        },\r\n                        // pattern: {\r\n                        //     value: /^[A-Za-z\\s]+$/,\r\n                        //     message: \"Country should not contain numbers or special character\",\r\n                        // }\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">\r\n                      {errors.professional_title?.message}{\" \"}\r\n                    </p>\r\n                  </Form.Group>\r\n                </Col> */}\r\n                    </Row>\r\n                  </div>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n              <Accordion.Item className=\"register-collapse-item\" eventKey=\"1\">\r\n                <Accordion.Header className=\"register-collapse-header\">\r\n                  <h2 className=\"subheading-resume mb-0\"><span className=\"resume-step\">2</span>Add Bio *</h2>\r\n                </Accordion.Header>\r\n                <Accordion.Body className=\"register-collapse-body\">\r\n                  <div className=\"inner-form mb-3\">\r\n                    <Row>\r\n                      <Col md=\"12\">\r\n                        <Form.Group className=\"mb-4\">\r\n                          <Form.Label className=\"font-14 fw-medium\">Bio</Form.Label>\r\n                          <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={3}\r\n                            placeholder=\"Add your about\"\r\n                            className=\"common-field font-14\"\r\n                            name=\"bio\"\r\n                            {...register(\"bio\", {\r\n                              required: {\r\n                                value: true,\r\n                                message: `${t(\"AboutRequired\")}`,\r\n                              },\r\n                            })}\r\n                          />\r\n                          <p className=\"error-message\">{errors.bio?.message} </p>\r\n                        </Form.Group>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n              <Accordion.Item className=\"register-collapse-item\" eventKey=\"2\">\r\n                <Accordion.Header className=\"register-collapse-header\">\r\n                  <h2 className=\"subheading-resume mb-0\"><span className=\"resume-step\">3</span> {t(\"enterExpertise\")}</h2>\r\n                </Accordion.Header>\r\n                <Accordion.Body className=\"register-collapse-body\">\r\n                  {expertiseFields.map((field, index) => {\r\n                    return (\r\n                      <Fragment key={field?.id}>\r\n                        <div>\r\n                          <Row className=\"mb-3\">\r\n                            <Col md={6}>\r\n                              <Form.Group>\r\n                                <Form.Label className=\"common-label font-14 fw-medium\">\r\n                                  {t(\"enterSkill\")}\r\n                                </Form.Label>\r\n                                <CreatableSelect\r\n                                  className=\"common-field font-14\"\r\n                                  {...register(`expertise.${index}.skill`, {\r\n                                    required: {\r\n                                      value: true,\r\n                                      message: t(\"required_message\"),\r\n                                    },\r\n                                  })}\r\n                                  isClearable\r\n                                  options={skillCate}\r\n                                  onChange={(newValue) => {\r\n                                    // setExpertSkill([newValue]);x\r\n                                    setValue(`expertise.${index}.skill`, newValue);\r\n                                    clearErrors(`expertise.${index}.skill`);\r\n                                  }}\r\n                                  onCreateOption={(val) => {\r\n                                    onChangeSelect(val, \"expertise\");\r\n                                  }}\r\n                                // value={expertSkill}\r\n                                // name={expertSkill}\r\n                                />\r\n                              </Form.Group>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                              <div className=\"flex-none\">\r\n                                <Form.Label className=\"common-label font-14 fw-medium\">\r\n                                  {t(\"experience\")}\r\n                                </Form.Label>\r\n                                <Form.Select\r\n                                  {...register(`expertise.${index}.experience`, {\r\n                                    required: {\r\n                                      value: true,\r\n                                      message: t(\"required_message\"),\r\n                                    },\r\n                                  })}\r\n                                  className=\"common-field font-14 shadow-none\"\r\n                                >\r\n                                  <option value=\"\"> {t(\"selectExperience\")} </option>\r\n                                  {EXPERIENCE_OPTIONS.map(\r\n                                    ({ label, value }, index) => (\r\n                                      <option value={value} key={index}>\r\n                                        {label} {t(\"years\")}\r\n                                      </option>\r\n                                    )\r\n                                  )}\r\n                                </Form.Select>\r\n                                {errors?.skills?.[index]?.experience && (\r\n                                  <p className=\"error-message\">\r\n                                    {errors?.skills[index]?.experience?.message}\r\n                                  </p>\r\n                                )}\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                          {errors?.skills?.[index]?.skill && (\r\n                            <p className=\"error-message\">\r\n                              {errors?.skills[index]?.skill?.message}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                        {expertiseFields?.length > 1 && (\r\n                          <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                            <Button\r\n                              className=\"arrow-btn danger-arrow ms-auto\"\r\n                              onClick={() => handleDelete(field?.id, index)}\r\n                            >\r\n                              <FaTrash />\r\n                            </Button>\r\n                          </Col>\r\n                        )}\r\n                      </Fragment>\r\n                    );\r\n                  })}\r\n\r\n                  <div className=\"text-end mb-3\">\r\n                    <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                      <Button\r\n                        className=\"arrow-btn primary-arrow ms-auto\"\r\n                        onClick={handleAppend}\r\n                      >\r\n                        +\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </div>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n              <Accordion.Item className=\"register-collapse-item\" eventKey=\"3\">\r\n                <Accordion.Header className=\"register-collapse-header\">\r\n                  <h2 className=\"subheading-resume mb-0\">\r\n                  <span className=\"resume-step\">4</span> {t(\"enterEducationDetails\")}\r\n                  </h2>\r\n                </Accordion.Header>\r\n                <Accordion.Body className=\"register-collapse-body\">\r\n                  {educationField.map(\r\n                    (\r\n                      item,\r\n                      // {\r\n                      //   id,\r\n                      //   university_name,\r\n                      //   degree_id,\r\n                      //   address,\r\n                      //   start_year,\r\n                      //   end_year,\r\n                      //   currently_attending,\r\n                      // },\r\n                      index\r\n                    ) => (\r\n                      <Row key={item.id}>\r\n                        <Col md={4}>\r\n                          <Form.Group className=\"mb-3\">\r\n                            <Form.Label className=\"font-14 fw-medium\">{t(\"universityName\")} *</Form.Label>\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              className=\"common-field font-14 shadow-none\"\r\n                              {...register(`educations[${index}].university_name`, {\r\n                                required: {\r\n                                  value: true,\r\n                                  message: t(\"universityNameValidation\"),\r\n                                },\r\n                              })}\r\n                            />\r\n                            {errors?.educations?.[index]?.university_name && (\r\n                              <p className=\"error-message\">\r\n                                {errors.educations[index].university_name.message}\r\n                              </p>\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          <Form.Group>\r\n                            <Form.Label className=\"font-14 fw-medium\">{t(\"degreeName\")} *</Form.Label>\r\n                            {/* <Select\r\n                          options={degreeList}\r\n                          onChange={(val) =>\r\n                            setValue(\r\n                              `educations[${index}].degree_id`,\r\n                              val ? val.value : \"\"\r\n                            )\r\n                          }\r\n                          defaultValue={degreeList.find(\r\n                            (option) => option.value === degree_id\r\n                          )}\r\n                        /> */}\r\n                            {/* <Controller\r\n                          name={`educations.${index}.degree_id`}\r\n                          control={control}\r\n                          rules={{required:{\r\n                            value:true,\r\n                            message:t(\"required_message\")\r\n                          }}}\r\n                          render={({ field }) => (\r\n                            <CreatableSelect\r\n                              {...field}\r\n                              value={watch(`educations?.${index}.degree_id`)}\r\n                              isClearable\r\n                              onChange={(val) => {\r\n                                setValue(`educations.${index}.degree_id`, val);\r\n                              }}\r\n                              // defaultValue={degreeList.find(\r\n                              //   (option) => option.value === watch(`educations.${index}.degree_id`)\r\n                              // )}\r\n                              onCreateOption={handleCreate}\r\n                              options={degreeList}\r\n                            />\r\n                          )}\r\n                        /> */}\r\n                            <CreatableSelect\r\n                              className=\"common-field font-14\"\r\n                              {...register(`educations.${index}.degree_id`, {\r\n                                required: {\r\n                                  value: true,\r\n                                  message: t(\"degree_name_required_msg\"),\r\n                                },\r\n                              })}\r\n                              // value={watch(`educations.${index}.degree_id`)}\r\n                              isClearable\r\n                              onChange={(val) => {\r\n                                setValue(`educations.${index}.degree_id`, val);\r\n                              }}\r\n                              // value={degreeList.find((curElem)=>curElem.label === item.label)}\r\n                              onCreateOption={handleCreate}\r\n                              options={degreeList}\r\n                            />\r\n                            {errors?.educations?.[index]?.degree_id && (\r\n                              <p className=\"error-message\">\r\n                                {errors.educations[index].degree_id.message}\r\n                              </p>\r\n                            )}\r\n                            {/* <CreatableSelect\r\n                            {...register(`expertise.${index}.skill`, {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"required_message\"),\r\n                              },\r\n                            })}\r\n                            isClearable\r\n                            options={skillCate}\r\n                            onChange={(newValue) => {\r\n                              // setExpertSkill([newValue]);x\r\n                              setValue(`expertise.${index}.skill`, newValue);\r\n                              clearErrors(`expertise.${index}.skill`);\r\n                            }}\r\n                            onCreateOption={(val) => {\r\n                              onChangeSelect(val, \"expertise\");\r\n                            }}\r\n                            // value={expertSkill}\r\n                            // name={expertSkill}\r\n                          /> */}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          <Form.Group className=\"mb-3\">\r\n                            <Form.Label className=\"font-14 fw-medium\">{t(\"address\")} *</Form.Label>\r\n                            {/* <Form.Control\r\n                          className=\"common-field font-14\"\r\n                          type=\"text\"\r\n                          {...register(`educations[${index}].address`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: t(\"addressValidation\"),\r\n                            },\r\n                          })}\r\n                        /> */}\r\n                            <Controller\r\n                              name=\"address\"\r\n                              rules={{\r\n                                required: \"Address is required\",\r\n                              }}\r\n                              className=\"common-field font-14 \"\r\n                              control={control}\r\n                              render={({ field, fieldState }) => (\r\n                                <Autocomplete\r\n                                  style={{ width: \"500px\" }}\r\n                                  errors={fieldState?.errors}\r\n                                  className=\"common-field font-14 font-14 w-100 p-2\"\r\n                                  apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                                  onPlaceSelected={(place) => {\r\n                                    console.log(place);\r\n                                  }}\r\n                                  options={{\r\n                                    types: [\"establishment\", \"geocode\"],\r\n                                  }}\r\n                                />\r\n                              )}\r\n                            />\r\n                            {errors?.educations?.[index]?.address && (\r\n                              <p className=\"error-message\">\r\n                                {errors.educations[index].address.message}\r\n                              </p>\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          <Form.Group>\r\n                            <Form.Label className=\"font-14 fw-medium\">{t(\"startYear\")} *</Form.Label>\r\n                            <Form.Select\r\n                              className=\"common-field font-14\"\r\n                              {...register(`educations.${index}.start_year`, {\r\n                                required: t(\"startYearValidation\"),\r\n                                validate: {\r\n                                  lessThanEndYear: (value) => {\r\n                                    const endYear = watch(\r\n                                      `educations.${index}.end_year`\r\n                                    );\r\n                                    // if (!endYear || parseInt(value) < parseInt(endYear)) {\r\n                                    //     return true;\r\n                                    // }\r\n                                    // return 'Start Year must be less than End Year';\r\n                                  },\r\n                                },\r\n                              })}\r\n                            >\r\n                              <option disabled selected>\r\n                                {t(\"pleaseSelectYear\")}\r\n                              </option>\r\n                              {yearsArray?.map((item) => (\r\n                                <option key={item} value={item}>\r\n                                  {item}\r\n                                </option>\r\n                              ))}\r\n                            </Form.Select>\r\n                            {errors &&\r\n                              errors.educations &&\r\n                              errors.educations[index] &&\r\n                              errors.educations[index].start_year && (\r\n                                <p className=\"error-message\">\r\n                                  {errors.educations[index].start_year.message}\r\n                                </p>\r\n                              )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          <Form.Group className=\"mb-3\">\r\n                            <Form.Label className=\"font-14 fw-medium\">{t(\"endYear\")} *</Form.Label>\r\n                            <Form.Select\r\n                              className=\"common-field font-14\"\r\n                              {...register(`educations.${index}.end_year`, {\r\n                                required: {\r\n                                  value: disbaleYear[index] ? false : true,\r\n                                  message: t(\"endYearValidation\"),\r\n                                },\r\n                              })}\r\n                              disabled={disbaleYear[index]}\r\n                            >\r\n                              <option disabled selected>\r\n                                {t(\"pleaseSelectYear\")}\r\n                              </option>\r\n                              {yearsArray?.map((item) => (\r\n                                <option key={item} value={item}>\r\n                                  {item}\r\n                                </option>\r\n                              ))}\r\n                            </Form.Select>\r\n                            {errors &&\r\n                              errors.educations &&\r\n                              errors.educations[index] &&\r\n                              errors.educations[index].end_year && (\r\n                                <p className=\"error-message\">\r\n                                  {errors.educations[index].end_year.message}\r\n                                </p>\r\n                              )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Form.Group className=\"mb-4 d-flex gap-2 align-items-center\">\r\n                          <Form.Check\r\n                            type=\"checkbox\"\r\n                            className=\"job-post-checkbox font-14 fw-medium\"\r\n                            id=\"edu-checkbox\"\r\n                            {...register(\r\n                              `educations[${index}].currently_attending`,\r\n                              {\r\n                                required: false,\r\n                              }\r\n                            )}\r\n                            onChange={(e) =>\r\n                              handleCurrentlyAttendingChange(e, index)\r\n                            }\r\n                          />\r\n                          <Form.Label className=\"mb-0\" htmlFor=\"edu-checkbox\">\r\n                            {t(\"currentlyAttending\")}\r\n                          </Form.Label>\r\n                        </Form.Group>\r\n                        {watch(\"educations\")?.length > 1 && (\r\n                          <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                            <Button\r\n                              className=\"arrow-btn danger-arrow\"\r\n                              // onClick={() => handleDeleteField(index,id)}\r\n                              onClick={() => {\r\n                                removeEducationField(index);\r\n                              }}\r\n                            >\r\n                              <FaTrash />\r\n                            </Button>\r\n                          </Col>\r\n                        )}\r\n                      </Row>\r\n                    )\r\n                  )}\r\n\r\n                  <div className=\"text-end my-3\">\r\n                    <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                      <Button\r\n                        className=\"arrow-btn primary-arrow ms-auto\"\r\n                        onClick={handleAddMore}\r\n                      >\r\n                        +\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </div>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n              <Accordion.Item className=\"register-collapse-item\" eventKey=\"4\">\r\n                <Accordion.Header className=\"register-collapse-header\">\r\n                  <h2 className=\"subheading-resume mb-0\"><span className=\"resume-step\">5</span> {t(\"enterExperience\")}</h2>\r\n                </Accordion.Header>\r\n                <Accordion.Body className=\"register-collapse-body\">\r\n                  <ExperienceCV data={null} role=\"vendor\" onSubmitVendor={onSubmit} />\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n              <Accordion.Item className=\"register-collapse-item\" eventKey=\"5\">\r\n                <Accordion.Header className=\"register-collapse-header\">\r\n                  <h2 className=\"subheading-resume mb-0\"><span className=\"resume-step\">6</span> Add Skills *</h2>\r\n                </Accordion.Header>\r\n                <Accordion.Body className=\"register-collapse-body\">\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <Form.Group className=\"mb-4\">\r\n                        <Form.Label className=\"font-14 fw-medium\">Add your skills</Form.Label>\r\n                        <CreatableSelect\r\n                          className=\"common-field font-14\"\r\n                          isMulti\r\n                          isClearable\r\n                          name={selectedOption}\r\n                          onChange={(newValue) => {\r\n                            setSelectedOption(newValue);\r\n                          }}\r\n                          onCreateOption={(val) => {\r\n                            onChangeSelect(val, \"skills\");\r\n                          }}\r\n                          options={skillCate}\r\n                          value={selectedOption}\r\n                        />\r\n                      </Form.Group>\r\n                    </Col>\r\n                  </Row>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n              <Accordion.Item className=\"register-collapse-item\" eventKey=\"6\">\r\n                <Accordion.Header className=\"register-collapse-header\">\r\n                  <h2 className=\"subheading-resume mb-0\"><span className=\"resume-step\">7</span> {t(\"addSocialLinks\")}</h2>\r\n                </Accordion.Header>\r\n                <Accordion.Body className=\"register-collapse-body\">\r\n                  {socialMediaRows.map((row, index) => (\r\n                    <div className=\"experience-container\">\r\n                      <Row>\r\n                        <Col md=\"12\">\r\n                          <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Text id=\"basic-addon1 px-0\">\r\n                              <Form.Select\r\n                                className=\"py-0 border-0 shadow-none bg-transparent\"\r\n                                {...register(`social_links[${index}].name`)} // Register the name field\r\n                              >\r\n                                {/* <option value=\"facebook_url\">Facebook</option> */}\r\n                                <option value=\"linkedin_url\">\r\n                                  {t(\"linkedIn\")}\r\n                                </option>\r\n                                {/* <option value=\"twitter_url\">Twitter</option> */}\r\n                                <option value=\"github_url\">{t(\"github\")}</option>\r\n                              </Form.Select>\r\n                            </InputGroup.Text>\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              className=\"common-field font-14\"\r\n                              placeholder={t(\"enterUrl\")}\r\n                              {...register(`social_links[${index}].url`, {\r\n                                required: {\r\n                                  value: true,\r\n                                  message: \"Url is required\",\r\n                                },\r\n                              })}\r\n                            />\r\n\r\n                            {errors?.social_links?.url && (\r\n                              <p className=\"error-message\">\r\n                                {errors.social_links?.url.message}\r\n                              </p>\r\n                            )}\r\n                          </InputGroup>\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                  ))}\r\n                  <div className=\"text-end mb-3\">\r\n                    <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                      <Button\r\n                        className=\"arrow-btn primary-arrow ms-auto\"\r\n                        onClick={handleAddMoreSocial}\r\n                      >\r\n                        +\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </div>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n            <div className=\"text-center\">\r\n              <RexettButton\r\n                type=\"submit\"\r\n                text={t(\"register\")}\r\n                className=\"main-btn px-5\"\r\n                variant=\"transparent\"\r\n                disabled={smallLoader}\r\n                isLoading={smallLoader}\r\n              />\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterDeveloper;\r\n","\"use client\";\n\nimport * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null || onSelect(eventKeyPassed, e);\n    onClick == null || onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});","/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\nfunction createChainedFunction(...funcs) {\n  return funcs.filter(f => f != null).reduce((acc, f) => {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n    if (acc === null) return f;\n    return function chainedFunction(...args) {\n      // @ts-ignore\n      acc.apply(this, args);\n      // @ts-ignore\n      f.apply(this, args);\n    };\n  }, null);\n}\nexport default createChainedFunction;","import classNames from 'classnames';\nimport css from 'dom-helpers/css';\nimport React, { useMemo } from 'react';\nimport { ENTERED, ENTERING, EXITED, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport createChainedFunction from './createChainedFunction';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MARGINS = {\n  height: ['marginTop', 'marginBottom'],\n  width: ['marginLeft', 'marginRight']\n};\nfunction getDefaultDimensionValue(dimension, elem) {\n  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;\n  const value = elem[offset];\n  const margins = MARGINS[dimension];\n  return value +\n  // @ts-ignore\n  parseInt(css(elem, margins[0]), 10) +\n  // @ts-ignore\n  parseInt(css(elem, margins[1]), 10);\n}\nconst collapseStyles = {\n  [EXITED]: 'collapse',\n  [EXITING]: 'collapsing',\n  [ENTERING]: 'collapsing',\n  [ENTERED]: 'collapse show'\n};\nconst Collapse = /*#__PURE__*/React.forwardRef(({\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  className,\n  children,\n  dimension = 'height',\n  in: inProp = false,\n  timeout = 300,\n  mountOnEnter = false,\n  unmountOnExit = false,\n  appear = false,\n  getDimensionValue = getDefaultDimensionValue,\n  ...props\n}, ref) => {\n  /* Compute dimension */\n  const computedDimension = typeof dimension === 'function' ? dimension() : dimension;\n\n  /* -- Expanding -- */\n  const handleEnter = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = '0';\n  }, onEnter), [computedDimension, onEnter]);\n  const handleEntering = useMemo(() => createChainedFunction(elem => {\n    const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;\n    elem.style[computedDimension] = `${elem[scroll]}px`;\n  }, onEntering), [computedDimension, onEntering]);\n  const handleEntered = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onEntered), [computedDimension, onEntered]);\n\n  /* -- Collapsing -- */\n  const handleExit = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;\n    triggerBrowserReflow(elem);\n  }, onExit), [onExit, getDimensionValue, computedDimension]);\n  const handleExiting = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onExiting), [computedDimension, onExiting]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    \"aria-expanded\": props.role ? inProp : null,\n    onEnter: handleEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExit: handleExit,\n    onExiting: handleExiting,\n    childRef: children.ref,\n    in: inProp,\n    timeout: timeout,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit,\n    appear: appear,\n    children: (state, innerProps) => /*#__PURE__*/React.cloneElement(children, {\n      ...innerProps,\n      className: classNames(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal')\n    })\n  });\n});\n\n// @ts-ignore\n\nexport default Collapse;"],"names":["RegisterDeveloper","_errors$profile_pictu","_errors$name","_errors$email","_errors$phone_number","_errors$professional_","_errors$experience","_errors$bio","dispatch","useDispatch","selectedImage","setSelectedImage","useState","file","setFile","CvFile","setCVFile","smallLoader","skillList","useSelector","state","clientData","disbaleYear","setDisbaleYear","selectedCv","setSelectedCv","selectedCvErr","setSelectedCvErr","disabledEndDates","setDisabledEndDates","skillCate","setSkillsCate","degreeList","developerData","skillLabels","map","skill","value","t","toString","useTranslation","selectedOption","setSelectedOption","expertSkill","setExpertSkill","fileTypeError","setFileTypeError","socialMediaRows","setSocialMediaRows","name","url","allTimeZones","countriesList","statesList","citiesList","timeZones","register","control","setValue","clearErrors","watch","handleSubmit","reset","trigger","setError","formState","errors","useNavigate","useForm","defaultValues","educations","university_name","degree_id","address","start_year","end_year","currently_attending","description","console","log","fields","append","remove","replace","useFieldArray","educationField","appendEducationField","removeEducationField","experienceFields","setExperienceFields","id","job_title","company_name","start_date","end_date","is_still_working","expertiseFields","setExpertiseFields","experience","skillListMapped","item","label","title","useEffect","getDegreeList","getCoutriesList","getSkillList","yearsArray","currentYear","Date","getFullYear","years","year","push","generateYears","onSubmit","data","addtooltip","_jsx","Tooltip","children","educationFields","setEducationFields","_watch","_watch2","_watch3","getStatesList","getTimeZoneForCountry","_watch4","_watch5","_watch6","getCitiesList","onChangeSelect","val","arg","newOption","toLowerCase","prev","handleCreate","inputValue","index","payload","addDegree","_Fragment","className","_jsxs","Form","Accordion","defaultActiveKey","Item","eventKey","Header","FaCheck","Body","Row","Col","md","Group","Label","src","demoImg","Control","type","onChange","e","event","target","files","includes","reader","FileReader","onloadend","result","readAsDataURL","handleFileChange","required","message","htmlFor","IoCameraOutline","profile_picture","alt","handleUploadCv","HiUpload","style","color","pattern","email","Controller","rules","render","_ref3","field","numericValue","phone_number","_ref4","fieldState","Autocomplete","width","apiKey","GOOGLE_AUTOCOMPLETE_API_KEY","onPlaceSelected","place","options","types","onLoadFailed","error","professional_title","Select","disabled","selected","CommonReactSelect","as","rows","placeholder","bio","_errors$skills","_errors$skills$index","_errors$skills$index2","_errors$skills$index3","_errors$skills2","_errors$skills2$index","_errors$skills$index4","_errors$skills$index5","Fragment","CreatableSelect","isClearable","newValue","onCreateOption","EXPERIENCE_OPTIONS","_ref5","skills","length","Button","onClick","handleDelete","splice","expertiseFieldsCopy","FaTrash","OverlayTrigger","placement","overlay","handleAppend","expertise","findIndex","undefined","_errors$educations","_errors$educations$in","_errors$educations2","_errors$educations2$i","_errors$educations3","_errors$educations3$i","_watch7","_ref6","validate","lessThanEndYear","Check","handleCurrentlyAttendingChange","checked","updatedDisabledEndDates","handleAddMore","_ref2","newEducationField","ExperienceCV","role","onSubmitVendor","isMulti","row","_errors$social_links","_errors$social_links2","InputGroup","Text","social_links","handleAddMoreSocial","newRow","RexettButton","text","variant","isLoading","isAccordionItemSelected","activeEventKey","Array","isArray","context","React","displayName","AccordionCollapse","_ref","ref","Component","bsPrefix","props","useContext","AccordionContext","useBootstrapPrefix","Collapse","in","classNames","only","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","accordionOnClick","onSelect","alwaysOpen","eventKeyPassed","filter","k","useAccordionButton","AccordionHeader","AccordionItem","contextValue","useMemo","Provider","activeKey","flush","controlledProps","useUncontrolled","prefix","Object","assign","_len","arguments","funcs","_key","f","reduce","acc","Error","_len2","args","_key2","apply","this","MARGINS","height","getDefaultDimensionValue","dimension","elem","toUpperCase","slice","margins","parseInt","css","collapseStyles","EXITED","EXITING","ENTERING","ENTERED","inProp","timeout","mountOnEnter","unmountOnExit","appear","getDimensionValue","computedDimension","handleEnter","createChainedFunction","handleEntering","scroll","handleEntered","handleExit","triggerBrowserReflow","handleExiting","TransitionWrapper","addEndListener","transitionEndListener","childRef","innerProps"],"sourceRoot":""}