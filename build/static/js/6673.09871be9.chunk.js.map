{"version":3,"file":"static/js/6673.09871be9.chunk.js","mappings":"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","sources":["components/atomic/NoDataFound.jsx","pages/admin/Modals/UploadInvoice.jsx","pages/vendor/TimeReporting.jsx"],"sourcesContent":["import React from 'react'\r\nimport errorImg from '../../assets/img/warning-icon.gif'\r\nconst NoDataFound = ({data}) => {\r\n  return (\r\n    <div className='no-data-container'>\r\n      <div className='no-data'>\r\n        <img src={errorImg} />{data?data:\"No Data Found\"}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoDataFound","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createNewFolderAndFile, filePreassignedUrlGenerate } from \"../../../redux/slices/clientDataSlice\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { MdPictureAsPdf } from \"react-icons/md\";\r\nconst UploadInvoice = ({ show, handleClose,contractId ,role}) => {\r\n    const [selectedFile, setSelectedFile] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const { smallLoader } = useSelector(state => state.clientData);\r\n    const {\r\n        register,\r\n        setValue,\r\n        handleSubmit,\r\n        formState: { errors, isDirty, isValid, isSubmitting },\r\n    } = useForm({});\r\n\r\n    const onSubmit = (values) => {\r\n        console.log(values?.file?.type, \"values\");\r\n    \r\n       \r\n         if (values.category === \"3\" && values.file_name[0].type !== \"application/pdf\") {\r\n            alert(\"Only PDF files are allowed for Invoices category.\");\r\n            return; \r\n        }\r\n    \r\n        let fileData = new FormData();\r\n        fileData.append(\"file\", selectedFile);\r\n    \r\n        dispatch(filePreassignedUrlGenerate(fileData, (url) => {\r\n            let data = {\r\n                \"contract_id\": contractId,\r\n                \"file_type\": 0,\r\n                \"parent_id\": 0,\r\n                \"type\": values.category,\r\n                \"s3_path\": url,\r\n                \"file_extension\": \"pdf\" \r\n            };\r\n            dispatch(createNewFolderAndFile(data, () => {\r\n                handleClose();\r\n            }));\r\n        }));\r\n    };\r\n    return (\r\n        <Modal show={show} onHide={handleClose} centered animation size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Upload File</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <div className=\"experience-container\">\r\n                        <Row>\r\n                            <Col md=\"12\">\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <Form.Label>Select Category</Form.Label>\r\n                                   { role ===\"admin\" ?  <Form.Select\r\n                                        {...register(\"category\", { required: \"Please select a Category\" })}\r\n                                    >\r\n                                        <option value=\"\" selected disabled>Select Category</option>\r\n                                        <option value=\"3\">Invoices</option>\r\n                                    </Form.Select> : <Form.Select\r\n                                        {...register(\"category\", { required: \"Please select a Category\" })}\r\n                                    >\r\n                                        <option value=\"\" selected disabled>Select Category</option>\r\n                                        <option value=\"3\">Invoices</option>\r\n                                        <option value=\"1\">Contracts</option>\r\n                                        <option value=\"2\">CV</option>\r\n                                        <option value=\"4\">Others</option>\r\n                                    </Form.Select>}\r\n                                    <Form.Control type=\"file\" className=\"d-none\" id=\"upload-file\"\r\n                                        name=\"file_name\"\r\n                                        {...register(\"file_name\", {\r\n                                            onChange: (e) => setSelectedFile(e.target.files[0]),\r\n                                            required: {\r\n                                                value: true,\r\n                                            },\r\n                                        })}\r\n                                    />\r\n                                    <Form.Label htmlFor=\"upload-file\" className=\"upload-file-label\">Upload File</Form.Label>\r\n                                </Form.Group>\r\n                                {selectedFile ? <div>Selected File:<span className=\"fs-6\">{selectedFile?.name}</span></div> : \"\"}\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                        <RexettButton\r\n                            type=\"submit\"\r\n                            text=\"Create\"\r\n                            className=\"main-btn px-4\"\r\n                            variant=\"transparent\"\r\n                            disabled={smallLoader}\r\n                            isLoading={smallLoader}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nexport default UploadInvoice;","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ScreenLoader from \"../../components/atomic/ScreenLoader\";\r\nimport { getClientList, getVendorTimeReporting, getVendorWithClient } from \"../../redux/slices/vendorDataSlice\";\r\nimport UploadInvoice from \"../admin/Modals/UploadInvoice\";\r\nimport NoDataFound from \"../../components/atomic/NoDataFound\"\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst VendorTimeReporting = () => {\r\n    const dispatch = useDispatch()\r\n    const { vendorTimeReport, screenLoader,clientList} = useSelector(state => state.vendorData)\r\n    const [contractId, setContractID] = useState(null)\r\n    const [showEditTimeModal, setShowEditTimeModal] = useState(false);\r\n    const [developerData, setDeveloperData] = useState([])\r\n    const { t } = useTranslation()\r\n\r\n    useEffect(() => {\r\n        let newContacts = [...vendorTimeReport]\r\n        let d = newContacts.map((item, index) => {\r\n            return {\r\n                ...item,\r\n                newData: item.contracts[index] ? item.contracts[index] : item.contracts[0]\r\n            };\r\n        });\r\n\r\n        setDeveloperData(d)\r\n\r\n    }, [vendorTimeReport])\r\n\r\n    useEffect(()=>{\r\n        dispatch(getClientList())\r\n         },[])\r\n\r\n\r\n    const handleShowEditTimeModal = () => {\r\n        setShowEditTimeModal(true);\r\n    };\r\n    const handleCloseEditTimeModal = () => {\r\n        setShowEditTimeModal(false);\r\n    };\r\n\r\n    const [showUploadInvoice, setShowUploadInvoice] = useState(false);\r\n    const handleShowUploadInvoice = (id) => {\r\n        setShowUploadInvoice(true);\r\n        setContractID(id)\r\n    };\r\n\r\n    const handleCloseUploadInvoice = () => {\r\n        setShowUploadInvoice(false);\r\n    };\r\n    useEffect(() => {\r\n        dispatch(getVendorTimeReporting())\r\n    }, [])\r\n\r\n    const contractName = (data) => {\r\n        let devName = data.map((item) => {\r\n            return { dev: item?.contractDetails?.developer.name }\r\n        })\r\n        return devName\r\n    }\r\n\r\n    const handleDeveloper = (e, inx) => {\r\n        let newInx = e.target.value\r\n        let newDev = [...developerData]\r\n        newDev[inx].newData = newDev[inx].contracts[newInx]\r\n        setDeveloperData(newDev)\r\n    }\r\n\r\n    const handleClient=(e)=>{\r\n    dispatch(getVendorWithClient(e.target.value))\r\n    }\r\n    return (\r\n        <>\r\n            <section>\r\n                <div className=\"filter-section mb-4\">\r\n                    <Form>\r\n                        <div className=\"d-flex gap-3 justify-content-between align-items-end\">\r\n                            <div className=\"d-flex gap-3\">\r\n                                <div>\r\n                                    <Form.Select className=\"filter-select shadow-none\" onChange={handleClient} >\r\n                                        <option value=\"\" selected disabled>{t(\"selectClients\")}</option>\r\n                                        {\r\n                                            clientList?.map((item) => {\r\n                                                return (<>\r\n                                                    <option value={item?.id}>{item?.name}</option>\r\n                                                </>)\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table time-table table-bordered table-ui-custom\">\r\n                            <thead>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"clientName\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"noOfDevelopersHired\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"nameOfDevelopers\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"totalHours\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"location\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"redeem\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"invoice\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"contract\")}\r\n                                </th>\r\n                            </thead>\r\n                            {screenLoader ? <ScreenLoader /> : <tbody>\r\n                                {\r\n                                   developerData.length>0? developerData?.map((item, index) => {\r\n                                        return (\r\n                                            <>\r\n                                                <tr>\r\n                                                    <td className=\"time-table-data\">{item?.client_details?.name}</td>\r\n                                                    <td className=\"time-table-data\">{item?.contracts?.length}</td>\r\n                                                    <td className=\"time-table-data\">\r\n                                                        <Form.Select className=\"status-select shadow-none\" onChange={(e) => handleDeveloper(e, index)}>\r\n                                                            {\r\n                                                                contractName(item?.contracts)?.map((el, inx) => {\r\n                                                                    return (\r\n                                                                        <>\r\n                                                                            <option value={inx}>{el?.dev}</option>\r\n                                                                        </>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </Form.Select>\r\n                                                    </td>\r\n                                                    <td className=\"time-table-data\">{item?.newData?.time_report?.totalDuration}hr</td>\r\n                                                    <td className=\"time-table-data\">{item?.newData?.contractDetails?.job_type}</td>\r\n                                                    <td className=\"time-table-data\">{t(\"N/A\")}</td>\r\n                                                    <td className=\"time-table-data\">\r\n                                                        <label className=\"upload-invoice-label\" onClick={() => handleShowUploadInvoice(item?.newData?.contractDetails?.id)}>\r\n                                                             {!(item?.newData?.contractDetails?.has_invoice) ? t(\"uploadInvoice\") : t(\"invoiceUploaded\")}\r\n                                                            <HiUpload />\r\n                                                    </label>\r\n                                                    </td>\r\n                                                    <td className=\"time-table-data\">{item?.newData?.contractDetails?.employment_type}</td>\r\n                                                </tr>\r\n                                            </>\r\n                                        )\r\n                                    })\r\n                                :<td colSpan={9}><NoDataFound/></td>}\r\n\r\n                            </tbody>}\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <UploadInvoice show={showUploadInvoice} handleClose={handleCloseUploadInvoice} contractId={contractId} role = {\"vendor\"}/>\r\n        </>\r\n    )\r\n}\r\nexport default VendorTimeReporting;"],"names":["_ref","data","_jsx","className","children","_jsxs","src","errorImg","show","handleClose","contractId","role","selectedFile","setSelectedFile","useState","dispatch","useDispatch","smallLoader","useSelector","state","clientData","register","setValue","handleSubmit","formState","errors","isDirty","isValid","isSubmitting","useForm","Modal","onHide","centered","animation","size","Header","closeButton","Title","Body","onSubmit","values","_values$file","console","log","file","type","category","file_name","alert","fileData","FormData","append","filePreassignedUrlGenerate","url","createNewFolderAndFile","noValidate","Row","Col","md","Form","Group","Label","Select","required","value","selected","disabled","Control","id","name","onChange","e","target","files","htmlFor","RexettButton","text","variant","isLoading","VendorTimeReporting","vendorTimeReport","screenLoader","clientList","vendorData","setContractID","showEditTimeModal","setShowEditTimeModal","developerData","setDeveloperData","t","useTranslation","useEffect","d","map","item","index","newData","contracts","getClientList","showUploadInvoice","setShowUploadInvoice","getVendorTimeReporting","_Fragment","getVendorWithClient","ScreenLoader","length","_item$client_details","_item$contracts","_contractName","_item$newData","_item$newData$time_re","_item$newData2","_item$newData2$contra","_item$newData4","_item$newData4$contra","_item$newData5","_item$newData5$contra","client_details","handleDeveloper","inx","newInx","newDev","_item$contractDetails","dev","contractDetails","developer","el","time_report","totalDuration","job_type","onClick","_item$newData3","_item$newData3$contra","has_invoice","HiUpload","employment_type","colSpan","NoDataFound","UploadInvoice","handleCloseUploadInvoice"],"sourceRoot":""}