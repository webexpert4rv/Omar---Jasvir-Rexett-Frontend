{"version":3,"file":"static/js/1997.33c9192c.chunk.js","mappings":"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","sources":["pages/developer/DeveloperEditProfile.jsx"],"sourcesContent":["import React, { useEffect,useState } from \"react\";\r\nimport ClientStep1 from \"../Registration flows/Client Registration flow/ClientStep1\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport ScreenLoader from \"../../components/atomic/ScreenLoader\";\r\nimport { getDeveloperActiveStepFields, getStepDataFromAPI } from \"../Registration flows/registrationConstant\";\r\nimport ProfileWrapper from \"../../components/common/EditProfile/ProfileWrapper\";\r\nimport { fileUploadForWeb, getDeveloperProfileDetails } from \"../../redux/slices/developerDataSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport { getCoutriesList,getCitiesList,getStatesList, getTimeZoneForCountry} from \"../../redux/slices/clientDataSlice\";\r\nimport { developerRegistration } from \"../../redux/slices/developerDataSlice\";\r\nimport AllRoleEditProfile from \"../../components/common/EditProfile/AllRoleEditProfile\";\r\n\r\n\r\n\r\nconst DeveloperEditProfile = () => {\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    reset,\r\n    formState: { errors },\r\n    watch,\r\n    setError,\r\n    setValue,\r\n    clearErrors,\r\n  } = useForm({});\r\n  const dispatch =useDispatch()\r\n  const { smallLoader, developerRegistrationData } = useSelector(\r\n    (state) => state?.developerData\r\n  );\r\n  const [previewImage, setPreviewImage] = useState({\r\n    profile_picture: \"\",\r\n    resume: \"\",\r\n    introVideo: \"\",\r\n  });\r\n  const [imageFile, setImageFile] = useState({\r\n    resume: \"\",\r\n    introVideo: \"\",\r\n  });\r\n\r\n  let userId=localStorage.getItem(\"userId\")\r\n\r\n  const onSubmit = (values) => {\r\n    // debugger;\r\n    console.log(values, \"va\");\r\n\r\n    const uploadFiles = (files) => {\r\n      let uploadedUrls = {};\r\n\r\n      const uploadPromises = Object.keys(files).map((key) => {\r\n        if (files[key]) {\r\n          let fileData = new FormData();\r\n          fileData.append(\"file\", files[key]);\r\n\r\n          return new Promise((resolve) => {\r\n            dispatch(\r\n              fileUploadForWeb(fileData, (url) => {\r\n                console.log(url, `${key} url`);\r\n                uploadedUrls[key] = url;\r\n                resolve();\r\n              })\r\n            );\r\n          });\r\n        } else {\r\n          return Promise.resolve(); // Resolve immediately if no file to upload\r\n        }\r\n      });\r\n\r\n      Promise.all(uploadPromises).then(() => {\r\n        let payload = {\r\n          first_name: values?.first_name,\r\n          last_name: values?.last_name,\r\n          profile_picture: uploadedUrls?.profile_picture,\r\n          profession: values?.professional_title,\r\n          email: values?.email,\r\n          country: values?.country_code?.label,\r\n          address: values?.address,\r\n          password: values?.password,\r\n          language_preference: values?.language_preference,\r\n          total_experience: values?.total_experience,\r\n          // city: values?.city,\r\n          city: null,\r\n          confirm_password:values?.confirm_password,\r\n          state: values?.state_iso_code?.label,\r\n          country_iso_code: values?.country_iso_code?.value,\r\n          state_iso_code: values?.state_iso_code?.value,\r\n          passcode: values?.passcode,\r\n          country_code: values?.country_code?.value,\r\n          phone_number: values?.phone_number,\r\n          language_proficiency: values?.language_proficiency?.value,\r\n          time_zone: values?.time_zone?.value,\r\n          resume: uploadedUrls?.resume ? uploadedUrls?.resume : values?.resume,\r\n          linkedin_url: values?.linkedin_url,\r\n          github_url: values?.github_url,\r\n          intro_video_url: uploadedUrls?.introVideo ? uploadedUrls?.introVideo : values?.intro_video_url,\r\n          user_id: userId,\r\n          is_2FA_enabled: values?.is_2FA_enabled,\r\n          tax_id: values?.tax_id,\r\n          cin: values?.cin,\r\n          address_2:values?.address_2,\r\n          company_name: values?.company_name,\r\n          company_tax_id: values?.company_tax_id\r\n        };\r\n\r\n        dispatch(developerRegistration(payload));\r\n      });\r\n    };\r\n    uploadFiles({\r\n      resume: imageFile.resume,\r\n      introVideo: imageFile.introVideo,\r\n      profile_picture: imageFile.profile_picture,\r\n    });\r\n  }\r\n\r\n  const watchAllFields = watch();\r\n\r\n\r\nconsole.log(watchAllFields,'allfieldsssssss hihi');\r\n\r\n  const toggleConfirmationModal = (e) => {\r\n    // Handle toggle confirmation modal\r\n  };\r\n\r\n  const [screenLoader, setScreenLoader] = React.useState(false); // Assuming screenLoader is a state\r\n\r\n  const activeStep = 1; // Assuming activeStep is defined somewhere\r\n  const nestedActiveStep = 0; // Assuming nestedActiveStep is defined somewhere\r\n const activeStepFields = getDeveloperActiveStepFields(\r\n    activeStep,\r\n    nestedActiveStep\r\n  );\r\nconsole.log(activeStepFields,'active field check')\r\n\r\n  let stepData = getStepDataFromAPI(developerRegistrationData, activeStep);\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    if(userId){\r\n    dispatch(getDeveloperProfileDetails(userId));\r\n    dispatch(getCoutriesList());\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"country\")?.value) {\r\n      dispatch(getStatesList(watch(\"country\")?.value));\r\n      dispatch(getTimeZoneForCountry(watch(\"country\")?.value));\r\n    }\r\n  }, [watch(\"country\")]);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"state\")?.value) {\r\n      dispatch(getCitiesList(watch(\"country\")?.value, watch(\"state\")?.value));\r\n      setValue(\"city\", null);\r\n    }\r\n  }, [watch(\"state\")]);\r\n\r\n  console.log(stepData,'stepstep hihi');\r\n\r\n\r\n  // useEffect(()=>{\r\n  //   if(stepData){\r\n  //   setValue('first_name',firstName);\r\n  //   setValue('last_name',lastName);\r\n  //   setValue(\"phone_number\",stepData?.phone_number);\r\n  //   setValue(\"email\",stepData?.email);\r\n  //   setValue(\"profession\",stepData?.professional_title);\r\n  //   setValue(\"country\",{ label: stepData?.country, value: null });\r\n  //   setValue(\"state\",{ label: stepData?.state, value: null });\r\n  //   setValue(\"city\",{ label: stepData?.city, value: null });\r\n  //   setValue('language_preference',{ label: stepData?.language_preference, value: stepData?.language_preference });\r\n  //   setValue('total_experience',{ label: stepData?.total_experience, value: stepData?.total_experience });\r\n  //   setValue(\"passcode\",stepData?.passcode);\r\n  //   setValue(\"time_zone\",stepData?.time_zone);\r\n  //   setValue(\"time_zone\",{ label: stepData?.time_zone, value: null });\r\n  //   setValue(\"address\",stepData?.address);\r\n  //   setValue('git_hub',stepData?.github_url);\r\n  //   setValue('linked_in',stepData?.linkedin_url)\r\n\r\n  //   setPreviewImage({\r\n  //     ...previewImage,\r\n  //     profile_picture: stepData?.profile_picture\r\n  //   });\r\n  // }\r\n  // },[stepData])\r\n\r\n\r\n  return (\r\n    <>\r\n      <ProfileWrapper>\r\n      <div>\r\n        {screenLoader ? (\r\n          <ScreenLoader />\r\n        ) : (\r\n          // <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n          //   <Row className=\"mb-4\">\r\n          //     <Col md=\"12\" className=\"mb-3\">\r\n          //       <h5 className=\"fw-semibold mb-3\">Security</h5>\r\n          //       <Form.Group className=\"mb-3\">\r\n          //         <Row className=\"gx-4\">\r\n          //           <Col md={8}>\r\n          //             <Form.Label className=\"common-label font-16 fw-semibold mb-0\">\r\n          //               Enable Two Factor Authentication\r\n          //             </Form.Label>\r\n          //             <p className=\"font-14 mb-0\">\r\n          //               Two-Factor Authentication (2FA) is a security process in\r\n          //               which users provide two different authentication factors\r\n          //               to verify their identity. This method adds an additional\r\n          //               layer of security, making it more difficult for\r\n          //               unauthorized individuals to access your accounts.\r\n          //             </p>\r\n          //           </Col>\r\n          //           <Col md={4}>\r\n          //             <div className=\"form-check form-switch toggle-switch-wrapper\">\r\n          //               <Controller\r\n          //                 name=\"is_2FA_enabled\"\r\n          //                 control={control}\r\n          //                 render={({ field }) => (\r\n          //                   <input\r\n          //                     {...field}\r\n          //                     onChange={(e) => {\r\n          //                       toggleConfirmationModal(e);\r\n          //                     }}\r\n          //                     checked={watch(\"is_2FA_enabled\") === true}\r\n          //                     className=\"form-check-input toggle-switch-custom\"\r\n          //                     type=\"checkbox\"\r\n          //                     role=\"switch\"\r\n          //                   />\r\n          //                 )}\r\n          //               />\r\n          //             </div>\r\n          //           </Col>\r\n          //         </Row>\r\n          //       </Form.Group>\r\n          //     </Col>\r\n          //     <Col md=\"12\">\r\n          //       <ClientStep1\r\n          //         control={control}\r\n          //         errors={errors}\r\n          //         activeStep={activeStep}\r\n          //         nestedActiveStep={nestedActiveStep}\r\n          //         type=\"developer\"\r\n          //         register={register}\r\n          //         stepFields={activeStepFields}\r\n          //         setError={setError}\r\n          //         clearErrors={clearErrors}\r\n          //         watch={watch}\r\n          //         setValue={setValue}\r\n          //         previewImage={previewImage}\r\n          //         imageFile={imageFile}\r\n          //         setPreviewImage={setPreviewImage}\r\n          //         setImageFile={setImageFile}\r\n          //         isProfileSectionRequired={activeStep === 1 && nestedActiveStep === 0}\r\n          //         isEditMode={true}\r\n          //       />\r\n          //     </Col>\r\n          //   </Row>\r\n          //   <div className=\"d-flex justify-content-center\">\r\n          //   <RexettButton\r\n          //         type=\"submit\"\r\n          //         text={'Update'}\r\n          //         className=\"main-btn px-5 mr-2\"\r\n          //         disabled={smallLoader}\r\n          //         isLoading={smallLoader}\r\n          //       />\r\n          //   </div>\r\n          // </form>\r\n          <AllRoleEditProfile role=\"developer\" name={'individual'} onSubmit={onSubmit} activeStep={activeStep} previewImage={previewImage} imageFile={imageFile} setImageFile={setImageFile} setPreviewImage={setPreviewImage} stepData={stepData} activeStepFields={activeStepFields} />\r\n        )}\r\n      </div>\r\n      </ProfileWrapper>\r\n     \r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeveloperEditProfile;\r\n"],"names":["DeveloperEditProfile","handleSubmit","register","control","reset","formState","errors","watch","setError","setValue","clearErrors","useForm","dispatch","useDispatch","smallLoader","developerRegistrationData","useSelector","state","developerData","previewImage","setPreviewImage","useState","profile_picture","resume","introVideo","imageFile","setImageFile","userId","localStorage","getItem","watchAllFields","console","log","screenLoader","setScreenLoader","React","activeStepFields","getDeveloperActiveStepFields","stepData","getStepDataFromAPI","useEffect","getDeveloperProfileDetails","getCoutriesList","_watch","_watch2","_watch3","value","getStatesList","getTimeZoneForCountry","_watch4","_watch5","_watch6","getCitiesList","_jsx","_Fragment","children","ProfileWrapper","ScreenLoader","AllRoleEditProfile","role","name","onSubmit","values","files","uploadedUrls","uploadPromises","Object","keys","map","key","fileData","FormData","append","Promise","resolve","fileUploadForWeb","url","all","then","_values$country_code","_values$state_iso_cod","_values$country_iso_c","_values$state_iso_cod2","_values$country_code2","_values$language_prof","_values$time_zone","payload","first_name","last_name","profession","professional_title","email","country","country_code","label","address","password","language_preference","total_experience","city","confirm_password","state_iso_code","country_iso_code","passcode","phone_number","language_proficiency","time_zone","linkedin_url","github_url","intro_video_url","user_id","is_2FA_enabled","tax_id","cin","address_2","company_name","company_tax_id","developerRegistration","uploadFiles","activeStep"],"sourceRoot":""}