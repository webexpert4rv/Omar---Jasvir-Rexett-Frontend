{"version":3,"file":"static/js/5097.2a664b7c.chunk.js","mappings":"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","sources":["components/common/Modals/ExperienceCVModal.jsx","pages/vendor/RegisterDeveloper.jsx","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Form, Row, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { useForm, useFieldArray } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { addDeveloperCvExperience, deleteExperience, fetchDeveloperCv, updateDeveloperCvExperience } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst ExperienceCVModal = ({ show, handleClose, data, id, role, onSubmitVendor }) => {\r\n  const [renderModalData, setRenderModalData] = useState(data);\r\n  const [disabledEndDates, setDisabledEndDates] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    setError, \r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      test: data ? data : [{ company_name: \"\", job_title: \"\" }]\r\n    }\r\n  });\r\n  const { t } = useTranslation();\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"test\",\r\n  });\r\n  const { smallLoader } = useSelector(state => state.developerData);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data?.forEach((item, index) => {\r\n        append({\r\n          company_name: item.company_name,\r\n          job_title: item.job_title,\r\n          description: item.description,\r\n          start_date: item.start_date?.slice(0, 10),\r\n          end_date: item.end_date?.slice(0, 10),\r\n          is_still_working: item.is_still_working,\r\n          experience_id: item.id\r\n        });\r\n        setDisabledEndDates(prevState => [...prevState, item.is_still_working]);\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n      setValue(`test[${index}].end_date`, \"\");\r\n    } else {\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (value) => {\r\n    let { test } = value;\r\n    let data = {\r\n      developer_id: id,\r\n      experiences: test\r\n    };\r\n    if (role === \"vendor\") {\r\n      if (onSubmitVendor) {\r\n        console.log(data,\"newDat\")\r\n        onSubmitVendor(data);\r\n      }\r\n      handleClose();\r\n    } else {\r\n      dispatch(updateDeveloperCvExperience(data, role, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleAppend = async () => {\r\n    const isValid = await trigger();\r\n    if (isValid) {\r\n      append({\r\n        company_name: \"\",\r\n        job_title: \"\",\r\n        description: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        is_still_working: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteDeveloperExperience = (itemId, index) => {\r\n    remove(index);\r\n    if (itemId) {\r\n      dispatch(deleteExperience(itemId, id, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deletetooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {t(\"deleteRow\")}\r\n    </Tooltip>\r\n  );\r\n  const addtooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {t(\"addRow\")}\r\n    </Tooltip>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"popup-heading\">{t(\"experience\")} CV {t(\"section\")}</h3>\r\n      <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n        {fields?.map((item, index) => (\r\n          <div className=\"experience-container mb-3\" key={item.id}>\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"companyName\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"common-field\"\r\n                    name=\"company_name\"\r\n                    placeholder=\"Enter Company Name\"\r\n                    {...register(`test[${index}].company_name`, {\r\n                      required: \"Company name is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.company_name && (\r\n                    <p className=\"error-message\">{errors.test[index].company_name.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"jobPosition\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"common-field\"\r\n                    name=\"job_title\"\r\n                    placeholder=\"Enter Job Position\"\r\n                    {...register(`test[${index}].job_title`, {\r\n                      required: \"Job Position is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.job_title && (\r\n                    <p className=\"error-message\">{errors.test[index].job_title.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"jobDescription\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    className=\"common-field\"\r\n                    placeholder=\"Enter Job Description\"\r\n                    {...register(`test[${index}].description`, {\r\n                      required: \"Description is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.description && (\r\n                    <p className=\"error-message\">{errors.test[index].description.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"startDate\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    className=\"common-field\"\r\n                    placeholder=\"Enter Start Date\"\r\n                    max={new Date().toISOString().split(\"T\")[0]}\r\n                    {...register(`test[${index}].start_date`, {\r\n                      required: \"Start Date is required\",\r\n                      validate: {\r\n                        dateRange: (value) => {\r\n                          const endDate = watch(`test[${index}].end_date`);\r\n                          if (!endDate || value <= endDate) {\r\n                            return true;\r\n                          }\r\n                          return \"Start Date must be before End Date\";\r\n                        },\r\n                      },\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.start_date && (\r\n                    <p className=\"error-message\">{errors.test[index].start_date.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"endDate\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    className=\"common-field\"\r\n                    placeholder=\"Enter End Date\"\r\n                    max={new Date().toISOString().split(\"T\")[0]}\r\n                    {...register(`test[${index}].end_date`, {\r\n                      required: {\r\n                        value: disabledEndDates[index] ? false : true,\r\n                        message: \"End Date is required\",\r\n                      },\r\n                    })}\r\n                    disabled={disabledEndDates[index]}\r\n                  />\r\n                  {errors?.test?.[index]?.end_date && (\r\n                    <p className=\"error-message\">{errors.test[index].end_date.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <Form.Group className=\"d-flex gap-2 align-items-center\">\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      className=\"cv-field\"\r\n                      {...register(`test[${index}].is_still_working`, {\r\n                        required: false,\r\n                      })}\r\n                      onChange={(e) => handleCurrentlyWorkingChange(e, index)}\r\n                    />\r\n                    <Form.Label className=\"mb-0 font-14\">{t(\"currentlyWorking\")}</Form.Label>\r\n                  </Form.Group>\r\n                  {index !== 0 && (\r\n                    <div>\r\n                      <OverlayTrigger placement=\"bottom\" overlay={deletetooltip}>\r\n                        <Button variant=\"danger\" className=\"font-14\" onClick={() => deleteDeveloperExperience(item.experience_id, index)}>\r\n                          <FaTrashAlt />\r\n                        </Button>\r\n                      </OverlayTrigger>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        <div className=\"text-end mb-3\">\r\n          <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n            <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n              +\r\n            </Button>\r\n          </OverlayTrigger>\r\n        </div>\r\n       {role!==\"vendor\" && <div className=\"text-center\">\r\n          <RexettButton\r\n            type=\"submit\"\r\n            text=\"Submit\"\r\n            className=\"main-btn px-4 font-14 fw-semibold\"\r\n            variant=\"transparent\"\r\n            disabled={smallLoader}\r\n            isLoading={smallLoader}\r\n          />\r\n        </div>}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExperienceCVModal;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  InputGroup,\r\n  OverlayTrigger,\r\n  Row,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  filePreassignedUrlGenerate,\r\n  getAddNewDeveloper,\r\n  getCitiesList,\r\n  getCoutriesList,\r\n  getSkillList,\r\n  getStatesList,\r\n  getTimeZoneForCountry,\r\n} from \"../../redux/slices/clientDataSlice\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport {\r\n  addDegree,\r\n  getDegreeList,\r\n} from \"../../redux/slices/developerDataSlice\";\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport { EXPERIENCE_OPTIONS } from \"../../helper/utlis\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { GOOGLE_AUTOCOMPLETE_API_KEY } from \"../../components/clients/TimeReporiting/constant\";\r\nimport CommonReactSelect from \"../../components/atomic/CommonReactSelect\";\r\nimport ExperienceCV from \"../../components/common/Modals/ExperienceCVModal\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\nconst RegisterDeveloper = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [file, setFile] = useState(null);\r\n  const [CvFile, setCVFile] = useState(null);\r\n  const { smallLoader, skillList } = useSelector((state) => state.clientData);\r\n  const [disbaleYear, setDisbaleYear] = useState([]);\r\n  const [selectedCv, setSelectedCv] = useState(null);\r\n  const [selectedCvErr, setSelectedCvErr] = useState(null);\r\n  const [disabledEndDates, setDisabledEndDates] = useState([]);\r\n  const [skillCate, setSkillsCate] = useState([]);\r\n  const { degreeList } = useSelector((state) => state.developerData);\r\n  const skillLabels = skillCate?.map((skill) => skill.value);\r\n  const skillSet = skillLabels?.toString();\r\n  const { t } = useTranslation();\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [expertSkill, setExpertSkill] = useState([]);\r\n  const [fileTypeError, setFileTypeError] = useState(false);\r\n  const [socialMediaRows, setSocialMediaRows] = useState([\r\n    {\r\n      name: \"\",\r\n      url: \"\",\r\n    },\r\n  ]);\r\n  const { allTimeZones, countriesList, statesList, citiesList, timeZones } =\r\n  useSelector((state) => state.clientData);\r\n  const navigate = useNavigate();\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    clearErrors,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      educations: [\r\n        {\r\n          university_name: \"\",\r\n          degree_id: \"\",\r\n          address: \"\",\r\n          start_year: \"\",\r\n          end_year: \"\",\r\n          currently_attending: false,\r\n          description: \"\",\r\n        },\r\n      ],\r\n    },\r\n  });\r\n  console.log(selectedOption, \"select-----\");\r\n  console.log(expertSkill, \"experskilll\");\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    // name: \"educations\",\r\n    name: \"experiences\",\r\n    name: \"expertise\",\r\n    name: \"social_links\",\r\n    name: \"skills\",\r\n  });\r\n  const {\r\n    fields: educationField,\r\n    append: appendEducationField,\r\n    remove: removeEducationField,\r\n  } = useFieldArray({\r\n    control,\r\n    name: \"educations\",\r\n  });\r\n\r\n  const [experienceFields, setExperienceFields] = useState([\r\n    {\r\n      id: 0,\r\n      job_title: \"\",\r\n      company_name: \"\",\r\n      start_date: \"\",\r\n      end_date: \"\",\r\n      is_still_working: true,\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  const [expertiseFields, setExpertiseFields] = useState([\r\n    { id: 0, skill: \"\", experience: \"\" },\r\n  ]);\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n    dispatch(getCoutriesList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSkillList());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setSkillsCate(skillListMapped);\r\n  }, [skillList]);\r\n\r\n  const handleAppend = () => {\r\n    const expertise = watch(\"expertise\");\r\n    let index = expertise?.findIndex(\r\n      (item) => item.skill == undefined || item.experience == \"\"\r\n    );\r\n    if (index == -1) {\r\n      setExpertiseFields([\r\n        ...expertiseFields,\r\n        { id: expertiseFields?.id + 1, skill: \"\", experience: \"\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (id, index) => {\r\n    const expertise = watch(\"expertise\");\r\n    expertise.splice(index, 1);\r\n    let expertiseFieldsCopy = [...expertiseFields];\r\n    expertiseFieldsCopy.splice(index, 1);\r\n    // const updatedExpertFields = expertiseFieldsCopy.filter(\r\n    //   (field) => field.id !== id\r\n    // );\r\n    setExpertiseFields(expertiseFieldsCopy);\r\n  };\r\n\r\n  function generateYears() {\r\n    const currentYear = new Date().getFullYear();\r\n    const years = [];\r\n    for (let year = 1995; year <= currentYear; year++) {\r\n      years.push(year);\r\n    }\r\n    return years;\r\n  }\r\n\r\n  const yearsArray = generateYears();\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data, \"data---\");\r\n    // let fileData = new FormData();\r\n    // fileData.append(\"file\", file);\r\n    // let fileCVData = new FormData();\r\n    // fileCVData.append(\"file\", CvFile);\r\n    // let formattedExpertise = [];\r\n    // formattedExpertise = data?.expertise?.map((val) => {\r\n    //   return { skill: val?.skill?.label, experience: val?.experience };\r\n    // });\r\n    // let formattedSkills = [];\r\n    // let convertString = selectedOption?.map((item) => item.label);\r\n    // formattedSkills = convertString.map((item) => {\r\n    //   return { skill: item, experience: null };\r\n    // });\r\n\r\n    // const EducationFieldCpy = [...data.educations];\r\n    // let formattedEducationField = [];\r\n    // formattedEducationField = EducationFieldCpy.map((curElem) => {\r\n    //   return { ...curElem, degree_id: curElem.degree_id.value };\r\n    // });\r\n\r\n    // if (data) {\r\n    //   let resume;\r\n    //   console.log(data, \"formData\");\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileCVData, (url) => {\r\n    //       resume=url\r\n    //     }))\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileData, (url) => {\r\n    //       let formData = {\r\n    //         ...data,\r\n    //         skills: formattedSkills,\r\n    //         expertise: formattedExpertise,\r\n    //         profile_picture: url,\r\n    //         educations: formattedEducationField,\r\n    //       };\r\n    //       dispatch(\r\n    //         getAddNewDeveloper(formData, () => {\r\n    //           navigate(\"/vendor-dashboard\");\r\n    //         })\r\n    //       );\r\n    //     })\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  const addtooltip = <Tooltip id=\"tooltip\">{t(\"addRow\")}</Tooltip>;\r\n\r\n  const handleAddMoreExp = async () => {\r\n    const experiences = watch(\"experiences\");\r\n    console.log(experiences,\"experiences\")\r\n    const index = experiences?.findIndex(\r\n      ({\r\n        job_title,\r\n        company_name,\r\n        description,\r\n        start_date,\r\n        end_date,\r\n        is_still_working,\r\n      }) =>\r\n        !company_name ||\r\n        !job_title ||\r\n        !description ||\r\n        !start_date ||\r\n        (!is_still_working && !end_date)\r\n    );\r\n    if (index === -1) {\r\n      const newExperienceField = {\r\n        id: experienceFields.length + 1,\r\n        company_name: \"\",\r\n        job_title: \"\",\r\n        description: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        is_still_working: false,\r\n      };\r\n      setExperienceFields([...experienceFields, newExperienceField]);\r\n    }\r\n  };\r\n  const handleDeleteFieldExp = (index, id) => {\r\n    const experiencesCopy = watch(\"experiences\"); // Copy the experiences array\r\n    const expCop = [...experienceFields]; // Copy the experienceFields array\r\n    experiencesCopy.splice(index, 1);\r\n    const updatedExpertFields = expCop.filter(\r\n      (field) => field.id !== parseInt(id)\r\n    );\r\n\r\n    // Set the state with the updated arrays\r\n    setExperienceFields([...updatedExpertFields]);\r\n  };\r\n  const [educationFields, setEducationFields] = useState([\r\n    {\r\n      university_name: \"\",\r\n      degree_id: \"\",\r\n      address: \"\",\r\n      start_year: \"\",\r\n      end_year: \"\",\r\n      currently_attending: true,\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"country\")?.value) {\r\n      dispatch(getStatesList(watch(\"country\")?.value));\r\n      dispatch(getTimeZoneForCountry(watch(\"country\")?.value));\r\n    }\r\n  }, [watch(\"country\")]);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"state\")?.value) {\r\n      dispatch(getCitiesList(watch(\"country\")?.value, watch(\"state\")?.value));\r\n      setValue(\"city\", null);\r\n    }\r\n  }, [watch(\"state\")]);\r\n\r\n  const handleAddMore = () => {\r\n    const educations = watch(\"educations\");\r\n    const index = educations.findIndex(\r\n      ({ university_name, degree_id, address, start_year, end_year }) =>\r\n        !university_name ||\r\n        !degree_id ||\r\n        !address ||\r\n        end_year === \"Please Select Year\" ||\r\n        start_year === \"Please Select Year\"\r\n    );\r\n    if (index === -1) {\r\n      const newEducationField = {\r\n        id: educationFields.length + 1,\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      };\r\n      // setEducationFields([...educationFields, newEducationField]);\r\n      appendEducationField({\r\n        // id: educationFields.length + 1,\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      });\r\n      setEducationFields([...watch(\"educations\"), newEducationField]);\r\n    }\r\n  };\r\n  const handleDeleteField = (index, id) => {\r\n    const educations = watch(\"educations\");\r\n    educations.splice(index, 1);\r\n    console.log(educationFields, \"educationfield\");\r\n\r\n    // const educationFieldsCpy=[...educationFields];\r\n    const temp = [...educationFields];\r\n    temp.splice(index, 1);\r\n    // const updatedEducationFields = educationFields.filter(\r\n    //   (field) => field.id !== id\r\n    // );\r\n    setEducationFields(temp);\r\n  };\r\n\r\n  const handleAddMoreSocial = () => {\r\n    const newRow = { id: socialMediaRows.length + 1, name: \"\", url: \"\" };\r\n    setSocialMediaRows([...socialMediaRows, newRow]);\r\n  };\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const isChecked = watch(`experiences[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n      setValue(`experiences[${index}].end_date`, null);\r\n    } else {\r\n      const isChecked = watch(`experiences[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n    }\r\n  };\r\n\r\n  const handleCurrentlyAttendingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const isChecked = watch(`educations[${index}].is_still_attending`);\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, null);\r\n    } else {\r\n      const isChecked = watch(`educations[${index}].is_still_attending`);\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, end_year);\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/svg\"];\r\n    const file = event.target.files[0];\r\n    if (file && allowedTypes.includes(file.type)) {\r\n      // clearErrors(\"profile_picture\");\r\n      setFileTypeError(false);\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n      setFile(file);\r\n    } else {\r\n      // setError(\"profile_picture\", {\r\n      //   type: \"manual\",\r\n      //   message: t(\"invalid_file_type\"),\r\n      // });\r\n      setFileTypeError(true);\r\n      setSelectedImage(null);\r\n      // setValue(\"profile_picture\",\"\")\r\n    }\r\n  };\r\n\r\n  const handleUploadCv = (event) => {\r\n    const allowedTypes = [\"application/pdf\"];\r\n    const file = event.target.files[0];\r\n    if (file && allowedTypes.includes(file.type)) {\r\n      setFileTypeError(false);\r\n      setCVFile(file);\r\n      setSelectedCv(file.name);\r\n      setSelectedCvErr(null);\r\n    } else {\r\n      setSelectedCvErr(true);\r\n    }\r\n  };\r\n  const onChangeSelect = (val, arg) => {\r\n    const newOption = createOption(val);\r\n    if (arg == \"skills\") {\r\n      setSelectedOption((prev) => [...prev, newOption]);\r\n      setSkillsCate((prev) => [...prev, newOption]);\r\n    } else {\r\n      setExpertSkill((prev) => [...prev, newOption]);\r\n    }\r\n  };\r\n  const handleCreate = (inputValue, index) => {\r\n    const payload = {\r\n      title: inputValue,\r\n    };\r\n\r\n    dispatch(\r\n      addDegree(payload, () => {\r\n        dispatch(getDegreeList());\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <section className=\"register-developer card-box\">\r\n        <div className=\"\">\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">\r\n                {t(\"enterPersonalDetails\")}\r\n              </h2>\r\n            </div>\r\n            <div className=\"inner-form mb-3\">\r\n              <Row>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"developerName\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      {...register(\"name\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"nameValidation\"),\r\n                        },\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">{errors.name?.message}</p>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"email\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"email\"\r\n                      className=\"common-field\"\r\n                      {...register(\"email\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"emailValidation\"),\r\n                        },\r\n                        pattern: {\r\n                          value: /^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/,\r\n                          message: t(\"invalidEmail\"),\r\n                        },\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">{errors.email?.message}</p>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"phoneNumber\")} *\r\n                    </Form.Label>\r\n                    {/* <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"phone_number\"\r\n                      {...register(\"phone_number\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"phoneNumberValidation\"),\r\n                        },\r\n                        pattern: {\r\n                          value: /^[0-9]{10}$/,\r\n                          message: \"Please enter a valid phone number\",\r\n                        },\r\n                      })}\r\n                    /> */}\r\n                    <Controller\r\n                      name=\"phone_number\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"phoneNumberValidation\"),\r\n                        },\r\n                        pattern: {\r\n                          value: /^[0-9]{10}$/,\r\n                          message: \"Please enter a valid phone number\",\r\n                        },\r\n                      }}\r\n                      render={({ field }) => (\r\n                        <input\r\n                          {...field}\r\n                          type=\"text\"\r\n                          className=\"common-field form-control\"\r\n                          onChange={(e) => {\r\n                            const numericValue = e.target.value.replace(\r\n                              /[^0-9]/g,\r\n                              \"\"\r\n                            );\r\n                            field.onChange(numericValue);\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    {errors?.phone_number && (\r\n                      <p className=\"error-message\">\r\n                        {errors?.phone_number?.message}\r\n                      </p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"address\")} *\r\n                    </Form.Label>\r\n                    {/* <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      // name=\"address\"\r\n                      {...register(\"address\", {\r\n                        required: t(\"addressValidation\"),\r\n                      })}\r\n                    /> */}\r\n                    <Controller\r\n                      name=\"address\"\r\n                      rules={{\r\n                        required: \"Address is required\",\r\n                      }}\r\n                      className=\"common-field \"\r\n                      control={control}\r\n                      render={({ field, fieldState }) => (\r\n                        <Autocomplete\r\n                          style={{ width: \"500px\" }}\r\n                          errors={fieldState?.errors}\r\n                          className=\"common-field font-14 w-100 p-2\"\r\n                          apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                          onPlaceSelected={(place) => {\r\n                            console.log(place);\r\n                          }}\r\n                          options={{\r\n                            types: [\"establishment\", \"geocode\"],\r\n                          }}\r\n                          onChange={(event) => {\r\n                            field.onChange(event.target.value);\r\n                          }}\r\n                          onLoadFailed={(error) => {\r\n                            console.error(\r\n                              \"Google Places Autocomplete failed to load\",\r\n                              error\r\n                            );\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    {errors?.address && (\r\n                      <p className=\"error-message\">{errors.address.message} </p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <CommonReactSelect\r\n                    name=\"country\"\r\n                    errors={errors}\r\n                    // watch={watch}\r\n                    control={control}\r\n                    required=\"Country is required\"\r\n                    label=\"Country\"\r\n                    type=\"country\"\r\n                    options={countriesList}\r\n                  />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                 \r\n                  <CommonReactSelect\r\n                    name=\"state\"\r\n                    errors={errors}\r\n                    control={control}\r\n                    required=\"State is required\"\r\n                    label=\"State\"\r\n                    type=\"state\"\r\n                    options={statesList}\r\n                  />\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                  <CommonReactSelect\r\n                    name=\"city\"\r\n                    errors={errors}\r\n                    control={control}\r\n                    // required=\"City is required\"\r\n                    label=\"City\"\r\n                    type=\"city\"\r\n                    options={citiesList}\r\n                  />\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                \r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                  <CommonReactSelect\r\n                    name=\"time_zone\"\r\n                    errors={errors}\r\n                    type=\"timezones\"\r\n                    control={control}\r\n                    options={timeZones}\r\n                    required=\"Time zone is required\"\r\n                    label=\"Time Zone\"\r\n                  />\r\n                    \r\n                  </Form.Group>\r\n                </Col>\r\n\r\n\r\n             \r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"postCode\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"post_code\"\r\n                      {...register(\"post_code\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"postCodeValidation\"),\r\n                        },\r\n                        // pattern: {\r\n                        //     value: /^[0-9]+$/,\r\n                        //     message: \"Postal code should only contain numbers\",\r\n                        // }\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">\r\n                      {errors.post_code?.message}{\" \"}\r\n                    </p>\r\n                  </Form.Group>\r\n                </Col>\r\n               \r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"professional_title\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"professional_title\"\r\n                      {...register(\"professional_title\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"professionalTitleValidation\"),\r\n                        },\r\n                        // pattern: {\r\n                        //     value: /^[A-Za-z\\s]+$/,\r\n                        //     message: \"Country should not contain numbers or special character\",\r\n                        // }\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">\r\n                      {errors.professional_title?.message}{\" \"}\r\n                    </p>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group>\r\n                    <Form.Label>{t(\"experienceRequired\")}*</Form.Label>\r\n                    <Form.Select\r\n                      className=\"common-field\"\r\n                      {...register(\"total_experience\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: \"Experienced is required\",\r\n                        },\r\n                      })}\r\n                    >\r\n                      <option disabled selected value=\"\">\r\n                        {t(\"select\")} {t(\"experienceRequired\")}\r\n                      </option>\r\n                      <option value=\"Less_than_one\">\r\n                        {t(\"lessThan1Year\")}\r\n                      </option>\r\n                      <option value=\"1 year\">1 {t(\"year\")}</option>\r\n                      <option value=\"2 years\">2 {t(\"year\")}</option>\r\n                      <option value=\"3 years\">3 {t(\"year\")}</option>\r\n                      <option value=\"4 years\">4 {t(\"year\")}</option>\r\n                      <option value=\"5 years\">5 {t(\"year\")}</option>\r\n                      <option value=\"6+ years \">6 +{t(\"year\")}</option>\r\n                    </Form.Select>\r\n                  </Form.Group>\r\n                  <p className=\"error-message\">{errors.experience?.message}</p>\r\n                </Col>\r\n                {/* <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"experience\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"experience\"\r\n                      {...register(\"professional_title\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"experienceValidation\"),\r\n                        },\r\n                        // pattern: {\r\n                        //     value: /^[A-Za-z\\s]+$/,\r\n                        //     message: \"Country should not contain numbers or special character\",\r\n                        // }\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">\r\n                      {errors.professional_title?.message}{\" \"}\r\n                    </p>\r\n                  </Form.Group>\r\n                </Col> */}\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"image\")}*\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      id=\"developer-image\"\r\n                      name=\"profile_picture\"\r\n                      {...register(\"profile_picture\", {\r\n                        onChange: (e) => handleFileChange(e),\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"profilePictureValidation\"),\r\n                        },\r\n                      })}\r\n                      className=\"d-none\"\r\n                    />\r\n\r\n                    <Form.Label\r\n                      htmlFor=\"developer-image\"\r\n                      className=\"upload-image-label d-block\"\r\n                    >\r\n                      <HiUpload />\r\n                      {t(\"uploadImage\")}\r\n                    </Form.Label>\r\n                  </Form.Group>\r\n                  {fileTypeError ? (\r\n                    <p className=\"error-message\">{t(\"invalid_file_type\")}</p>\r\n                  ) : (\r\n                    errors?.profile_picture && (\r\n                      <p className=\"error-message\">\r\n                        {\" \"}\r\n                        {errors?.profile_picture?.message}\r\n                      </p>\r\n                    )\r\n                  )}\r\n                  {selectedImage && (\r\n                    <div>\r\n                      <img\r\n                        src={selectedImage && selectedImage}\r\n                        alt=\"Selected\"\r\n                        className=\"uploaded-image\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"uploadCV\")}*\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      id=\"upload_cv\"\r\n                      name=\"upload_cv\"\r\n                      {...register(\"upload_cv\", {\r\n                        onChange: (e) => handleUploadCv(e),\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"profilePictureValidation\"),\r\n                        },\r\n                      })}\r\n                      className=\"d-none\"\r\n                    />\r\n\r\n                    <Form.Label\r\n                      htmlFor=\"upload_cv\"\r\n                      className=\"upload-image-label d-block\"\r\n                    >\r\n                      <HiUpload />\r\n                      {t(\"upload_cv\")}\r\n                    </Form.Label>\r\n                  </Form.Group>\r\n                  {selectedCvErr && (\r\n                    <p style={{ color: \"red\" }}>\r\n                      Please upload a valid PDF file.\r\n                    </p>\r\n                  )}\r\n                  {selectedCv && <div>{selectedCv}</div>}\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            \r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterExperience\")}</h2>\r\n            </div>\r\n\r\n            <ExperienceCV data={null} role=\"vendor\" onSubmitVendor={onSubmit} />\r\n        \r\n            \r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterExpertise\")}</h2>\r\n            </div>\r\n            {expertiseFields.map((field, index) => {\r\n              return (\r\n                <Fragment key={field?.id}>\r\n                  <div>\r\n                    <Row className=\"mb-3\">\r\n                      <Col md={6}>\r\n                        <Form.Group>\r\n                          <Form.Label className=\"common-label\">\r\n                            {t(\"enterSkill\")}\r\n                          </Form.Label>\r\n                          <CreatableSelect\r\n                            className=\"common-field\"\r\n                            {...register(`expertise.${index}.skill`, {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"required_message\"),\r\n                              },\r\n                            })}\r\n                            isClearable\r\n                            options={skillCate}\r\n                            onChange={(newValue) => {\r\n                              // setExpertSkill([newValue]);x\r\n                              setValue(`expertise.${index}.skill`, newValue);\r\n                              clearErrors(`expertise.${index}.skill`);\r\n                            }}\r\n                            onCreateOption={(val) => {\r\n                              onChangeSelect(val, \"expertise\");\r\n                            }}\r\n                            // value={expertSkill}\r\n                            // name={expertSkill}\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={6}>\r\n                        <div className=\"flex-none\">\r\n                          <Form.Label className=\"common-label\">\r\n                            {t(\"experience\")}\r\n                          </Form.Label>\r\n                          <Form.Select\r\n                            {...register(`expertise.${index}.experience`, {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"required_message\"),\r\n                              },\r\n                            })}\r\n                            className=\"common-field shadow-none\"\r\n                          >\r\n                            <option value=\"\"> {t(\"selectExperience\")} </option>\r\n                            {EXPERIENCE_OPTIONS.map(\r\n                              ({ label, value }, index) => (\r\n                                <option value={value} key={index}>\r\n                                  {label} {t(\"years\")}\r\n                                </option>\r\n                              )\r\n                            )}\r\n                          </Form.Select>\r\n                          {errors?.skills?.[index]?.experience && (\r\n                            <p className=\"error-message\">\r\n                              {errors?.skills[index]?.experience?.message}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    {errors?.skills?.[index]?.skill && (\r\n                      <p className=\"error-message\">\r\n                        {errors?.skills[index]?.skill?.message}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                  {expertiseFields?.length > 1 && (\r\n                    <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                      <Button\r\n                        className=\"arrow-btn danger-arrow ms-auto\"\r\n                        onClick={() => handleDelete(field?.id, index)}\r\n                      >\r\n                        <FaTrash />\r\n                      </Button>\r\n                    </Col>\r\n                  )}\r\n                </Fragment>\r\n              );\r\n            })}\r\n            <div className=\"text-end mb-3\">\r\n              <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                <Button\r\n                  className=\"arrow-btn primary-arrow ms-auto\"\r\n                  onClick={handleAppend}\r\n                >\r\n                  +\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">\r\n                {t(\"enterEducationDetails\")}\r\n              </h2>\r\n            </div>\r\n            <div className=\"inner-form mb-3\">\r\n              {educationField.map(\r\n                (\r\n                  item,\r\n                  // {\r\n                  //   id,\r\n                  //   university_name,\r\n                  //   degree_id,\r\n                  //   address,\r\n                  //   start_year,\r\n                  //   end_year,\r\n                  //   currently_attending,\r\n                  // },\r\n                  index\r\n                ) => (\r\n                  <Row key={item.id}>\r\n                    <Col md={6}>\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label>{t(\"universityName\")} *</Form.Label>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          className=\"common-field shadow-none\"\r\n                          {...register(`educations[${index}].university_name`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: t(\"universityNameValidation\"),\r\n                            },\r\n                          })}\r\n                        />\r\n                        {errors?.educations?.[index]?.university_name && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].university_name.message}\r\n                          </p>\r\n                        )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <Form.Group>\r\n                        <Form.Label>{t(\"degreeName\")} *</Form.Label>\r\n                        {/* <Select\r\n                          options={degreeList}\r\n                          onChange={(val) =>\r\n                            setValue(\r\n                              `educations[${index}].degree_id`,\r\n                              val ? val.value : \"\"\r\n                            )\r\n                          }\r\n                          defaultValue={degreeList.find(\r\n                            (option) => option.value === degree_id\r\n                          )}\r\n                        /> */}\r\n                        {/* <Controller\r\n                          name={`educations.${index}.degree_id`}\r\n                          control={control}\r\n                          rules={{required:{\r\n                            value:true,\r\n                            message:t(\"required_message\")\r\n                          }}}\r\n                          render={({ field }) => (\r\n                            <CreatableSelect\r\n                              {...field}\r\n                              value={watch(`educations?.${index}.degree_id`)}\r\n                              isClearable\r\n                              onChange={(val) => {\r\n                                setValue(`educations.${index}.degree_id`, val);\r\n                              }}\r\n                              // defaultValue={degreeList.find(\r\n                              //   (option) => option.value === watch(`educations.${index}.degree_id`)\r\n                              // )}\r\n                              onCreateOption={handleCreate}\r\n                              options={degreeList}\r\n                            />\r\n                          )}\r\n                        /> */}\r\n                        <CreatableSelect\r\n                          className=\"common-field\"\r\n                          {...register(`educations.${index}.degree_id`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: t(\"degree_name_required_msg\"),\r\n                            },\r\n                          })}\r\n                          // value={watch(`educations.${index}.degree_id`)}\r\n                          isClearable\r\n                          onChange={(val) => {\r\n                            setValue(`educations.${index}.degree_id`, val);\r\n                          }}\r\n                          // value={degreeList.find((curElem)=>curElem.label === item.label)}\r\n                          onCreateOption={handleCreate}\r\n                          options={degreeList}\r\n                        />\r\n                        {errors?.educations?.[index]?.degree_id && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].degree_id.message}\r\n                          </p>\r\n                        )}\r\n                        {/* <CreatableSelect\r\n                            {...register(`expertise.${index}.skill`, {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"required_message\"),\r\n                              },\r\n                            })}\r\n                            isClearable\r\n                            options={skillCate}\r\n                            onChange={(newValue) => {\r\n                              // setExpertSkill([newValue]);x\r\n                              setValue(`expertise.${index}.skill`, newValue);\r\n                              clearErrors(`expertise.${index}.skill`);\r\n                            }}\r\n                            onCreateOption={(val) => {\r\n                              onChangeSelect(val, \"expertise\");\r\n                            }}\r\n                            // value={expertSkill}\r\n                            // name={expertSkill}\r\n                          /> */}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label>{t(\"address\")} *</Form.Label>\r\n                        {/* <Form.Control\r\n                          className=\"common-field\"\r\n                          type=\"text\"\r\n                          {...register(`educations[${index}].address`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: t(\"addressValidation\"),\r\n                            },\r\n                          })}\r\n                        /> */}\r\n                        <Controller\r\n                          name=\"address\"\r\n                          rules={{\r\n                            required: \"Address is required\",\r\n                          }}\r\n                          className=\"common-field \"\r\n                          control={control}\r\n                          render={({ field, fieldState }) => (\r\n                            <Autocomplete\r\n                              style={{ width: \"500px\" }}\r\n                              errors={fieldState?.errors}\r\n                              className=\"common-field font-14 w-100 p-2\"\r\n                              apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                              onPlaceSelected={(place) => {\r\n                                console.log(place);\r\n                              }}\r\n                              options={{\r\n                                types: [\"establishment\", \"geocode\"],\r\n                              }}\r\n                            />\r\n                          )}\r\n                        />\r\n                        {errors?.educations?.[index]?.address && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].address.message}\r\n                          </p>\r\n                        )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group>\r\n                        <Form.Label>{t(\"startYear\")} *</Form.Label>\r\n                        <Form.Select\r\n                          className=\"common-field\"\r\n                          {...register(`educations.${index}.start_year`, {\r\n                            required: t(\"startYearValidation\"),\r\n                            validate: {\r\n                              lessThanEndYear: (value) => {\r\n                                const endYear = watch(\r\n                                  `educations.${index}.end_year`\r\n                                );\r\n                                // if (!endYear || parseInt(value) < parseInt(endYear)) {\r\n                                //     return true;\r\n                                // }\r\n                                // return 'Start Year must be less than End Year';\r\n                              },\r\n                            },\r\n                          })}\r\n                        >\r\n                          <option disabled selected>\r\n                            {t(\"pleaseSelectYear\")}\r\n                          </option>\r\n                          {yearsArray?.map((item) => (\r\n                            <option key={item} value={item}>\r\n                              {item}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                        {errors &&\r\n                          errors.educations &&\r\n                          errors.educations[index] &&\r\n                          errors.educations[index].start_year && (\r\n                            <p className=\"error-message\">\r\n                              {errors.educations[index].start_year.message}\r\n                            </p>\r\n                          )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label>{t(\"endYear\")} *</Form.Label>\r\n                        <Form.Select\r\n                          className=\"common-field\"\r\n                          {...register(`educations.${index}.end_year`, {\r\n                            required: {\r\n                              value: disbaleYear[index] ? false : true,\r\n                              message: t(\"endYearValidation\"),\r\n                            },\r\n                          })}\r\n                          disabled={disbaleYear[index]}\r\n                        >\r\n                          <option disabled selected>\r\n                            {t(\"pleaseSelectYear\")}\r\n                          </option>\r\n                          {yearsArray?.map((item) => (\r\n                            <option key={item} value={item}>\r\n                              {item}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                        {errors &&\r\n                          errors.educations &&\r\n                          errors.educations[index] &&\r\n                          errors.educations[index].end_year && (\r\n                            <p className=\"error-message\">\r\n                              {errors.educations[index].end_year.message}\r\n                            </p>\r\n                          )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Form.Group className=\"mb-4 d-flex gap-2 align-items-center\">\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        className=\"job-post-checkbox\"\r\n                        id=\"edu-checkbox\"\r\n                        {...register(\r\n                          `educations[${index}].currently_attending`,\r\n                          {\r\n                            required: false,\r\n                          }\r\n                        )}\r\n                        onChange={(e) =>\r\n                          handleCurrentlyAttendingChange(e, index)\r\n                        }\r\n                      />\r\n                      <Form.Label className=\"mb-0\" htmlFor=\"edu-checkbox\">\r\n                        {t(\"currentlyAttending\")}\r\n                      </Form.Label>\r\n                    </Form.Group>\r\n                    {watch(\"educations\")?.length > 1 && (\r\n                      <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                        <Button\r\n                          className=\"arrow-btn danger-arrow\"\r\n                          // onClick={() => handleDeleteField(index,id)}\r\n                          onClick={() => {\r\n                            removeEducationField(index);\r\n                          }}\r\n                        >\r\n                          <FaTrash />\r\n                        </Button>\r\n                      </Col>\r\n                    )}\r\n                  </Row>\r\n                )\r\n              )}\r\n              <div className=\"text-end my-3\">\r\n                <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                  <Button\r\n                    className=\"arrow-btn primary-arrow ms-auto\"\r\n                    onClick={handleAddMore}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </OverlayTrigger>\r\n              </div>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterAbout\")} *</h2>\r\n            </div>\r\n            <div className=\"inner-form mb-3\">\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Control\r\n                      as=\"textarea\"\r\n                      rows={3}\r\n                      placeholder=\"Add your about\"\r\n                      className=\"common-field\"\r\n                      name=\"bio\"\r\n                      {...register(\"bio\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: `${t(\"AboutRequired\")}`,\r\n                        },\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">{errors.bio?.message} </p>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterSkills\")}</h2>\r\n            </div>\r\n            <div className=\"experience-container\">\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <CreatableSelect\r\n                      className=\"common-field\"\r\n                      isMulti\r\n                      isClearable\r\n                      name={selectedOption}\r\n                      onChange={(newValue) => {\r\n                        setSelectedOption(newValue);\r\n                      }}\r\n                      onCreateOption={(val) => {\r\n                        onChangeSelect(val, \"skills\");\r\n                      }}\r\n                      options={skillCate}\r\n                      value={selectedOption}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"addSocialLinks\")}</h2>\r\n            </div>\r\n            <div className=\"inner-form\">\r\n              {socialMediaRows.map((row, index) => (\r\n                <div className=\"experience-container\">\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Text id=\"basic-addon1 px-0\">\r\n                          <Form.Select\r\n                            className=\"py-0 border-0 shadow-none bg-transparent\"\r\n                            {...register(`social_links[${index}].name`)} // Register the name field\r\n                          >\r\n                            {/* <option value=\"facebook_url\">Facebook</option> */}\r\n                            <option value=\"linkedin_url\">\r\n                              {t(\"linkedIn\")}\r\n                            </option>\r\n                            {/* <option value=\"twitter_url\">Twitter</option> */}\r\n                            <option value=\"github_url\">{t(\"github\")}</option>\r\n                          </Form.Select>\r\n                        </InputGroup.Text>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          className=\"common-field\"\r\n                          placeholder={t(\"enterUrl\")}\r\n                          {...register(`social_links[${index}].url`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: \"Url is required\",\r\n                            },\r\n                          })}\r\n                        />\r\n\r\n                        {errors?.social_links?.url && (\r\n                          <p className=\"error-message\">\r\n                            {errors.social_links?.url.message}\r\n                          </p>\r\n                        )}\r\n                      </InputGroup>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              ))}\r\n              <div className=\"text-end mb-3\">\r\n                <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                  <Button\r\n                    className=\"arrow-btn primary-arrow ms-auto\"\r\n                    onClick={handleAddMoreSocial}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </OverlayTrigger>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <RexettButton\r\n                type=\"submit\"\r\n                text={t(\"register\")}\r\n                className=\"main-btn px-5\"\r\n                variant=\"transparent\"\r\n                disabled={smallLoader}\r\n                isLoading={smallLoader}\r\n              />\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterDeveloper;\r\n","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["_ref","show","handleClose","data","id","role","onSubmitVendor","renderModalData","setRenderModalData","useState","disabledEndDates","setDisabledEndDates","dispatch","useDispatch","register","control","setValue","watch","handleSubmit","reset","trigger","setError","formState","errors","useForm","defaultValues","test","company_name","job_title","t","useTranslation","fields","append","remove","replace","useFieldArray","name","smallLoader","useSelector","state","developerData","useEffect","forEach","item","index","_item$start_date","_item$end_date","description","start_date","slice","end_date","is_still_working","experience_id","prevState","deletetooltip","_jsx","Tooltip","children","addtooltip","_jsxs","_Fragment","className","onSubmit","value","developer_id","experiences","console","log","updateDeveloperCvExperience","fetchDeveloperCv","getDeveloperDetails","noValidate","map","_errors$test","_errors$test$index","_errors$test2","_errors$test2$index","_errors$test3","_errors$test3$index","_errors$test4","_errors$test4$index","_errors$test5","_errors$test5$index","Row","Col","md","Form","Group","Label","Control","type","placeholder","concat","required","message","as","rows","max","Date","toISOString","split","validate","dateRange","endDate","disabled","Check","onChange","e","handleCurrentlyWorkingChange","target","checked","updatedDisabledEndDates","OverlayTrigger","placement","overlay","Button","variant","onClick","deleteDeveloperExperience","itemId","deleteExperience","FaTrashAlt","async","RexettButton","text","isLoading","RegisterDeveloper","_errors$name","_errors$email","_errors$phone_number","_errors$post_code","_errors$professional_","_errors$experience","_errors$profile_pictu","_errors$bio","selectedImage","setSelectedImage","file","setFile","CvFile","setCVFile","skillList","clientData","disbaleYear","setDisbaleYear","selectedCv","setSelectedCv","selectedCvErr","setSelectedCvErr","skillCate","setSkillsCate","degreeList","skillLabels","skill","toString","selectedOption","setSelectedOption","expertSkill","setExpertSkill","fileTypeError","setFileTypeError","socialMediaRows","setSocialMediaRows","url","allTimeZones","countriesList","statesList","citiesList","timeZones","clearErrors","useNavigate","educations","university_name","degree_id","address","start_year","end_year","currently_attending","educationField","appendEducationField","removeEducationField","experienceFields","setExperienceFields","expertiseFields","setExpertiseFields","experience","skillListMapped","label","title","getDegreeList","getCoutriesList","getSkillList","yearsArray","currentYear","getFullYear","years","year","push","generateYears","educationFields","setEducationFields","_watch","_watch2","_watch3","getStatesList","getTimeZoneForCountry","_watch4","_watch5","_watch6","getCitiesList","onChangeSelect","val","arg","newOption","toLowerCase","prev","handleCreate","inputValue","payload","addDegree","pattern","email","Controller","rules","render","_ref3","field","numericValue","phone_number","_ref4","fieldState","Autocomplete","style","width","apiKey","GOOGLE_AUTOCOMPLETE_API_KEY","onPlaceSelected","place","options","types","event","onLoadFailed","error","CommonReactSelect","post_code","professional_title","Select","selected","files","includes","reader","FileReader","onloadend","result","readAsDataURL","handleFileChange","htmlFor","HiUpload","profile_picture","src","alt","handleUploadCv","color","ExperienceCV","_errors$skills","_errors$skills$index","_errors$skills$index2","_errors$skills$index3","_errors$skills2","_errors$skills2$index","_errors$skills$index4","_errors$skills$index5","Fragment","CreatableSelect","isClearable","newValue","onCreateOption","EXPERIENCE_OPTIONS","_ref5","skills","length","handleDelete","splice","expertiseFieldsCopy","FaTrash","handleAppend","expertise","findIndex","undefined","_errors$educations","_errors$educations$in","_errors$educations2","_errors$educations2$i","_errors$educations3","_errors$educations3$i","_watch7","_ref6","lessThanEndYear","handleCurrentlyAttendingChange","handleAddMore","_ref2","newEducationField","bio","isMulti","row","_errors$social_links","_errors$social_links2","InputGroup","Text","social_links","handleAddMoreSocial","newRow","InputGroupText","React","ref","bsPrefix","Component","props","useBootstrapPrefix","classNames","displayName","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}