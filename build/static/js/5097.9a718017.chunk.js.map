{"version":3,"file":"static/js/5097.9a718017.chunk.js","mappings":"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","sources":["components/atomic/CommonReactSelect.jsx","components/utils.js","components/common/Modals/ExperienceCVModal.jsx","pages/vendor/RegisterDeveloper.jsx","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport Select from \"react-select\";\r\nimport { convertCountriesForSelect } from \"../utils\";\r\n\r\nconst CommonReactSelect = ({ control, name, errors, options, required ,label,type}) => {\r\n  // in required prop a  message should be given eg. Country name is required \r\n  const [formattedOptions,setFormattedOptions] = useState([]);\r\n  useEffect(() => {\r\n    const formattedOptions = convertCountriesForSelect(options,type);\r\n    setFormattedOptions(formattedOptions);\r\n  },[options]);\r\n  \r\n  return (\r\n     <Form.Group className=\"mb-3\">\r\n      <Form.Label className=\"common-label\">{label}{required && \"*\"}</Form.Label>\r\n      <Controller\r\n        name={name}\r\n        control={control}\r\n        rules={{\r\n          required: {\r\n            value: required ? true : false,\r\n            message: required,\r\n          },\r\n        }}\r\n        render={({ field }) => <Select className=\"common-field\" {...field} options={formattedOptions}/>}\r\n      />\r\n      {errors[name] && <p className=\"error-message\">{errors[name]?.message}</p>}\r\n      </Form.Group>\r\n  );\r\n};\r\n\r\nexport default CommonReactSelect;\r\n","export const convertCountriesForSelect = (options,type) => {\r\n    console.log(options,\"options inside countries select\");\r\n    let formattedCountryOptions=[]\r\n    if(type === \"timezones\") {\r\n         formattedCountryOptions = options?.map((timezone) => {\r\n            return {label:timezone , value:timezone}\r\n        });\r\n    } else {\r\n         formattedCountryOptions = options?.map(({name,code,isoCode}) => {\r\n            return {label:name , value:type === \"country\" ? code : isoCode}\r\n        });\r\n    }\r\n    return formattedCountryOptions\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Form, Row, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { useForm, useFieldArray } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { addDeveloperCvExperience, deleteExperience, fetchDeveloperCv, updateDeveloperCvExperience } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst ExperienceCVModal = ({ show, handleClose, data, id, role, onSubmitVendor }) => {\r\n  const [renderModalData, setRenderModalData] = useState(data);\r\n  const [disabledEndDates, setDisabledEndDates] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    setError, \r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      test: data ? data : [{ company_name: \"\", job_title: \"\" }]\r\n    }\r\n  });\r\n  const { t } = useTranslation();\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"test\",\r\n  });\r\n  const { smallLoader } = useSelector(state => state.developerData);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data?.forEach((item, index) => {\r\n        append({\r\n          company_name: item.company_name,\r\n          job_title: item.job_title,\r\n          description: item.description,\r\n          start_date: item.start_date?.slice(0, 10),\r\n          end_date: item.end_date?.slice(0, 10),\r\n          is_still_working: item.is_still_working,\r\n          experience_id: item.id\r\n        });\r\n        setDisabledEndDates(prevState => [...prevState, item.is_still_working]);\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n      setValue(`test[${index}].end_date`, \"\");\r\n    } else {\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (value) => {\r\n    let { test } = value;\r\n    let data = {\r\n      developer_id: id,\r\n      experiences: test\r\n    };\r\n    if (role === \"vendor\") {\r\n      if (onSubmitVendor) {\r\n        console.log(data,\"newDat\")\r\n        onSubmitVendor(data);\r\n      }\r\n      handleClose();\r\n    } else {\r\n      dispatch(updateDeveloperCvExperience(data, role, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleAppend = async () => {\r\n    const isValid = await trigger();\r\n    if (isValid) {\r\n      append({\r\n        company_name: \"\",\r\n        job_title: \"\",\r\n        description: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        is_still_working: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteDeveloperExperience = (itemId, index) => {\r\n    remove(index);\r\n    if (itemId) {\r\n      dispatch(deleteExperience(itemId, id, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deletetooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {t(\"deleteRow\")}\r\n    </Tooltip>\r\n  );\r\n  const addtooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {t(\"addRow\")}\r\n    </Tooltip>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"popup-heading\">{t(\"experience\")} CV {t(\"section\")}</h3>\r\n      <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n        {fields?.map((item, index) => (\r\n          <div className=\"experience-container mb-3\" key={item.id}>\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"companyName\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"common-field\"\r\n                    name=\"company_name\"\r\n                    placeholder=\"Enter Company Name\"\r\n                    {...register(`test[${index}].company_name`, {\r\n                      required: \"Company name is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.company_name && (\r\n                    <p className=\"error-message\">{errors.test[index].company_name.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"jobPosition\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"common-field\"\r\n                    name=\"job_title\"\r\n                    placeholder=\"Enter Job Position\"\r\n                    {...register(`test[${index}].job_title`, {\r\n                      required: \"Job Position is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.job_title && (\r\n                    <p className=\"error-message\">{errors.test[index].job_title.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"jobDescription\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    className=\"common-field\"\r\n                    placeholder=\"Enter Job Description\"\r\n                    {...register(`test[${index}].description`, {\r\n                      required: \"Description is required\",\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.description && (\r\n                    <p className=\"error-message\">{errors.test[index].description.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"startDate\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    className=\"common-field\"\r\n                    placeholder=\"Enter Start Date\"\r\n                    max={new Date().toISOString().split(\"T\")[0]}\r\n                    {...register(`test[${index}].start_date`, {\r\n                      required: \"Start Date is required\",\r\n                      validate: {\r\n                        dateRange: (value) => {\r\n                          const endDate = watch(`test[${index}].end_date`);\r\n                          if (!endDate || value <= endDate) {\r\n                            return true;\r\n                          }\r\n                          return \"Start Date must be before End Date\";\r\n                        },\r\n                      },\r\n                    })}\r\n                  />\r\n                  {errors?.test?.[index]?.start_date && (\r\n                    <p className=\"error-message\">{errors.test[index].start_date.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"font-14\">{t(\"endDate\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    className=\"common-field\"\r\n                    placeholder=\"Enter End Date\"\r\n                    max={new Date().toISOString().split(\"T\")[0]}\r\n                    {...register(`test[${index}].end_date`, {\r\n                      required: {\r\n                        value: disabledEndDates[index] ? false : true,\r\n                        message: \"End Date is required\",\r\n                      },\r\n                    })}\r\n                    disabled={disabledEndDates[index]}\r\n                  />\r\n                  {errors?.test?.[index]?.end_date && (\r\n                    <p className=\"error-message\">{errors.test[index].end_date.message}</p>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <Form.Group className=\"d-flex gap-2 align-items-center\">\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      className=\"cv-field\"\r\n                      {...register(`test[${index}].is_still_working`, {\r\n                        required: false,\r\n                      })}\r\n                      onChange={(e) => handleCurrentlyWorkingChange(e, index)}\r\n                    />\r\n                    <Form.Label className=\"mb-0 font-14\">{t(\"currentlyWorking\")}</Form.Label>\r\n                  </Form.Group>\r\n                  {index !== 0 && (\r\n                    <div>\r\n                      <OverlayTrigger placement=\"bottom\" overlay={deletetooltip}>\r\n                        <Button variant=\"danger\" className=\"font-14\" onClick={() => deleteDeveloperExperience(item.experience_id, index)}>\r\n                          <FaTrashAlt />\r\n                        </Button>\r\n                      </OverlayTrigger>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        <div className=\"text-end mb-3\">\r\n          <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n            <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n              +\r\n            </Button>\r\n          </OverlayTrigger>\r\n        </div>\r\n       {role!==\"vendor\" && <div className=\"text-center\">\r\n          <RexettButton\r\n            type=\"submit\"\r\n            text=\"Submit\"\r\n            className=\"main-btn px-4 font-14 fw-semibold\"\r\n            variant=\"transparent\"\r\n            disabled={smallLoader}\r\n            isLoading={smallLoader}\r\n          />\r\n        </div>}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExperienceCVModal;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  InputGroup,\r\n  OverlayTrigger,\r\n  Row,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  filePreassignedUrlGenerate,\r\n  getAddNewDeveloper,\r\n  getCitiesList,\r\n  getCoutriesList,\r\n  getSkillList,\r\n  getStatesList,\r\n  getTimeZoneForCountry,\r\n} from \"../../redux/slices/clientDataSlice\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport {\r\n  addDegree,\r\n  getDegreeList,\r\n} from \"../../redux/slices/developerDataSlice\";\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport { EXPERIENCE_OPTIONS } from \"../../helper/utlis\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { GOOGLE_AUTOCOMPLETE_API_KEY } from \"../../components/clients/TimeReporiting/constant\";\r\nimport CommonReactSelect from \"../../components/atomic/CommonReactSelect\";\r\nimport ExperienceCV from \"../../components/common/Modals/ExperienceCVModal\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\nconst RegisterDeveloper = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [file, setFile] = useState(null);\r\n  const [CvFile, setCVFile] = useState(null);\r\n  const { smallLoader, skillList } = useSelector((state) => state.clientData);\r\n  const [disbaleYear, setDisbaleYear] = useState([]);\r\n  const [selectedCv, setSelectedCv] = useState(null);\r\n  const [selectedCvErr, setSelectedCvErr] = useState(null);\r\n  const [disabledEndDates, setDisabledEndDates] = useState([]);\r\n  const [skillCate, setSkillsCate] = useState([]);\r\n  const { degreeList } = useSelector((state) => state.developerData);\r\n  const skillLabels = skillCate?.map((skill) => skill.value);\r\n  const skillSet = skillLabels?.toString();\r\n  const { t } = useTranslation();\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [expertSkill, setExpertSkill] = useState([]);\r\n  const [fileTypeError, setFileTypeError] = useState(false);\r\n  const [socialMediaRows, setSocialMediaRows] = useState([\r\n    {\r\n      name: \"\",\r\n      url: \"\",\r\n    },\r\n  ]);\r\n  const { allTimeZones, countriesList, statesList, citiesList, timeZones } =\r\n  useSelector((state) => state.clientData);\r\n  const navigate = useNavigate();\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    clearErrors,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      educations: [\r\n        {\r\n          university_name: \"\",\r\n          degree_id: \"\",\r\n          address: \"\",\r\n          start_year: \"\",\r\n          end_year: \"\",\r\n          currently_attending: false,\r\n          description: \"\",\r\n        },\r\n      ],\r\n    },\r\n  });\r\n  console.log(selectedOption, \"select-----\");\r\n  console.log(expertSkill, \"experskilll\");\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    // name: \"educations\",\r\n    name: \"experiences\",\r\n    name: \"expertise\",\r\n    name: \"social_links\",\r\n    name: \"skills\",\r\n  });\r\n  const {\r\n    fields: educationField,\r\n    append: appendEducationField,\r\n    remove: removeEducationField,\r\n  } = useFieldArray({\r\n    control,\r\n    name: \"educations\",\r\n  });\r\n\r\n  const [experienceFields, setExperienceFields] = useState([\r\n    {\r\n      id: 0,\r\n      job_title: \"\",\r\n      company_name: \"\",\r\n      start_date: \"\",\r\n      end_date: \"\",\r\n      is_still_working: true,\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  const [expertiseFields, setExpertiseFields] = useState([\r\n    { id: 0, skill: \"\", experience: \"\" },\r\n  ]);\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n    dispatch(getCoutriesList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSkillList());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setSkillsCate(skillListMapped);\r\n  }, [skillList]);\r\n\r\n  const handleAppend = () => {\r\n    const expertise = watch(\"expertise\");\r\n    let index = expertise?.findIndex(\r\n      (item) => item.skill == undefined || item.experience == \"\"\r\n    );\r\n    if (index == -1) {\r\n      setExpertiseFields([\r\n        ...expertiseFields,\r\n        { id: expertiseFields?.id + 1, skill: \"\", experience: \"\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (id, index) => {\r\n    const expertise = watch(\"expertise\");\r\n    expertise.splice(index, 1);\r\n    let expertiseFieldsCopy = [...expertiseFields];\r\n    expertiseFieldsCopy.splice(index, 1);\r\n    // const updatedExpertFields = expertiseFieldsCopy.filter(\r\n    //   (field) => field.id !== id\r\n    // );\r\n    setExpertiseFields(expertiseFieldsCopy);\r\n  };\r\n\r\n  function generateYears() {\r\n    const currentYear = new Date().getFullYear();\r\n    const years = [];\r\n    for (let year = 1995; year <= currentYear; year++) {\r\n      years.push(year);\r\n    }\r\n    return years;\r\n  }\r\n\r\n  const yearsArray = generateYears();\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data, \"data---\");\r\n    // let fileData = new FormData();\r\n    // fileData.append(\"file\", file);\r\n    // let fileCVData = new FormData();\r\n    // fileCVData.append(\"file\", CvFile);\r\n    // let formattedExpertise = [];\r\n    // formattedExpertise = data?.expertise?.map((val) => {\r\n    //   return { skill: val?.skill?.label, experience: val?.experience };\r\n    // });\r\n    // let formattedSkills = [];\r\n    // let convertString = selectedOption?.map((item) => item.label);\r\n    // formattedSkills = convertString.map((item) => {\r\n    //   return { skill: item, experience: null };\r\n    // });\r\n\r\n    // const EducationFieldCpy = [...data.educations];\r\n    // let formattedEducationField = [];\r\n    // formattedEducationField = EducationFieldCpy.map((curElem) => {\r\n    //   return { ...curElem, degree_id: curElem.degree_id.value };\r\n    // });\r\n\r\n    // if (data) {\r\n    //   let resume;\r\n    //   console.log(data, \"formData\");\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileCVData, (url) => {\r\n    //       resume=url\r\n    //     }))\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileData, (url) => {\r\n    //       let formData = {\r\n    //         ...data,\r\n    //         skills: formattedSkills,\r\n    //         expertise: formattedExpertise,\r\n    //         profile_picture: url,\r\n    //         educations: formattedEducationField,\r\n    //       };\r\n    //       dispatch(\r\n    //         getAddNewDeveloper(formData, () => {\r\n    //           navigate(\"/vendor-dashboard\");\r\n    //         })\r\n    //       );\r\n    //     })\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  const addtooltip = <Tooltip id=\"tooltip\">{t(\"addRow\")}</Tooltip>;\r\n\r\n  const handleAddMoreExp = async () => {\r\n    const experiences = watch(\"experiences\");\r\n    console.log(experiences,\"experiences\")\r\n    const index = experiences?.findIndex(\r\n      ({\r\n        job_title,\r\n        company_name,\r\n        description,\r\n        start_date,\r\n        end_date,\r\n        is_still_working,\r\n      }) =>\r\n        !company_name ||\r\n        !job_title ||\r\n        !description ||\r\n        !start_date ||\r\n        (!is_still_working && !end_date)\r\n    );\r\n    if (index === -1) {\r\n      const newExperienceField = {\r\n        id: experienceFields.length + 1,\r\n        company_name: \"\",\r\n        job_title: \"\",\r\n        description: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        is_still_working: false,\r\n      };\r\n      setExperienceFields([...experienceFields, newExperienceField]);\r\n    }\r\n  };\r\n  const handleDeleteFieldExp = (index, id) => {\r\n    const experiencesCopy = watch(\"experiences\"); // Copy the experiences array\r\n    const expCop = [...experienceFields]; // Copy the experienceFields array\r\n    experiencesCopy.splice(index, 1);\r\n    const updatedExpertFields = expCop.filter(\r\n      (field) => field.id !== parseInt(id)\r\n    );\r\n\r\n    // Set the state with the updated arrays\r\n    setExperienceFields([...updatedExpertFields]);\r\n  };\r\n  const [educationFields, setEducationFields] = useState([\r\n    {\r\n      university_name: \"\",\r\n      degree_id: \"\",\r\n      address: \"\",\r\n      start_year: \"\",\r\n      end_year: \"\",\r\n      currently_attending: true,\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"country\")?.value) {\r\n      dispatch(getStatesList(watch(\"country\")?.value));\r\n      dispatch(getTimeZoneForCountry(watch(\"country\")?.value));\r\n    }\r\n  }, [watch(\"country\")]);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"state\")?.value) {\r\n      dispatch(getCitiesList(watch(\"country\")?.value, watch(\"state\")?.value));\r\n      setValue(\"city\", null);\r\n    }\r\n  }, [watch(\"state\")]);\r\n\r\n  const handleAddMore = () => {\r\n    const educations = watch(\"educations\");\r\n    const index = educations.findIndex(\r\n      ({ university_name, degree_id, address, start_year, end_year }) =>\r\n        !university_name ||\r\n        !degree_id ||\r\n        !address ||\r\n        end_year === \"Please Select Year\" ||\r\n        start_year === \"Please Select Year\"\r\n    );\r\n    if (index === -1) {\r\n      const newEducationField = {\r\n        id: educationFields.length + 1,\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      };\r\n      // setEducationFields([...educationFields, newEducationField]);\r\n      appendEducationField({\r\n        // id: educationFields.length + 1,\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      });\r\n      setEducationFields([...watch(\"educations\"), newEducationField]);\r\n    }\r\n  };\r\n  const handleDeleteField = (index, id) => {\r\n    const educations = watch(\"educations\");\r\n    educations.splice(index, 1);\r\n    console.log(educationFields, \"educationfield\");\r\n\r\n    // const educationFieldsCpy=[...educationFields];\r\n    const temp = [...educationFields];\r\n    temp.splice(index, 1);\r\n    // const updatedEducationFields = educationFields.filter(\r\n    //   (field) => field.id !== id\r\n    // );\r\n    setEducationFields(temp);\r\n  };\r\n\r\n  const handleAddMoreSocial = () => {\r\n    const newRow = { id: socialMediaRows.length + 1, name: \"\", url: \"\" };\r\n    setSocialMediaRows([...socialMediaRows, newRow]);\r\n  };\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const isChecked = watch(`experiences[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n      setValue(`experiences[${index}].end_date`, null);\r\n    } else {\r\n      const isChecked = watch(`experiences[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n    }\r\n  };\r\n\r\n  const handleCurrentlyAttendingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const isChecked = watch(`educations[${index}].is_still_attending`);\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, null);\r\n    } else {\r\n      const isChecked = watch(`educations[${index}].is_still_attending`);\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, end_year);\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/jpg\"];\r\n    const file = event.target.files[0];\r\n    if (file && allowedTypes.includes(file.type)) {\r\n      // clearErrors(\"profile_picture\");\r\n      setFileTypeError(false);\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n      setFile(file);\r\n    } else {\r\n      // setError(\"profile_picture\", {\r\n      //   type: \"manual\",\r\n      //   message: t(\"invalid_file_type\"),\r\n      // });\r\n      setFileTypeError(true);\r\n      setSelectedImage(null);\r\n      // setValue(\"profile_picture\",\"\")\r\n    }\r\n  };\r\n\r\n  const handleUploadCv = (event) => {\r\n    const allowedTypes = [\"application/pdf\"];\r\n    const file = event.target.files[0];\r\n    if (file && allowedTypes.includes(file.type)) {\r\n      setFileTypeError(false);\r\n      setCVFile(file);\r\n      setSelectedCv(file.name);\r\n      setSelectedCvErr(null);\r\n    } else {\r\n      setSelectedCvErr(true);\r\n    }\r\n  };\r\n  const onChangeSelect = (val, arg) => {\r\n    const newOption = createOption(val);\r\n    if (arg == \"skills\") {\r\n      setSelectedOption((prev) => [...prev, newOption]);\r\n      setSkillsCate((prev) => [...prev, newOption]);\r\n    } else {\r\n      setExpertSkill((prev) => [...prev, newOption]);\r\n    }\r\n  };\r\n  const handleCreate = (inputValue, index) => {\r\n    const payload = {\r\n      title: inputValue,\r\n    };\r\n\r\n    dispatch(\r\n      addDegree(payload, () => {\r\n        dispatch(getDegreeList());\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <section className=\"register-developer card-box\">\r\n        <div className=\"\">\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">\r\n                {t(\"enterPersonalDetails\")}\r\n              </h2>\r\n            </div>\r\n            <div className=\"inner-form mb-3\">\r\n              <Row>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"developerName\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      {...register(\"name\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"nameValidation\"),\r\n                        },\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">{errors.name?.message}</p>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"email\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"email\"\r\n                      className=\"common-field\"\r\n                      {...register(\"email\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"emailValidation\"),\r\n                        },\r\n                        pattern: {\r\n                          value: /^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/,\r\n                          message: t(\"invalidEmail\"),\r\n                        },\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">{errors.email?.message}</p>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"phoneNumber\")} *\r\n                    </Form.Label>\r\n                    {/* <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"phone_number\"\r\n                      {...register(\"phone_number\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"phoneNumberValidation\"),\r\n                        },\r\n                        pattern: {\r\n                          value: /^[0-9]{10}$/,\r\n                          message: \"Please enter a valid phone number\",\r\n                        },\r\n                      })}\r\n                    /> */}\r\n                    <Controller\r\n                      name=\"phone_number\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"phoneNumberValidation\"),\r\n                        },\r\n                        pattern: {\r\n                          value: /^[0-9]{10}$/,\r\n                          message: \"Please enter a valid phone number\",\r\n                        },\r\n                      }}\r\n                      render={({ field }) => (\r\n                        <input\r\n                          {...field}\r\n                          type=\"text\"\r\n                          className=\"common-field form-control\"\r\n                          onChange={(e) => {\r\n                            const numericValue = e.target.value.replace(\r\n                              /[^0-9]/g,\r\n                              \"\"\r\n                            );\r\n                            field.onChange(numericValue);\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    {errors?.phone_number && (\r\n                      <p className=\"error-message\">\r\n                        {errors?.phone_number?.message}\r\n                      </p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"address\")} *\r\n                    </Form.Label>\r\n                    {/* <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      // name=\"address\"\r\n                      {...register(\"address\", {\r\n                        required: t(\"addressValidation\"),\r\n                      })}\r\n                    /> */}\r\n                    <Controller\r\n                      name=\"address\"\r\n                      rules={{\r\n                        required: \"Address is required\",\r\n                      }}\r\n                      className=\"common-field \"\r\n                      control={control}\r\n                      render={({ field, fieldState }) => (\r\n                        <Autocomplete\r\n                          style={{ width: \"500px\" }}\r\n                          errors={fieldState?.errors}\r\n                          className=\"common-field font-14 w-100 p-2\"\r\n                          apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                          onPlaceSelected={(place) => {\r\n                            console.log(place);\r\n                          }}\r\n                          options={{\r\n                            types: [\"establishment\", \"geocode\"],\r\n                          }}\r\n                          onChange={(event) => {\r\n                            field.onChange(event.target.value);\r\n                          }}\r\n                          onLoadFailed={(error) => {\r\n                            console.error(\r\n                              \"Google Places Autocomplete failed to load\",\r\n                              error\r\n                            );\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    {errors?.address && (\r\n                      <p className=\"error-message\">{errors.address.message} </p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <CommonReactSelect\r\n                    name=\"country\"\r\n                    errors={errors}\r\n                    // watch={watch}\r\n                    control={control}\r\n                    required=\"Country is required\"\r\n                    label=\"Country\"\r\n                    type=\"country\"\r\n                    options={countriesList}\r\n                  />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                 \r\n                  <CommonReactSelect\r\n                    name=\"state\"\r\n                    errors={errors}\r\n                    control={control}\r\n                    required=\"State is required\"\r\n                    label=\"State\"\r\n                    type=\"state\"\r\n                    options={statesList}\r\n                  />\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                  <CommonReactSelect\r\n                    name=\"city\"\r\n                    errors={errors}\r\n                    control={control}\r\n                    // required=\"City is required\"\r\n                    label=\"City\"\r\n                    type=\"city\"\r\n                    options={citiesList}\r\n                  />\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                \r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                  <CommonReactSelect\r\n                    name=\"time_zone\"\r\n                    errors={errors}\r\n                    type=\"timezones\"\r\n                    control={control}\r\n                    options={timeZones}\r\n                    required=\"Time zone is required\"\r\n                    label=\"Time Zone\"\r\n                  />\r\n                    \r\n                  </Form.Group>\r\n                </Col>\r\n\r\n\r\n             \r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"postCode\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"post_code\"\r\n                      {...register(\"post_code\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"postCodeValidation\"),\r\n                        },\r\n                        // pattern: {\r\n                        //     value: /^[0-9]+$/,\r\n                        //     message: \"Postal code should only contain numbers\",\r\n                        // }\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">\r\n                      {errors.post_code?.message}{\" \"}\r\n                    </p>\r\n                  </Form.Group>\r\n                </Col>\r\n               \r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"professional_title\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"professional_title\"\r\n                      {...register(\"professional_title\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"professionalTitleValidation\"),\r\n                        },\r\n                        // pattern: {\r\n                        //     value: /^[A-Za-z\\s]+$/,\r\n                        //     message: \"Country should not contain numbers or special character\",\r\n                        // }\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">\r\n                      {errors.professional_title?.message}{\" \"}\r\n                    </p>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group>\r\n                    <Form.Label>{t(\"experienceRequired\")}*</Form.Label>\r\n                    <Form.Select\r\n                      className=\"common-field\"\r\n                      {...register(\"total_experience\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: \"Experienced is required\",\r\n                        },\r\n                      })}\r\n                    >\r\n                      <option disabled selected value=\"\">\r\n                        {t(\"select\")} {t(\"experienceRequired\")}\r\n                      </option>\r\n                      <option value=\"Less_than_one\">\r\n                        {t(\"lessThan1Year\")}\r\n                      </option>\r\n                      <option value=\"1 year\">1 {t(\"year\")}</option>\r\n                      <option value=\"2 years\">2 {t(\"year\")}</option>\r\n                      <option value=\"3 years\">3 {t(\"year\")}</option>\r\n                      <option value=\"4 years\">4 {t(\"year\")}</option>\r\n                      <option value=\"5 years\">5 {t(\"year\")}</option>\r\n                      <option value=\"6+ years \">6 +{t(\"year\")}</option>\r\n                    </Form.Select>\r\n                  </Form.Group>\r\n                  <p className=\"error-message\">{errors.experience?.message}</p>\r\n                </Col>\r\n                {/* <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"experience\")} *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"experience\"\r\n                      {...register(\"professional_title\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"experienceValidation\"),\r\n                        },\r\n                        // pattern: {\r\n                        //     value: /^[A-Za-z\\s]+$/,\r\n                        //     message: \"Country should not contain numbers or special character\",\r\n                        // }\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">\r\n                      {errors.professional_title?.message}{\" \"}\r\n                    </p>\r\n                  </Form.Group>\r\n                </Col> */}\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"image\")}*\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      id=\"developer-image\"\r\n                      name=\"profile_picture\"\r\n                      {...register(\"profile_picture\", {\r\n                        onChange: (e) => handleFileChange(e),\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"profilePictureValidation\"),\r\n                        },\r\n                      })}\r\n                      className=\"d-none\"\r\n                    />\r\n\r\n                    <Form.Label\r\n                      htmlFor=\"developer-image\"\r\n                      className=\"upload-image-label d-block\"\r\n                    >\r\n                      <HiUpload />\r\n                      {t(\"uploadImage\")}\r\n                    </Form.Label>\r\n                  </Form.Group>\r\n                  {fileTypeError ? (\r\n                    <p className=\"error-message\">{t(\"invalid_file_type\")}</p>\r\n                  ) : (\r\n                    errors?.profile_picture && (\r\n                      <p className=\"error-message\">\r\n                        {\" \"}\r\n                        {errors?.profile_picture?.message}\r\n                      </p>\r\n                    )\r\n                  )}\r\n                  {selectedImage && (\r\n                    <div>\r\n                      <img\r\n                        src={selectedImage && selectedImage}\r\n                        alt=\"Selected\"\r\n                        className=\"uploaded-image\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Label className=\"common-label\">\r\n                      {t(\"uploadCV\")}*\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      id=\"upload_cv\"\r\n                      name=\"upload_cv\"\r\n                      {...register(\"upload_cv\", {\r\n                        onChange: (e) => handleUploadCv(e),\r\n                        required: {\r\n                          value: true,\r\n                          message: t(\"profilePictureValidation\"),\r\n                        },\r\n                      })}\r\n                      className=\"d-none\"\r\n                    />\r\n\r\n                    <Form.Label\r\n                      htmlFor=\"upload_cv\"\r\n                      className=\"upload-image-label d-block\"\r\n                    >\r\n                      <HiUpload />\r\n                      {t(\"upload_cv\")}\r\n                    </Form.Label>\r\n                  </Form.Group>\r\n                  {selectedCvErr && (\r\n                    <p style={{ color: \"red\" }}>\r\n                      Please upload a valid PDF file.\r\n                    </p>\r\n                  )}\r\n                  {selectedCv && <div>{selectedCv}</div>}\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            \r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterExperience\")}</h2>\r\n            </div>\r\n\r\n            <ExperienceCV data={null} role=\"vendor\" onSubmitVendor={onSubmit} />\r\n        \r\n            \r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterExpertise\")}</h2>\r\n            </div>\r\n            {expertiseFields.map((field, index) => {\r\n              return (\r\n                <Fragment key={field?.id}>\r\n                  <div>\r\n                    <Row className=\"mb-3\">\r\n                      <Col md={6}>\r\n                        <Form.Group>\r\n                          <Form.Label className=\"common-label\">\r\n                            {t(\"enterSkill\")}\r\n                          </Form.Label>\r\n                          <CreatableSelect\r\n                            className=\"common-field\"\r\n                            {...register(`expertise.${index}.skill`, {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"required_message\"),\r\n                              },\r\n                            })}\r\n                            isClearable\r\n                            options={skillCate}\r\n                            onChange={(newValue) => {\r\n                              // setExpertSkill([newValue]);x\r\n                              setValue(`expertise.${index}.skill`, newValue);\r\n                              clearErrors(`expertise.${index}.skill`);\r\n                            }}\r\n                            onCreateOption={(val) => {\r\n                              onChangeSelect(val, \"expertise\");\r\n                            }}\r\n                            // value={expertSkill}\r\n                            // name={expertSkill}\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={6}>\r\n                        <div className=\"flex-none\">\r\n                          <Form.Label className=\"common-label\">\r\n                            {t(\"experience\")}\r\n                          </Form.Label>\r\n                          <Form.Select\r\n                            {...register(`expertise.${index}.experience`, {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"required_message\"),\r\n                              },\r\n                            })}\r\n                            className=\"common-field shadow-none\"\r\n                          >\r\n                            <option value=\"\"> {t(\"selectExperience\")} </option>\r\n                            {EXPERIENCE_OPTIONS.map(\r\n                              ({ label, value }, index) => (\r\n                                <option value={value} key={index}>\r\n                                  {label} {t(\"years\")}\r\n                                </option>\r\n                              )\r\n                            )}\r\n                          </Form.Select>\r\n                          {errors?.skills?.[index]?.experience && (\r\n                            <p className=\"error-message\">\r\n                              {errors?.skills[index]?.experience?.message}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    {errors?.skills?.[index]?.skill && (\r\n                      <p className=\"error-message\">\r\n                        {errors?.skills[index]?.skill?.message}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                  {expertiseFields?.length > 1 && (\r\n                    <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                      <Button\r\n                        className=\"arrow-btn danger-arrow ms-auto\"\r\n                        onClick={() => handleDelete(field?.id, index)}\r\n                      >\r\n                        <FaTrash />\r\n                      </Button>\r\n                    </Col>\r\n                  )}\r\n                </Fragment>\r\n              );\r\n            })}\r\n            <div className=\"text-end mb-3\">\r\n              <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                <Button\r\n                  className=\"arrow-btn primary-arrow ms-auto\"\r\n                  onClick={handleAppend}\r\n                >\r\n                  +\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">\r\n                {t(\"enterEducationDetails\")}\r\n              </h2>\r\n            </div>\r\n            <div className=\"inner-form mb-3\">\r\n              {educationField.map(\r\n                (\r\n                  item,\r\n                  // {\r\n                  //   id,\r\n                  //   university_name,\r\n                  //   degree_id,\r\n                  //   address,\r\n                  //   start_year,\r\n                  //   end_year,\r\n                  //   currently_attending,\r\n                  // },\r\n                  index\r\n                ) => (\r\n                  <Row key={item.id}>\r\n                    <Col md={6}>\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label>{t(\"universityName\")} *</Form.Label>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          className=\"common-field shadow-none\"\r\n                          {...register(`educations[${index}].university_name`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: t(\"universityNameValidation\"),\r\n                            },\r\n                          })}\r\n                        />\r\n                        {errors?.educations?.[index]?.university_name && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].university_name.message}\r\n                          </p>\r\n                        )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <Form.Group>\r\n                        <Form.Label>{t(\"degreeName\")} *</Form.Label>\r\n                        {/* <Select\r\n                          options={degreeList}\r\n                          onChange={(val) =>\r\n                            setValue(\r\n                              `educations[${index}].degree_id`,\r\n                              val ? val.value : \"\"\r\n                            )\r\n                          }\r\n                          defaultValue={degreeList.find(\r\n                            (option) => option.value === degree_id\r\n                          )}\r\n                        /> */}\r\n                        {/* <Controller\r\n                          name={`educations.${index}.degree_id`}\r\n                          control={control}\r\n                          rules={{required:{\r\n                            value:true,\r\n                            message:t(\"required_message\")\r\n                          }}}\r\n                          render={({ field }) => (\r\n                            <CreatableSelect\r\n                              {...field}\r\n                              value={watch(`educations?.${index}.degree_id`)}\r\n                              isClearable\r\n                              onChange={(val) => {\r\n                                setValue(`educations.${index}.degree_id`, val);\r\n                              }}\r\n                              // defaultValue={degreeList.find(\r\n                              //   (option) => option.value === watch(`educations.${index}.degree_id`)\r\n                              // )}\r\n                              onCreateOption={handleCreate}\r\n                              options={degreeList}\r\n                            />\r\n                          )}\r\n                        /> */}\r\n                        <CreatableSelect\r\n                          className=\"common-field\"\r\n                          {...register(`educations.${index}.degree_id`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: t(\"degree_name_required_msg\"),\r\n                            },\r\n                          })}\r\n                          // value={watch(`educations.${index}.degree_id`)}\r\n                          isClearable\r\n                          onChange={(val) => {\r\n                            setValue(`educations.${index}.degree_id`, val);\r\n                          }}\r\n                          // value={degreeList.find((curElem)=>curElem.label === item.label)}\r\n                          onCreateOption={handleCreate}\r\n                          options={degreeList}\r\n                        />\r\n                        {errors?.educations?.[index]?.degree_id && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].degree_id.message}\r\n                          </p>\r\n                        )}\r\n                        {/* <CreatableSelect\r\n                            {...register(`expertise.${index}.skill`, {\r\n                              required: {\r\n                                value: true,\r\n                                message: t(\"required_message\"),\r\n                              },\r\n                            })}\r\n                            isClearable\r\n                            options={skillCate}\r\n                            onChange={(newValue) => {\r\n                              // setExpertSkill([newValue]);x\r\n                              setValue(`expertise.${index}.skill`, newValue);\r\n                              clearErrors(`expertise.${index}.skill`);\r\n                            }}\r\n                            onCreateOption={(val) => {\r\n                              onChangeSelect(val, \"expertise\");\r\n                            }}\r\n                            // value={expertSkill}\r\n                            // name={expertSkill}\r\n                          /> */}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label>{t(\"address\")} *</Form.Label>\r\n                        {/* <Form.Control\r\n                          className=\"common-field\"\r\n                          type=\"text\"\r\n                          {...register(`educations[${index}].address`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: t(\"addressValidation\"),\r\n                            },\r\n                          })}\r\n                        /> */}\r\n                        <Controller\r\n                          name=\"address\"\r\n                          rules={{\r\n                            required: \"Address is required\",\r\n                          }}\r\n                          className=\"common-field \"\r\n                          control={control}\r\n                          render={({ field, fieldState }) => (\r\n                            <Autocomplete\r\n                              style={{ width: \"500px\" }}\r\n                              errors={fieldState?.errors}\r\n                              className=\"common-field font-14 w-100 p-2\"\r\n                              apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                              onPlaceSelected={(place) => {\r\n                                console.log(place);\r\n                              }}\r\n                              options={{\r\n                                types: [\"establishment\", \"geocode\"],\r\n                              }}\r\n                            />\r\n                          )}\r\n                        />\r\n                        {errors?.educations?.[index]?.address && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].address.message}\r\n                          </p>\r\n                        )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group>\r\n                        <Form.Label>{t(\"startYear\")} *</Form.Label>\r\n                        <Form.Select\r\n                          className=\"common-field\"\r\n                          {...register(`educations.${index}.start_year`, {\r\n                            required: t(\"startYearValidation\"),\r\n                            validate: {\r\n                              lessThanEndYear: (value) => {\r\n                                const endYear = watch(\r\n                                  `educations.${index}.end_year`\r\n                                );\r\n                                // if (!endYear || parseInt(value) < parseInt(endYear)) {\r\n                                //     return true;\r\n                                // }\r\n                                // return 'Start Year must be less than End Year';\r\n                              },\r\n                            },\r\n                          })}\r\n                        >\r\n                          <option disabled selected>\r\n                            {t(\"pleaseSelectYear\")}\r\n                          </option>\r\n                          {yearsArray?.map((item) => (\r\n                            <option key={item} value={item}>\r\n                              {item}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                        {errors &&\r\n                          errors.educations &&\r\n                          errors.educations[index] &&\r\n                          errors.educations[index].start_year && (\r\n                            <p className=\"error-message\">\r\n                              {errors.educations[index].start_year.message}\r\n                            </p>\r\n                          )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label>{t(\"endYear\")} *</Form.Label>\r\n                        <Form.Select\r\n                          className=\"common-field\"\r\n                          {...register(`educations.${index}.end_year`, {\r\n                            required: {\r\n                              value: disbaleYear[index] ? false : true,\r\n                              message: t(\"endYearValidation\"),\r\n                            },\r\n                          })}\r\n                          disabled={disbaleYear[index]}\r\n                        >\r\n                          <option disabled selected>\r\n                            {t(\"pleaseSelectYear\")}\r\n                          </option>\r\n                          {yearsArray?.map((item) => (\r\n                            <option key={item} value={item}>\r\n                              {item}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                        {errors &&\r\n                          errors.educations &&\r\n                          errors.educations[index] &&\r\n                          errors.educations[index].end_year && (\r\n                            <p className=\"error-message\">\r\n                              {errors.educations[index].end_year.message}\r\n                            </p>\r\n                          )}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Form.Group className=\"mb-4 d-flex gap-2 align-items-center\">\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        className=\"job-post-checkbox\"\r\n                        id=\"edu-checkbox\"\r\n                        {...register(\r\n                          `educations[${index}].currently_attending`,\r\n                          {\r\n                            required: false,\r\n                          }\r\n                        )}\r\n                        onChange={(e) =>\r\n                          handleCurrentlyAttendingChange(e, index)\r\n                        }\r\n                      />\r\n                      <Form.Label className=\"mb-0\" htmlFor=\"edu-checkbox\">\r\n                        {t(\"currentlyAttending\")}\r\n                      </Form.Label>\r\n                    </Form.Group>\r\n                    {watch(\"educations\")?.length > 1 && (\r\n                      <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                        <Button\r\n                          className=\"arrow-btn danger-arrow\"\r\n                          // onClick={() => handleDeleteField(index,id)}\r\n                          onClick={() => {\r\n                            removeEducationField(index);\r\n                          }}\r\n                        >\r\n                          <FaTrash />\r\n                        </Button>\r\n                      </Col>\r\n                    )}\r\n                  </Row>\r\n                )\r\n              )}\r\n              <div className=\"text-end my-3\">\r\n                <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                  <Button\r\n                    className=\"arrow-btn primary-arrow ms-auto\"\r\n                    onClick={handleAddMore}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </OverlayTrigger>\r\n              </div>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterAbout\")} *</h2>\r\n            </div>\r\n            <div className=\"inner-form mb-3\">\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Control\r\n                      as=\"textarea\"\r\n                      rows={3}\r\n                      placeholder=\"Add your about\"\r\n                      className=\"common-field\"\r\n                      name=\"bio\"\r\n                      {...register(\"bio\", {\r\n                        required: {\r\n                          value: true,\r\n                          message: `${t(\"AboutRequired\")}`,\r\n                        },\r\n                      })}\r\n                    />\r\n                    <p className=\"error-message\">{errors.bio?.message} </p>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"enterSkills\")}</h2>\r\n            </div>\r\n            <div className=\"experience-container\">\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <CreatableSelect\r\n                      className=\"common-field\"\r\n                      isMulti\r\n                      isClearable\r\n                      name={selectedOption}\r\n                      onChange={(newValue) => {\r\n                        setSelectedOption(newValue);\r\n                      }}\r\n                      onCreateOption={(val) => {\r\n                        onChangeSelect(val, \"skills\");\r\n                      }}\r\n                      options={skillCate}\r\n                      value={selectedOption}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            <div className=\"cv-header-wrapper mb-3\">\r\n              <h2 className=\"subheading-resume mb-0\">{t(\"addSocialLinks\")}</h2>\r\n            </div>\r\n            <div className=\"inner-form\">\r\n              {socialMediaRows.map((row, index) => (\r\n                <div className=\"experience-container\">\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Text id=\"basic-addon1 px-0\">\r\n                          <Form.Select\r\n                            className=\"py-0 border-0 shadow-none bg-transparent\"\r\n                            {...register(`social_links[${index}].name`)} // Register the name field\r\n                          >\r\n                            {/* <option value=\"facebook_url\">Facebook</option> */}\r\n                            <option value=\"linkedin_url\">\r\n                              {t(\"linkedIn\")}\r\n                            </option>\r\n                            {/* <option value=\"twitter_url\">Twitter</option> */}\r\n                            <option value=\"github_url\">{t(\"github\")}</option>\r\n                          </Form.Select>\r\n                        </InputGroup.Text>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          className=\"common-field\"\r\n                          placeholder={t(\"enterUrl\")}\r\n                          {...register(`social_links[${index}].url`, {\r\n                            required: {\r\n                              value: true,\r\n                              message: \"Url is required\",\r\n                            },\r\n                          })}\r\n                        />\r\n\r\n                        {errors?.social_links?.url && (\r\n                          <p className=\"error-message\">\r\n                            {errors.social_links?.url.message}\r\n                          </p>\r\n                        )}\r\n                      </InputGroup>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              ))}\r\n              <div className=\"text-end mb-3\">\r\n                <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n                  <Button\r\n                    className=\"arrow-btn primary-arrow ms-auto\"\r\n                    onClick={handleAddMoreSocial}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </OverlayTrigger>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <RexettButton\r\n                type=\"submit\"\r\n                text={t(\"register\")}\r\n                className=\"main-btn px-5\"\r\n                variant=\"transparent\"\r\n                disabled={smallLoader}\r\n                isLoading={smallLoader}\r\n              />\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterDeveloper;\r\n","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["_ref","_errors$name","control","name","errors","options","required","label","type","formattedOptions","setFormattedOptions","useState","useEffect","convertCountriesForSelect","console","log","formattedCountryOptions","map","timezone","value","code","isoCode","_jsxs","Form","Group","className","children","Label","_jsx","Controller","rules","message","render","_ref2","field","Select","show","handleClose","data","id","role","onSubmitVendor","renderModalData","setRenderModalData","disabledEndDates","setDisabledEndDates","dispatch","useDispatch","register","setValue","watch","handleSubmit","reset","trigger","setError","formState","useForm","defaultValues","test","company_name","job_title","t","useTranslation","fields","append","remove","replace","useFieldArray","smallLoader","useSelector","state","developerData","forEach","item","index","_item$start_date","_item$end_date","description","start_date","slice","end_date","is_still_working","experience_id","prevState","deletetooltip","Tooltip","addtooltip","_Fragment","onSubmit","developer_id","experiences","updateDeveloperCvExperience","fetchDeveloperCv","getDeveloperDetails","noValidate","_errors$test","_errors$test$index","_errors$test2","_errors$test2$index","_errors$test3","_errors$test3$index","_errors$test4","_errors$test4$index","_errors$test5","_errors$test5$index","Row","Col","md","Control","placeholder","concat","as","rows","max","Date","toISOString","split","validate","dateRange","endDate","disabled","Check","onChange","e","handleCurrentlyWorkingChange","target","checked","updatedDisabledEndDates","OverlayTrigger","placement","overlay","Button","variant","onClick","deleteDeveloperExperience","itemId","deleteExperience","FaTrashAlt","async","RexettButton","text","isLoading","RegisterDeveloper","_errors$email","_errors$phone_number","_errors$post_code","_errors$professional_","_errors$experience","_errors$profile_pictu","_errors$bio","selectedImage","setSelectedImage","file","setFile","CvFile","setCVFile","skillList","clientData","disbaleYear","setDisbaleYear","selectedCv","setSelectedCv","selectedCvErr","setSelectedCvErr","skillCate","setSkillsCate","degreeList","skillLabels","skill","toString","selectedOption","setSelectedOption","expertSkill","setExpertSkill","fileTypeError","setFileTypeError","socialMediaRows","setSocialMediaRows","url","allTimeZones","countriesList","statesList","citiesList","timeZones","clearErrors","useNavigate","educations","university_name","degree_id","address","start_year","end_year","currently_attending","educationField","appendEducationField","removeEducationField","experienceFields","setExperienceFields","expertiseFields","setExpertiseFields","experience","skillListMapped","title","getDegreeList","getCoutriesList","getSkillList","yearsArray","currentYear","getFullYear","years","year","push","generateYears","educationFields","setEducationFields","_watch","_watch2","_watch3","getStatesList","getTimeZoneForCountry","_watch4","_watch5","_watch6","getCitiesList","onChangeSelect","val","arg","newOption","toLowerCase","prev","handleCreate","inputValue","payload","addDegree","pattern","email","_ref3","numericValue","phone_number","_ref4","fieldState","Autocomplete","style","width","apiKey","GOOGLE_AUTOCOMPLETE_API_KEY","onPlaceSelected","place","types","event","onLoadFailed","error","CommonReactSelect","post_code","professional_title","selected","files","includes","reader","FileReader","onloadend","result","readAsDataURL","handleFileChange","htmlFor","HiUpload","profile_picture","src","alt","handleUploadCv","color","ExperienceCV","_errors$skills","_errors$skills$index","_errors$skills$index2","_errors$skills$index3","_errors$skills2","_errors$skills2$index","_errors$skills$index4","_errors$skills$index5","Fragment","CreatableSelect","isClearable","newValue","onCreateOption","EXPERIENCE_OPTIONS","_ref5","skills","length","handleDelete","splice","expertiseFieldsCopy","FaTrash","handleAppend","expertise","findIndex","undefined","_errors$educations","_errors$educations$in","_errors$educations2","_errors$educations2$i","_errors$educations3","_errors$educations3$i","_watch7","_ref6","lessThanEndYear","handleCurrentlyAttendingChange","handleAddMore","newEducationField","bio","isMulti","row","_errors$social_links","_errors$social_links2","InputGroup","Text","social_links","handleAddMoreSocial","newRow","InputGroupText","React","ref","bsPrefix","Component","props","useBootstrapPrefix","classNames","displayName","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}