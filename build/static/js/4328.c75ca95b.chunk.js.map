{"version":3,"file":"static/js/4328.c75ca95b.chunk.js","mappings":"kOAYA,MAyGA,EAzGgBA,IAAqD,IAADC,EAAAC,EAAAC,EAAA,IAAnD,KAAEC,EAAI,YAAEC,EAAW,KAAEC,EAAI,GAAEC,EAAE,KAAEC,EAAI,SAACC,GAAUT,EAC7D,MAAMU,GAAWC,EAAAA,EAAAA,OACX,EAAEC,IAAMC,EAAAA,EAAAA,OACR,YAAEC,IAAgBC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,iBAC/C,SACJC,EAAQ,SACRC,EAAQ,aACRC,EAAY,MACZC,EAAK,YACLC,EACAC,WAAW,OAAEC,EAAM,QAAEC,EAAO,QAAEC,EAAO,aAAEC,KACrCC,EAAAA,EAAAA,IAAQ,CAAC,GACPC,EAAW,KAEjBC,EAAAA,EAAAA,YAAU,KACRX,EAAS,MAAOb,EAAK,GACpB,CAACA,IAiCJ,OACEyB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJ5B,KAAMA,EACN6B,OAT4BC,KAC9Bf,EAAS,MAAMb,GACfD,IACAiB,EAAY,MAAM,EAOhBa,UAAQ,EACRC,UAAU,eACVC,WAAS,EAAAC,SAAA,EAETC,EAAAA,EAAAA,KAACP,EAAAA,EAAMQ,OAAM,CAACC,aAAW,EAACL,UAAU,mBAIpCL,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,KAAI,CAAAJ,SAAA,EACTC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gBAAeE,SAAE1B,EAAE,mBACjCmB,EAAAA,EAAAA,MAAA,QAAMY,SAAUvB,GA7CJwB,IAChB,GAAa,cAATpC,EAAsB,CACxB,IAAIF,EAAO,IACNsC,EACHC,QAAStC,GAEXG,GACEoC,EAAAA,EAAAA,IAAqBxC,EAAKE,GAAM,KAC9BE,GAASqC,EAAAA,EAAAA,OACT1C,GAAa,IAGnB,KAAO,CACL,IAAIC,EAAO,IACNsC,EACHC,QAAStC,GAEXG,GACEoC,EAAAA,EAAAA,IAAqBxC,EAAKE,GAAM,KAC9BE,GAASsC,EAAAA,EAAAA,IAAoBzC,IAC7BF,GAAa,IAGnB,KAsB4C4C,YAAU,EAAAX,SAAA,EAChDP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CACXC,GAAG,WACHjB,UAAU,eACVkB,KAAK,IACLC,KAAK,MACLC,YAAY,oBACRtC,EAAS,MAAO,CAClBuC,SAAU,CACRC,OAAO,EACPC,QAAS,yBAEXC,SAAWF,GACTA,EAAMG,QAAUhC,GAAY,oCAGhCiC,UAAW,OAEbvB,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAY,QAAZrC,EAAEuB,EAAOuC,WAAG,IAAA9D,OAAA,EAAVA,EAAY0D,WAC1C5B,EAAAA,EAAAA,MAAA,KAAGK,UAAU,mBAAkBE,SAAA,EAChB,QAAZpC,EAAAmB,EAAM,cAAM,IAAAnB,OAAA,EAAZA,EAAc2D,SAAUhC,EACrBjB,EAAE,2BACFiB,GAAuB,QAAf1B,EAAGkB,EAAM,cAAM,IAAAlB,OAAA,EAAZA,EAAc0D,QAAQ,IACpCjD,EAAE,8BAGP2B,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,UAC1BC,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CACXC,KAAK,SACLC,KAAMtD,EAAE,UACRwB,UAAU,oCACV+B,QAAQ,cACRC,SAAUtD,EACVuD,UAAWvD,cAKb,C,4JCxGZ,MAwKA,EAxKyBd,IAAmF,IAADsE,EAAAC,EAAAC,EAAA,IAAjF,KAAEpE,EAAI,YAAEC,EAAW,KAAEkD,EAAI,SAAEkB,EAAQ,QAAEC,EAAO,WAAEC,EAAU,GAAEpE,EAAE,KAACC,EAAI,SAACC,GAAUT,EAClG,MAAMU,GAAWC,EAAAA,EAAAA,OACX,YAAEG,IAAgBC,EAAAA,EAAAA,KAAYC,GAASA,EAAM4D,cAC5CC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,OAC9C,EAAEnE,IAAOC,EAAAA,EAAAA,OACR,SACFK,EAAQ,SACRC,EAAQ,aACRC,EACAG,WAAW,OAAEC,EAAM,QAAEC,EAAO,QAAEC,EAAO,aAAEC,KACvCC,EAAAA,EAAAA,IAAQ,CAAC,IAEbE,EAAAA,EAAAA,YAAU,KACNX,EAAS,OAAQoC,GACjBpC,EAAS,qBAAsBsD,GAC/BtD,EAAS,kBAAmBuD,GAC5BvD,EAAS,mBAAqBwD,EAAW,GAC1C,CAACpB,EAAMkB,EAAUE,IAwDpB,OACI5C,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAC5B,KAAMA,EAAM6B,OAAQ5B,EAAa8B,UAAQ,EAACC,UAAU,eAAeC,WAAS,EAAAC,SAAA,EAC/EC,EAAAA,EAAAA,KAACP,EAAAA,EAAMQ,OAAM,CAACC,aAAW,EAACL,UAAU,mBAGpCL,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,KAAI,CAAAJ,SAAA,EACPC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gBAAeE,SAAC,uBAC9BP,EAAAA,EAAAA,MAAA,QAAMY,SAAUvB,GA/CVwB,IACdsC,QAAQC,IAAIvC,EAAS,UACrB,IAAIwC,EAAW,IAAIC,SAEnB,GADAD,EAASE,OAAO,OAAOT,GACd,MAANA,EAAW,CACV,IAAIvE,EAAO,IACJsC,EACH,SAAarC,GAEjB2E,QAAQC,IAAI7E,EAAK,QACjBI,GAAS6E,EAAAA,EAAAA,IAAyBjF,EAAKE,GAAM,KAErCE,EADK,aAANF,GACUuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,IAGjCF,GAAa,IAErB,MACIK,GAAS8E,EAAAA,EAAAA,IAA2BJ,GAAWK,IAC3C,IAAInF,EAAO,IACJsC,EACH,gBAAmB6C,EACnB,SAAalF,GAEjB2E,QAAQC,IAAI7E,EAAK,QACjBI,GAAS6E,EAAAA,EAAAA,IAAyBjF,EAAKE,GAAM,KAErCE,EADK,aAANF,GACUuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,IAGjCF,GAAa,IACd,IAEX,IAUgD4C,YAAU,EAAAX,SAAA,EAC9CP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EACxBC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,UAChCC,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CAACG,KAAK,OAAOnB,UAAU,eAAeoB,YAAY,qBACvDtC,EAAS,OAAQ,CACjBuC,SAAU,CACNC,OAAO,EACPC,QAAS,0BAMrBpB,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SACZ,QADYgC,EACvB9C,EAAO+B,YAAI,IAAAe,OAAA,EAAXA,EAAaX,WAElBpB,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,cAChCC,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CAACG,KAAK,qBAAqBnB,UAAU,eAAeoB,YAAY,yBACrEtC,EAAS,qBAAsB,CAC/BuC,SAAU,CACNC,OAAO,EACPC,QAAS,8BAOrBpB,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SACE,QADFiC,EACvB/C,EAAOmE,0BAAkB,IAAApB,OAAA,EAAzBA,EAA2BZ,WAEhC5B,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWE,SAAA,EACdC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,eAAcE,SAAE1B,EAAE,iBACxCmB,EAAAA,EAAAA,MAACmB,EAAAA,EAAK0C,OAAM,CAACxD,UAAU,+BACjBlB,EAAS,mBAAoB,CAC/BuC,SAAU,CACNC,OAAO,EACPC,QAAS,6BAEfrB,SAAA,EAEEP,EAAAA,EAAAA,MAAA,UAAQ2B,MAAM,GAAEpB,SAAA,CAAE,IAAE1B,EAAE,oBAAoB,QAC1CmB,EAAAA,EAAAA,MAAA,UAAQ2B,MAAM,UAAUmC,QAAUC,GAAMA,EAAEC,kBAAkBzD,SAAA,CAAC,KAAG1B,EAAE,aAClEmB,EAAAA,EAAAA,MAAA,UAAQ2B,MAAM,UAAUmC,QAAUC,GAAMA,EAAEC,kBAAkBzD,SAAA,CAAC,KAAG1B,EAAE,aAClEmB,EAAAA,EAAAA,MAAA,UAAQ2B,MAAM,UAAUmC,QAAUC,GAAMA,EAAEC,kBAAkBzD,SAAA,CAAC,KAAG1B,EAAE,aAClEmB,EAAAA,EAAAA,MAAA,UAAQ2B,MAAM,UAAUmC,QAAUC,GAAMA,EAAEC,kBAAkBzD,SAAA,CAAC,KAAG1B,EAAE,aAClEmB,EAAAA,EAAAA,MAAA,UAAQ2B,MAAM,UAAUmC,QAAUC,GAAMA,EAAEC,kBAAkBzD,SAAA,CAAC,YAAU1B,EAAE,mBAGzF2B,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SACE,QADFkC,EACvBhD,EAAOmE,0BAAkB,IAAAnB,OAAA,EAAzBA,EAA2Bb,WAIhCpB,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,WAChCC,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CAACa,KAAK,OAAO1D,GAAG,kBACzBgD,KAAK,qBACDrC,EAAS,kBAAmB,CAC5B8E,SAAWF,GAvHjBA,KAClB,MAAMjB,EAAOiB,EAAEG,OAAOC,MAAM,GAE5B,GADApB,EAAQD,GACJA,EAAM,CACN,MAAMsB,EAAS,IAAIC,WACnBD,EAAOE,UAAY,KACfpB,EAAiBkB,EAAOG,OAAO,EAEnCH,EAAOI,cAAc1B,EACzB,GA8GyC2B,CAAaV,GAC9BrC,SAAU,CACNC,OAAO,EACPC,QAAS,iCAGjBvB,UAAU,YACdL,EAAAA,EAAAA,MAACmB,EAAAA,EAAKwC,MAAK,CAACe,QAAQ,kBAAkBrE,UAAU,6BAA4BE,SAAA,EAACC,EAAAA,EAAAA,KAACmE,EAAAA,IAAQ,IAAG,8CACzFnE,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,OAAKoE,IAAK3B,GAAgCN,EAASkC,IAAI,WAAWC,MAAO,CAAEC,MAAO,QAASC,UAAW,iBAK9GxE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,UACxBC,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CACTC,KAAK,SACLC,KAAK,SACL9B,UAAU,oCACV+B,QAAQ,cACRC,SAAUtD,EACVuD,UAAWvD,cAKvB,C,yOClJhB,MAiZA,EAjZoBd,IAA4C,IAA3C,KAAEI,EAAI,YAAEC,EAAW,KAAEC,EAAI,GAAEC,EAAE,KAAEC,GAAMR,EACxD,MAAMU,GAAWC,EAAAA,EAAAA,OACVqG,EAAaC,IAAkBlC,EAAAA,EAAAA,UAAS,KACxCmC,EAAiBC,IAAsBpC,EAAAA,EAAAA,UAASzE,IACjD,WAAE8G,EAAU,YAAEtG,IAAgBC,EAAAA,EAAAA,KACjCC,GAAUA,EAAMC,iBAEb,SACJC,EAAQ,QACRmG,EAAO,aACPjG,EAAY,MACZC,EAAK,SACLF,EAAQ,QACRmG,EACA/F,WAAW,OAAEC,KACXI,EAAAA,EAAAA,OACE,OAAE2F,EAAM,OAAEjC,EAAM,OAAEkC,IAAWC,EAAAA,EAAAA,IAAc,CAC/CJ,UACA9D,KAAM,eAWR2B,QAAQC,IAAI7E,EAAM,QAClB4E,QAAQC,IAAIiC,EAAY,gBAGxB,MAAMM,EAZN,WACE,MAAMC,GAAc,IAAIC,MAAOC,cACzBC,EAAQ,GACd,IAAK,IAAIC,EAAO,KAAMA,GAAQJ,EAAaI,IACzCD,EAAME,KAAKD,GAEb,OAAOD,CACT,CAKmBG,IAEnBnG,EAAAA,EAAAA,YAAU,KACJxB,GACFA,EAAK4H,SAAQ,CAACC,EAAMC,KAClB9C,EAAO,CACL+C,gBAAiBF,EAAKE,gBACtBC,UAAWH,EAAKG,UAChBC,QAASJ,EAAKI,QACdC,WAAYL,EAAKK,WACjBC,SAAUN,EAAKM,SACfC,oBAAqBP,EAAKO,oBAC1BC,aAAkB,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAM5H,KAEtB0G,GAAgB2B,GAAc,IAAIA,EAAWT,EAAKO,sBAAqB,GAE3E,GACC,CAACxB,KAEJpF,EAAAA,EAAAA,YAAU,KACRpB,GAASmI,EAAAA,EAAAA,MAAgB,GACxB,IAEH,MAiEMC,EAAgBC,IACpB,MAAMC,EAAU,CACdC,MAAOF,GAETrI,GACEwI,EAAAA,EAAAA,IAAUF,GAAS,KACjBtI,GAASmI,EAAAA,EAAAA,MAAgB,IAE5B,EAGGM,GAAgB5G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAO,CAAC7I,GAAG,UAAS+B,SAAC,eACtC+G,GAAa9G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAO,CAAC7I,GAAG,UAAS+B,SAAC,YACzC4C,QAAQC,IAAIoC,EAAQ,sBACpB,MAAM+B,EAAOlC,EAAWmC,MAAMC,GAAWA,EAAO9F,QAAU6D,EAAOe,YAEjE,OADApD,QAAQC,IAAImE,EAAM,SAEhBvH,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJ5B,KAAMA,EACN6B,OAAQ5B,EACR8B,UAAQ,EACRsH,YAAU,EACVrH,UAAU,eACVC,WAAS,EACTqH,KAAK,KAAIpH,SAAA,EAETC,EAAAA,EAAAA,KAACP,EAAAA,EAAMQ,OAAM,CAACC,aAAW,EAACL,UAAU,mBAIpCL,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,KAAI,CAAAJ,SAAA,EACTC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gBAAeE,SAAC,eAC9BP,EAAAA,EAAAA,MAAA,QAAMY,SAAUvB,GAnDJsC,IAChB,IAAI,WAAEiG,GAAejG,EACjBpD,EAAO,CACTsJ,aAAcrJ,EACdoJ,WAAYA,GAGdjJ,GACEmJ,EAAAA,EAAAA,IAA2BvJ,EAAME,GAAM,KAEnCE,EADU,aAARF,GACOuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,IAE/BF,GAAa,IAEhB,IAmC0CiC,SAAA,CACpCiF,EAAOuC,KAAI,CAAC3B,EAAMC,KACjB7F,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BE,UACxCP,EAAAA,EAAAA,MAACgI,EAAAA,EAAG,CAAAzH,SAAA,EACFC,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAI3H,UACVP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,qBAChCC,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CACXa,KAAK,OACL7B,UAAU,eACVoB,YAAY,2BACRtC,EAAS,cAADgJ,OAAe9B,EAAK,oBAAoB,CAClD3E,UAAU,IAEZ0G,aAAchC,EAAKE,kBAEpB7G,GACCA,EAAOmI,YACPnI,EAAOmI,WAAWvB,IAClB5G,EAAOmI,WAAWvB,GAAOC,kBACvB9F,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAC,sCAMrCC,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,iBAChCC,EAAAA,EAAAA,KAAC6H,EAAAA,EAAe,CACdC,aAAW,EACXrE,SAAWsE,GACTnJ,EAAS,cAAD+I,OACQ9B,EAAK,cACnBkC,EAAMA,EAAI5G,MAAQ,IAMtB6G,eAAgBzB,EAChB0B,QAASpD,UAWf7E,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,aAQhCC,EAAAA,EAAAA,KAACkI,EAAAA,GAAU,CACTlH,KAAK,UACLnB,UAAU,gBACRiF,QAASA,EACXqD,MAAO,CACLjH,SAAU,uBAIZkH,OAAQC,IAAA,IAAC,MAAEC,EAAK,WAAEC,GAAYF,EAAA,OAC5BrI,EAAAA,EAAAA,KAACwI,EAAAA,QAAY,CACXlE,MAAO,CAAEC,MAAO,SAEhB1E,UAAU,iCACV4I,OAAQC,EAAAA,GACRC,gBAAkBC,IAChBjG,QAAQC,IAAIgG,EAAM,EAEpBX,QAAS,CACPY,MAAO,CAAC,gBAAiB,YAE3BpF,SAAWqF,IACTR,EAAM7E,SAASqF,EAAMpF,OAAOvC,MAAM,GAEpC,UAcVnB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,gBAChCP,EAAAA,EAAAA,MAACmB,EAAAA,EAAK0C,OAAM,IACN1E,EAAS,cAADgJ,OAAe9B,EAAK,eAAe,CAC7C3E,SAAU,yBACVG,SAAU,CACR0H,gBAAkB5H,IAChB,MAAM6H,EAAUlK,EAAM,cAAD6I,OACL9B,EAAK,cAErB,OACGmD,GACDC,SAAS9H,GAAS8H,SAASD,IAItB,uCAAuC,KAGlDjJ,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UAAQ6B,UAAQ,EAACqH,UAAQ,EAAAnJ,SAAC,uBAGf,OAAVoF,QAAU,IAAVA,OAAU,EAAVA,EAAYoC,KAAK3B,IAChB5F,EAAAA,EAAAA,KAAA,UAAmBmB,MAAOyE,EAAK7F,SAC5B6F,GADUA,QAKhB3G,GACCA,EAAOmI,YACPnI,EAAOmI,WAAWvB,IAClB5G,EAAOmI,WAAWvB,GAAOI,aACvBjG,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SACzBd,EAAOmI,WAAWvB,GAAOI,WAAW7E,eAK7CqD,EAAYoB,GAiCZ,IAhCA7F,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAC,cAChCP,EAAAA,EAAAA,MAACmB,EAAAA,EAAK0C,OAAM,IACN1E,EAAS,cAADgJ,OAAe9B,EAAK,aAAa,CAC3C3E,SAAU,CACRC,OAAOsD,EAAYoB,GACnBzE,QAAS,0BAGbS,SAAU4C,EAAYoB,GAAO9F,SAAA,EAE7BC,EAAAA,EAAAA,KAAA,UAAQ6B,UAAQ,EAACqH,UAAQ,EAAAnJ,SAAC,uBAGf,OAAVoF,QAAU,IAAVA,OAAU,EAAVA,EAAYoC,KAAK3B,IAChB5F,EAAAA,EAAAA,KAAA,UAAmBmB,MAAOyE,EAAK7F,SAC5B6F,GADUA,QAKhB3G,GACCA,EAAOmI,YACPnI,EAAOmI,WAAWvB,IAClB5G,EAAOmI,WAAWvB,GAAOK,WACvBlG,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SACzBd,EAAOmI,WAAWvB,GAAOK,SAAS9E,gBAQ/CpB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAI3H,UACVP,EAAAA,EAAAA,MAAA,OAAKK,UAAU,yDAAwDE,SAAA,EACrEP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,kCAAiCE,SAAA,EACrDC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwI,MAAK,CACTzH,KAAK,WACL7B,UAAU,WACV7B,GAAE,uBAAA2J,OAAyB9B,MACvBlH,EAAS,cAADgJ,OAAe9B,EAAK,yBAChCuD,eAAgBxD,EAAKO,oBACrB1C,SAAWF,GA1RI8F,EAAC9F,EAAGsC,KACvC,GAAItC,EAAEG,OAAO4F,QAAS,CACHxK,EAAM,cAAD6I,OAAe9B,EAAK,eAA1C,MACM0D,EAA0B,IAAI9E,GACpC8E,EAAwB1D,IAAS,EACjCnB,EAAe6E,GACf3K,EAAS,cAAD+I,OAAe9B,EAAK,cAAc,KAC5C,KAAO,CACL,MAAMK,EAAWpH,EAAM,cAAD6I,OAAe9B,EAAK,eACpC0D,EAA0B,IAAI9E,GACpC8E,EAAwB1D,IAAS,EACjCnB,EAAe6E,GACf3K,EAAS,cAAD+I,OAAe9B,EAAK,cAAcK,EAC5C,GA6QqCmD,CAA6B9F,EAAGsC,MAEnD7F,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CACTe,QAAO,uBAAAyD,OAAyB9B,GAChChG,UAAU,eAAcE,SACzB,2BAKQ,IAAV8F,IACC7F,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACwJ,EAAAA,EAAc,CACbC,UAAU,SACVC,QAAS9C,EAAc7G,UAEvBC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CACL/H,QAAQ,SACR0B,QAASA,IA9QFsG,EAAC5L,EAAI6L,EAAOhE,KAC3CZ,EAAOY,GACH7H,GACFG,GACE2L,EAAAA,EAAAA,IAAkB9L,EAAI6L,GAAO,KAEzB1L,EADU,aAARF,GACOuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBoJ,GAC/B,IAIN,EAkQ0BD,CACEhE,EAAKmE,OACD,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,aACNP,GAEH9F,UAEDC,EAAAA,EAAAA,KAACgK,EAAAA,IAAU,mBAjNqBpE,EAAK5H,OA2NvDgC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAC5BC,EAAAA,EAAAA,KAACwJ,EAAAA,EAAc,CAACC,UAAU,SAASC,QAAS5C,EAAW/G,UACrDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CACL9J,UAAU,uBAEVyD,QAnTQ2G,gBACElF,KAEpBhC,EAAO,CACL+C,gBAAiB,GACjBC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,SAAU,GACVC,qBAAqB,GAEzB,EAwSmCpG,SACxB,WAKLC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,UAC1BC,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CACXC,KAAK,SACLC,KAAK,SACL9B,UAAU,oCACV+B,QAAQ,cACRC,SAAUtD,EACVuD,UAAWvD,cAKb,C,qNChaZ,MAwRA,EAxR0Bd,IAA4C,IAA3C,KAAEI,EAAI,YAAEC,EAAW,KAAEC,EAAI,GAAEC,EAAE,KAAEC,GAAMR,EAC9D,MAAOkH,EAAiBC,IAAsBpC,EAAAA,EAAAA,UAASzE,IAChDmM,EAAkBC,IAAuB3H,EAAAA,EAAAA,UAAS,IACnDrE,GAAWC,EAAAA,EAAAA,OACX,SACJO,EAAQ,QACRmG,EAAO,SACPlG,EAAQ,MACRE,EAAK,aACLD,EAAY,MACZuL,EAAK,QACLrF,EAAO,SACPsF,EACArL,WAAW,OAAEC,KACXI,EAAAA,EAAAA,OACE,EAAEhB,IAAOC,EAAAA,EAAAA,OACT,OAAE0G,EAAM,OAAEjC,EAAM,OAAEkC,EAAM,QAAEqF,IAAYpF,EAAAA,EAAAA,IAAc,CACxDJ,UACA9D,KAAM,UAEF,YAACzC,IAAgBC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,iBAElDa,EAAAA,EAAAA,YAAU,KACJxB,IACE,OAAJA,QAAI,IAAJA,GAAAA,EAAM4H,SAAQ,CAACC,EAAMC,KAAW,IAAD0E,EAAAC,EAC7BzH,EAAO,CACL0H,aAAc7E,EAAK6E,aACnBC,UAAW9E,EAAK8E,UAChBC,YAAa/E,EAAK+E,YAClBC,WAA2B,QAAjBL,EAAE3E,EAAKgF,kBAAU,IAAAL,OAAA,EAAfA,EAAiBM,MAAM,EAAG,IACtCC,SAAuB,QAAfN,EAAE5E,EAAKkF,gBAAQ,IAAAN,OAAA,EAAbA,EAAeK,MAAM,EAAG,IAClCE,iBAAkBnF,EAAKmF,iBACvBC,cAAepF,EAAK5H,KAGtBmM,GAAoB9D,GAAa,IAAIA,EAAWT,EAAKmF,mBAAkB,IAE3E,GACC,CAACpG,IAEJ,MA6DMiC,GACJ5G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAO,CAAC7I,GAAG,UAAS+B,SACnB1B,EAAE,eAGAyI,GACJ9G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAO,CAAC7I,GAAG,UAAS+B,SAClB1B,EAAE,YAKP,OADFsE,QAAQC,IAAIoC,EAAO,gBAEfxF,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJ5B,KAAMA,EACN6B,OAAQ5B,EACR8B,UAAQ,EACRC,UAAU,eACVsH,KAAK,KACLrH,WAAS,EACToH,YAAU,EAAAnH,SAAA,EAEVC,EAAAA,EAAAA,KAACP,EAAAA,EAAMQ,OAAM,CAACC,aAAW,EAACL,UAAU,mBAGpCL,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,KAAI,CAAAJ,SAAA,EACTP,EAAAA,EAAAA,MAAA,MAAIK,UAAU,gBAAeE,SAAA,CAAE1B,EAAE,cAAc,OAAKA,EAAE,eACtDmB,EAAAA,EAAAA,MAAA,QAAMY,SAAUvB,GAxEJsC,IAChB,IAAI,KAAE8J,GAAS9J,EACXpD,EAAK,CACPsJ,aAAarJ,EACbkN,YAAYD,GAEd9M,GAASgN,EAAAA,EAAAA,IAA4BpN,EAAKE,GAAK,KAE3CE,EADO,aAANF,GACQuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,IAE/BF,GAAa,IACZ,IA2DyC4C,YAAU,EAAAX,SAAA,CAC/CiF,EAAOuC,KAAI,CAAC3B,EAAMC,KAAK,IAAAuF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACtB7L,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BE,UACxCP,EAAAA,EAAAA,MAACgI,EAAAA,EAAG,CAAAzH,SAAA,EACFC,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAI3H,UACVP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAE1B,EAAE,kBACnC2B,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CACXa,KAAK,OACL7B,UAAU,eACVmB,KAAK,eACLC,YAAY,wBACRtC,EAAS,QAADgJ,OAAS9B,EAAK,kBAAkB,CAC1C3E,SAAU,gCAGP,OAANjC,QAAM,IAANA,GAAY,QAANmM,EAANnM,EAAQgM,YAAI,IAAAG,GAAS,QAATC,EAAZD,EAAevF,UAAM,IAAAwF,OAAf,EAANA,EAAuBZ,gBACtBzK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAEd,EAAOgM,KAAKpF,GAAO4E,aAAarJ,gBAIpEpB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAE1B,EAAE,kBACnC2B,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CACXa,KAAK,OACL7B,UAAU,eACVmB,KAAK,YACLC,YAAY,wBACRtC,EAAS,QAADgJ,OAAS9B,EAAK,eAAe,CACvC3E,SAAU,gCAGP,OAANjC,QAAM,IAANA,GAAY,QAANqM,EAANrM,EAAQgM,YAAI,IAAAK,GAAS,QAATC,EAAZD,EAAezF,UAAM,IAAA0F,OAAf,EAANA,EAAuBb,aACtB1K,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAEd,EAAOgM,KAAKpF,GAAO6E,UAAUtJ,gBAIjEpB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAE1B,EAAE,qBACnC2B,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CACXa,KAAK,OACLZ,GAAG,WACHC,KAAM,EACNlB,UAAU,eACVoB,YAAY,2BACRtC,EAAS,QAADgJ,OAAS9B,EAAK,iBAAiB,CACzC3E,SAAU,oCAGP,OAANjC,QAAM,IAANA,GAAY,QAANuM,EAANvM,EAAQgM,YAAI,IAAAO,GAAS,QAATC,EAAZD,EAAe3F,UAAM,IAAA4F,OAAf,EAANA,EAAuBd,eACtB3K,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAEd,EAAOgM,KAAKpF,GAAO8E,YAAYvJ,gBAInEpB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAE1B,EAAE,gBACnC2B,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CACXa,KAAK,OACL7B,UAAU,eACVoB,YAAY,mBACZ6K,KAAK,IAAIzG,MAAO0G,cAAcC,MAAM,KAAK,MACrCrN,EAAS,QAADgJ,OAAS9B,EAAK,gBAAgB,CACxC3E,SAAU,yBACVG,SAAU,CACR4K,UAAY9K,IACV,MAAM+K,EAAUpN,EAAM,QAAD6I,OAAS9B,EAAK,eACnC,OAAKqG,GAAW/K,GAAS+K,GAGlB,oCAAoC,QAK5C,OAANjN,QAAM,IAANA,GAAY,QAANyM,EAANzM,EAAQgM,YAAI,IAAAS,GAAS,QAATC,EAAZD,EAAe7F,UAAM,IAAA8F,OAAf,EAANA,EAAuBf,cACtB5K,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAEd,EAAOgM,KAAKpF,GAAO+E,WAAWxJ,gBAIlEpB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,IAAG3H,UACTP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,UAASE,SAAE1B,EAAE,cACnC2B,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CACXa,KAAK,OACL7B,UAAU,eACVoB,YAAY,iBACZ6K,KAAK,IAAIzG,MAAO0G,cAAcC,MAAM,KAAK,MACrCrN,EAAS,QAADgJ,OAAS9B,EAAK,cAAc,CACtC3E,SAAU,CACRC,OAAO+I,EAAiBrE,GACxBzE,QAAS,0BAGbS,SAAUqI,EAAiBrE,MAEtB,OAAN5G,QAAM,IAANA,GAAY,QAAN2M,EAAN3M,EAAQgM,YAAI,IAAAW,GAAS,QAATC,EAAZD,EAAe/F,UAAM,IAAAgG,OAAf,EAANA,EAAuBf,YACtB9K,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAEd,EAAOgM,KAAKpF,GAAOiF,SAAS1J,gBAIhEpB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAI3H,UACVP,EAAAA,EAAAA,MAAA,OAAKK,UAAU,yDAAwDE,SAAA,EACrEP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,kCAAiCE,SAAA,EACrDC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwI,MAAK,CACTzH,KAAK,WACL7B,UAAU,cACNlB,EAAS,QAADgJ,OAAS9B,EAAK,sBAAsB,CAC9C3E,UAAU,IAEZuC,SAAWF,GAxMI8F,EAAC9F,EAAGsC,KACvC,GAAItC,EAAEG,OAAO4F,QAAS,CACFxK,EAAM,QAAD6I,OAAS9B,EAAK,uBAArC,MACM0D,EAA0B,IAAIW,GACpCX,EAAwB1D,IAAS,EACjCsE,EAAoBZ,GACpB3K,EAAS,QAAD+I,OAAS9B,EAAK,cAAc,GACtC,KAAO,CACa/G,EAAM,QAAD6I,OAAS9B,EAAK,uBAArC,MACM0D,EAA0B,IAAIW,GACpCX,EAAwB1D,IAAS,EACjCsE,EAAoBZ,EACtB,GA4LqCF,CAA6B9F,EAAGsC,MAEnD7F,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,eAAcE,SAAE1B,EAAE,yBAE/B,IAAVwH,IACC7F,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACwJ,EAAAA,EAAc,CAACC,UAAU,SAASC,QAAS9C,EAAc7G,UACxDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAAC/H,QAAQ,SAAS/B,UAAU,UAAUyD,QAASA,IAhK5C6I,EAAEC,EAAOvG,KACzCZ,EAAOY,GACHuG,GACFjO,GAASkO,EAAAA,EAAAA,IAAiBD,EAAOpO,GAAI,KAE7BG,EADQ,aAARF,GACSuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,GACjC,IAIN,EAoJkFmO,CAA0BvG,EAAKoF,cAAgBnF,GAC1G9F,UAACC,EAAAA,EAAAA,KAACgK,EAAAA,IAAU,mBAtHqBpE,EAAK5H,GA6H/C,KAERgC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAC5BC,EAAAA,EAAAA,KAACwJ,EAAAA,EAAc,CAACC,UAAU,SAASC,QAAS5C,EAAW/G,UACrDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAAC9J,UAAU,qBAAqByD,QA1L9B2G,gBACGlF,KAEpBhC,EAAO,CACL0H,aAAc,GACdC,UAAW,GACXC,YAAa,GACbC,WAAY,GACZE,SAAU,GACVC,kBAAkB,GAEtB,EA+KuEhL,SAAC,WAKlEC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,UAC1BC,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CACXC,KAAK,SACLC,KAAK,SACL9B,UAAU,oCACV+B,QAAQ,cACRC,SAAUtD,EACVuD,UAAWvD,cAKb,C,2OClQZ,MAmYA,EA9XuBd,IAA4C,IAA3C,KAAEI,EAAI,YAAEC,EAAW,KAAEC,EAAI,GAAEC,EAAE,KAAEC,GAAMR,EAC5C6O,aAAaC,QAAQ,UAApC,MACOC,EAAgBC,IAAqBjK,EAAAA,EAAAA,aACtC,YAAEjE,IAAgBC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,iBAC9CuJ,EAASyE,IAAclK,EAAAA,EAAAA,UAAS,KAChCmK,EAAcC,IAAmBpK,EAAAA,EAAAA,UAAS,KAC3C,UAAEqK,IAAcrO,EAAAA,EAAAA,KAAaC,GAAUA,EAAM4D,aAC7ClE,GAAWC,EAAAA,EAAAA,OACX,EAAEC,IAAMC,EAAAA,EAAAA,MACRwO,EAAkBD,EAAUtF,KAAK3B,IAC9B,CAAEzE,MAAOyE,EAAK5H,GAAI+O,MAAOnH,EAAKc,WAEjC,SACJ/H,EAAQ,QACRmG,EAAO,aACPjG,EAAY,SACZD,EAAQ,YACRG,EAAW,MACXD,EAAK,MACLsL,EAAK,QACLrF,EAAO,SACPsF,EACArL,WAAW,OAAEC,KACXI,EAAAA,EAAAA,IAAQ,CACV2N,cAAe,CACbC,OAAQ,CACN,CACEC,MAAO,GACP9K,WAAY,QAMpBO,QAAQC,IAAI7E,EAAM,QAElB,MAAM,OAAEiH,EAAM,OAAEjC,EAAM,OAAEkC,EAAM,QAAEqF,IAAYpF,EAAAA,EAAAA,IAAc,CACxDJ,UACA9D,KAAM,SACNmH,MAAO,CACLjH,SAAU7C,EAAE,wBAGhBkB,EAAAA,EAAAA,YAAU,KAER,GADAqN,EAAgBE,GACR,OAAJ/O,QAAI,IAAJA,GAAAA,EAAMuD,OAAQ,CAChB,IAAI6L,EAAgB,GACpBA,EAAoB,OAAJpP,QAAI,IAAJA,OAAI,EAAJA,EAAMwJ,KAAK6F,IACzB,MAAMF,EAAQ,CACZH,MAAOK,EAAQF,MACf/L,MAAOiM,EAAQF,MACflP,GAAIoP,EAAQpP,IAEd,MAAO,IACFoP,EACHF,MAAOA,EACR,IAEHtO,EAAS,SAAUuO,EACrB,MACEvO,EAAS,SAAU,CAAC,CAAEsO,MAAO,GAAI9K,WAAY,KAC/C,GACC,CAACjE,IAEJ,MA2FM2I,GAAa9G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAO,CAAC7I,GAAG,UAAS+B,SAAE1B,EAAE,YAyD5C,OACEmB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJ5B,KAAMA,EACN6B,OAAQ5B,EACR8B,UAAQ,EACRC,UAAU,eACVC,WAAS,EAAAC,SAAA,EAETC,EAAAA,EAAAA,KAACP,EAAAA,EAAMQ,OAAM,CAACC,aAAW,EAACL,UAAU,mBACpCL,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,KAAI,CAAAJ,SAAA,EACTC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gBAAeE,SAAE1B,EAAE,gBACjCmB,EAAAA,EAAAA,MAAA,QAAMY,SAAUvB,GAvDJwB,IAAY,IAADgN,EAC3B,IAAIJ,EAAS,GACbA,EAAe,OAAN5M,QAAM,IAANA,GAAc,QAARgN,EAANhN,EAAQ4M,cAAM,IAAAI,OAAR,EAANA,EAAgB9F,KAAIc,IAA4B,IAA3B,MAAE6E,EAAK,WAAE9K,GAAYiG,EACjD,MAAO,CAAE6E,MAAOA,EAAMH,MAAO3K,WAAYA,EAAY,IAEvD,MAAMqE,EAAU,CACdnG,QAAStC,EACTiP,OAAQ,IAAIA,IAEd9O,GACEmP,EAAAA,EAAAA,IAAsB7G,EAASxI,GAAM,KAEjCE,EADU,aAARF,GACOuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,IAE/BF,GAAa,IAEhB,IAqC0CiC,SAAA,CACpCiF,EAAOuC,KAAI,CAACe,EAAOzC,KAAK,IAAA0H,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnQ,EAAA,OACvB6B,EAAAA,EAAAA,MAACuO,EAAAA,SAAQ,CAAAhO,SAAA,EACPP,EAAAA,EAAAA,MAAA,OAAKK,UAAU,uBAAsBE,SAAA,EACnCC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAAzH,UACFC,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAI3H,UACVP,EAAAA,EAAAA,MAACmB,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,eAAcE,SACjC1B,EAAE,iBAEL2B,EAAAA,EAAAA,KAAC6H,EAAAA,EAAe,IACVlJ,EAAS,UAADgJ,OAAW9B,EAAK,UAAU,CACpC3E,SAAU,CACRC,OAAO,EACPC,QAAS/C,EAAE,uBAGfyJ,aAAW,EACXG,QAAS0E,EACTlJ,SAAWuK,IACTrL,QAAQC,IAAIoL,EAAU,YACtBvB,EAAkBuB,GAClBpP,EAAS,UAAD+I,OAAW9B,EAAK,UAAUmI,GAClCjP,EAAY,UAAD4I,OAAW9B,EAAK,UAAS,EAEtCmC,eAAiBD,IAtFhBkG,EAAClG,EAAKlC,KAC3B,MAAMqI,EAxKiB,CACzBnB,MADoBA,EAwKahF,EAtKjC5G,MAAO4L,EAAMoB,cAAc7D,QAAQ,MAAO,KAFtByC,MAyKlBH,GAAiBwB,GAAS,IAAIA,EAAMF,KACpCtP,EAAS,UAAD+I,OAAW9B,EAAK,UAAUqI,GAClCzB,EAAkByB,EAAU,EAmFND,CAAelG,EAAKlC,EAAM,EAE5B1E,MAAOrC,EAAM,UAAD6I,OAAW9B,EAAK,qBAK7B,OAAN5G,QAAM,IAANA,GAAc,QAARsO,EAANtO,EAAQgO,cAAM,IAAAM,GAAS,QAATC,EAAdD,EAAiB1H,UAAM,IAAA2H,OAAjB,EAANA,EAAyBN,SACxBlN,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SACnB,OAANd,QAAM,IAANA,GAAqB,QAAfwO,EAANxO,EAAQgO,OAAOpH,UAAM,IAAA4H,GAAO,QAAPC,EAArBD,EAAuBP,aAAK,IAAAQ,OAAtB,EAANA,EAA8BtM,cAIrC5B,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWE,SAAA,EACxBC,EAAAA,EAAAA,KAACW,EAAAA,EAAKwC,MAAK,CAACtD,UAAU,eAAcE,SACjC1B,EAAE,iBAELmB,EAAAA,EAAAA,MAACmB,EAAAA,EAAK0C,OAAM,IACN1E,EAAS,UAADgJ,OAAW9B,EAAK,eAAe,CACzC3E,SAAU,CACRC,OAAO,EACPC,QAAS/C,EAAE,uBAGfwB,UAAU,4BACVE,SAAA,EAEAP,EAAAA,EAAAA,MAAA,UAAQ2B,MAAM,GAAEpB,SAAA,CAAC,IAAE1B,EAAE,oBAAoB,OACxCgQ,EAAAA,GAAmB9G,KAAI,CAAA+G,EAAmBzI,KAAK,IAAvB,MAAEkH,EAAK,MAAE5L,GAAOmN,EAAA,OACvC9O,EAAAA,EAAAA,MAAA,UAAQ2B,MAAOA,EAAMpB,SAAA,CAClBgN,EAAM,IAAE1O,EAAE,WADcwH,EAElB,QAGN,OAAN5G,QAAM,IAANA,GAAc,QAAR0O,EAAN1O,EAAQgO,cAAM,IAAAU,GAAS,QAATC,EAAdD,EAAiB9H,UAAM,IAAA+H,OAAjB,EAANA,EAAyBxL,cACxBpC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SACnB,OAANd,QAAM,IAANA,GAAqB,QAAf4O,EAAN5O,EAAQgO,OAAOpH,UAAM,IAAAgI,GAAY,QAAZC,EAArBD,EAAuBzL,kBAAU,IAAA0L,OAA3B,EAANA,EAAmC1M,aAIb,KAAb,QAAfzD,EAAAmB,EAAM,iBAAS,IAAAnB,OAAA,EAAfA,EAAiB2D,UAChBtB,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAK7H,UAAU,6BAA4BE,UACjDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CACL/H,QAAQ,SACR0B,QAASA,KAAA,IAAAiL,EAAA,MAzNNC,EAACC,EAAU5I,KAC9BZ,EAAOY,GACH4I,GACFtQ,GACEuQ,EAAAA,EAAAA,IAAY1Q,EAAIyQ,GAAU,KAEtBtQ,EADU,aAARF,GACOuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,IAE/BF,GAAa,IAGnB,EA4M+B0Q,CAAkB,OAALlG,QAAK,IAALA,GAAY,QAAPiG,EAALjG,EAAO4E,aAAK,IAAAqB,OAAP,EAALA,EAAcvQ,GAAI6H,EAAM,EAAC9F,UAErDC,EAAAA,EAAAA,KAAC2O,EAAAA,IAAO,UAtEDrG,EAAMtK,GA0EV,KAEbgC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAC5BC,EAAAA,EAAAA,KAACwJ,EAAAA,EAAc,CAACC,UAAU,SAASC,QAAS5C,EAAW/G,UACrDC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAAC9J,UAAU,qBAAqByD,QA/O9BsL,MAKJ,IAJG9P,EAAM,UACA+P,WACrBzB,GAAmC,KAAvBA,EAAQhL,YAAuC,KAAlBgL,EAAQF,SAGlDnK,EAAO,CACLmK,MAAO,GACP9K,WAAY,IAEhB,EAqOuErC,SAAC,WAKlEC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,UAC1BC,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CACXC,KAAK,SACLC,KAAK,SACL9B,UAAU,oCACV+B,QAAQ,cACRC,SAAUtD,EACVuD,UAAWvD,cA+Db,C,yKC9YZ,MA6GA,EAxGoBd,IAA4C,IAA3C,KAAEI,EAAI,YAAEC,EAAW,KAAEC,EAAI,GAAEC,EAAE,KAAEC,GAAMR,EACxD,MAAM,UAAEoP,IAAcrO,EAAAA,EAAAA,KAAaC,GAAUA,EAAM4D,cAC5CmK,EAAgBC,IAAqBjK,EAAAA,EAAAA,UAAS,KAC/C,YAAEjE,IAAgBC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,gBAC/CoO,EAAkBD,EAAUtF,KAAK3B,IAC9B,CAAEzE,MAAOyE,EAAK5H,GAAI+O,MAAOnH,EAAKc,WAEhCoI,EAAWC,IAAiBvM,EAAAA,EAAAA,UAASsK,GAEtC3O,GAAWC,EAAAA,EAAAA,OACX,EAAEC,IAAMC,EAAAA,EAAAA,MAEdqE,QAAQC,IAAI7E,EAAM,aAElBwB,EAAAA,EAAAA,YAAU,KACR,GAAIxB,EAAM,CACR,MAAMiR,EAAY,OAAJjR,QAAI,IAAJA,OAAI,EAAJA,EAAMwJ,KAAK0H,IAAI,CAC3BlC,MAAOkC,EAAK/B,MACZ/L,MAAO8N,EAAK/B,MACZlP,GAAIiR,EAAKjR,OAEXyO,EAAkBuC,EACpB,IACC,CAACjR,IACJ4E,QAAQC,IAAI4J,EAAgB,kBAkC5B,OACEhN,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJ5B,KAAMA,EACN6B,OAAQ5B,EACR8B,UAAQ,EACRC,UAAU,eACVC,WAAS,EAAAC,SAAA,EAETC,EAAAA,EAAAA,KAACP,EAAAA,EAAMQ,OAAM,CAACC,aAAW,EAACL,UAAU,mBACpCL,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,KAAI,CAAAJ,SAAA,EACTC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gBAAeE,SAAE1B,EAAE,aACjCmB,EAAAA,EAAAA,MAAA,QAAMY,SA3CUmD,IACpBA,EAAE2L,iBACF,IAAIC,EAAkB,GAEtBA,EAAkB3C,EAAejF,KAAK3B,IAC7B,CAAEsH,MAAOtH,EAAKmH,MAAO3K,WAAY,OAG1C,IAAIrE,EAAO,CACTkP,OAAQkC,EACR7O,SAAUtC,GAEZG,GACEmP,EAAAA,EAAAA,IAAsBvP,EAAME,GAAM,KAE9BE,EADW,cAATF,GACOuC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,IAAoBzC,IAE/BF,GAAa,IAEhB,EAsBgCiC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uBAAsBE,UACnCC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAAzH,UACFC,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAI3H,UACVC,EAAAA,EAAAA,KAACW,EAAAA,EAAKC,MAAK,CAACf,UAAU,OAAME,UAC1BC,EAAAA,EAAAA,KAAC6H,EAAAA,EAAe,CACduH,SAAO,EACPtH,aAAW,EACX9G,KAAMwL,EACN/I,SAAWuK,IACTvB,EAAkBuB,EAAS,EAE7BhG,eA/BMD,IACtBsH,YAAW,KACT,MAAMnB,EAzDe,CACzBnB,MADoBA,EAyDehF,EAvDnC5G,MAAO4L,EAAMoB,cAAc7D,QAAQ,MAAO,KAFtByC,MA0DhBN,GAAmB2B,GAAS,IAAIA,EAAMF,KACtCa,GAAeX,GAAS,IAAIA,EAAMF,IAAW,GAC5C,IAAK,EA2BQjG,QAAS6G,EACT3N,MAAOqL,aAMjBxM,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,UAC1BC,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CACXC,KAAK,SACLC,KAAMtD,EAAE,UACRwB,UAAU,oCACV+B,QAAQ,cACRC,SAAUtD,EACVuD,UAAWvD,cAKb,C,kLC9GZ,MAgIA,EAtHyBd,IAA4C,IAA3C,KAAEI,EAAI,YAAEC,EAAW,KAAEC,EAAI,GAAEC,EAAE,KAAEC,GAAMR,EAC7D,MAAMU,GAAWC,EAAAA,EAAAA,OACVuG,EAAiBC,IAAsBpC,EAAAA,EAAAA,UAASzE,IACjD,YAAEQ,EAAW,UAAE+Q,IAAc9Q,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,iBACxD,EAAEL,IAAMC,EAAAA,EAAAA,OACR,SACJK,EAAQ,QACRmG,EAAO,SACPlG,EAAQ,MACRE,EAAK,aACLD,EAAY,MACZuL,EAAK,QACLrF,EAEA/F,WAAW,OAAEC,KACXI,EAAAA,EAAAA,OACE,OAAE2F,EAAM,OAAEjC,EAAM,OAAEkC,EAAM,QAAEqF,IAAYpF,EAAAA,EAAAA,IAAc,CACxDJ,UACA9D,KAAM,UAIRzB,EAAAA,EAAAA,YAAU,KACJxB,IACE,OAAJA,QAAI,IAAJA,GAAAA,EAAM4H,SAAQ,CAACC,EAAMC,KACnB9C,EAAO,CACLgH,OAAQnE,EAAK5H,GACbkF,IAAK0C,EAAK1C,IACVlC,KAAM4E,EAAK5E,KACXuO,KAAM3J,EAAK2J,MACX,IAEN,GACC,CAAC5K,IA+BJ,OACEnF,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAC5B,KAAMA,EAAM6B,OAAQ5B,EAAa8B,UAAQ,EAACC,UAAU,eAAeC,WAAS,EAAAC,SAAA,EACjFC,EAAAA,EAAAA,KAACP,EAAAA,EAAMQ,OAAM,CAACC,aAAW,EAACL,UAAU,mBAGpCL,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,KAAI,CAAAJ,SAAA,EACTC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gBAAeE,SAAE1B,EAAE,qBACjCmB,EAAAA,EAAAA,MAAA,QAAMY,SAAUvB,GAjCJsC,IAChB,IAAI,KAAE8J,GAAS9J,EACf,GAAa,cAATlD,EAAsB,CACxB,IAAIF,EAAK,CACP,aAAgBkN,EAChB,QAAYjN,GAEdG,GAASqR,EAAAA,EAAAA,GAAwBzR,GAAM,KACrCI,GAASqC,EAAAA,EAAAA,OACT1C,GAAa,IAEjB,KAAO,CACL,IAAIC,EAAK,CACP,aAAgBkN,EAChB,QAAYjN,GAEdG,GAASqR,EAAAA,EAAAA,GAAwBzR,GAAM,KACrCI,GAASsC,EAAAA,EAAAA,IAAoBzC,IAC7BF,GAAa,IAEjB,KAa4C4C,YAAU,EAAAX,SAAA,CAEzC,OAANiF,QAAM,IAANA,OAAM,EAANA,EAAQuC,KAAI,CAACkI,EAAK5J,KACjB7F,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uBAAsBE,UACnCC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAAzH,UACFC,EAAAA,EAAAA,KAACyH,EAAAA,EAAG,CAACC,GAAG,KAAI3H,UACVP,EAAAA,EAAAA,MAACkQ,EAAAA,EAAU,CAAC7P,UAAU,OAAME,SAAA,EAC1BC,EAAAA,EAAAA,KAAC0P,EAAAA,EAAWC,KAAI,CAAC3R,GAAG,eAAc+B,SAAE0P,EAAIF,QACxCvP,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,QAAO,CAACa,KAAK,OAAO7B,UAAU,WAAWoB,YAAY,eACrDtC,EAAS,QAADgJ,OAAS9B,EAAK,SAAS,CACjC3E,SAAU,CACRC,OAAO,EACPC,QAAS,mBAEXwO,QAAS,CACPzO,MAAO,iFACPC,QAAS,6CAIdnC,GAAUA,EAAOgM,MAAQhM,EAAOgM,KAAKpF,IAAU5G,EAAOgM,KAAKpF,GAAO3C,MACjElD,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAEd,EAAOgM,KAAKpF,GAAO3C,IAAI9B,kBAlBpBqO,EAAIzR,OAyBjDgC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,UAG1BC,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CACXC,KAAK,SACLC,KAAK,iBACL9B,UAAU,oCACV+B,QAAQ,cACRC,SAAUyN,EACVxN,UAAWwN,cAMb,C,kHC/HZ,MAAMO,EAA8BC,EAAAA,YAAiB,CAAArS,EAKlDsS,KAAQ,IAL2C,UACpDlQ,EAAS,SACTmQ,EACAlP,GAAImP,EAAY,UACbC,GACJzS,EAEC,OADAuS,GAAWG,EAAAA,EAAAA,IAAmBH,EAAU,qBACpBhQ,EAAAA,EAAAA,KAAKiQ,EAAW,CAClCF,IAAKA,EACLlQ,UAAWuQ,IAAWvQ,EAAWmQ,MAC9BE,GACH,IAEJL,EAAeQ,YAAc,iBAC7B,UCEMX,EAA0BI,EAAAA,YAAiB,CAAArS,EAQ9CsS,KAAQ,IARuC,SAChDC,EAAQ,KACR7I,EAAI,cACJmJ,EAAa,UACbzQ,EAEAiB,GAAImP,EAAY,SACbC,GACJzS,EACCuS,GAAWG,EAAAA,EAAAA,IAAmBH,EAAU,eAIxC,MAAMO,GAAeC,EAAAA,EAAAA,UAAQ,KAAM,CAAG,IAAG,IACzC,OAAoBxQ,EAAAA,EAAAA,KAAKyQ,EAAAA,EAAkBC,SAAU,CACnDvP,MAAOoP,EACPxQ,UAAuBC,EAAAA,EAAAA,KAAKiQ,EAAW,CACrCF,IAAKA,KACFG,EACHrQ,UAAWuQ,IAAWvQ,EAAWmQ,EAAU7I,GAAQ,GAAJQ,OAAOqI,EAAQ,KAAArI,OAAIR,GAAQmJ,GAAiB,qBAE7F,IAEJZ,EAAWW,YAAc,aACzB,QAAeM,OAAOC,OAAOlB,EAAY,CACvCC,KAAME,EACNgB,MAhCsBX,IAAsBlQ,EAAAA,EAAAA,KAAK6P,EAAgB,CACjE9P,UAAuBC,EAAAA,EAAAA,KAAK8Q,EAAAA,EAAgB,CAC1CpP,KAAM,WACHwO,MA8BLa,SAvCyBb,IAAsBlQ,EAAAA,EAAAA,KAAK6P,EAAgB,CACpE9P,UAAuBC,EAAAA,EAAAA,KAAK8Q,EAAAA,EAAgB,CAC1CpP,KAAM,cACHwO,O","sources":["components/common/Modals/AboutCVModal.jsx","components/common/Modals/DeveloperDetails.jsx","components/common/Modals/EducationModal.jsx","components/common/Modals/ExperienceCVModal.jsx","components/common/Modals/ExpertiseModal.jsx","components/common/Modals/SkillsCVModal.jsx","components/common/Modals/SocialMediaModal.jsx","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport {\r\n  fetchDeveloperCv,\r\n  updateDeveloperCvBio,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst AboutCV = ({ show, handleClose, data, id, role,isEdited }) => {\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n  const { smallLoader } = useSelector((state) => state.developerData);\r\n  const {\r\n    register,\r\n    setValue,\r\n    handleSubmit,\r\n    watch,\r\n    clearErrors,\r\n    formState: { errors, isDirty, isValid, isSubmitting },\r\n  } = useForm({});\r\n  const maxChars = 1000;\r\n\r\n  useEffect(() => {\r\n    setValue(\"bio\", data);\r\n  }, [data]);\r\n\r\n  const onSubmit = (values) => {\r\n    if (role === \"developer\") {\r\n      let data = {\r\n        ...values,\r\n        user_id: id,\r\n      };\r\n      dispatch(\r\n        updateDeveloperCvBio(data,role, () => {\r\n          dispatch(fetchDeveloperCv());\r\n          handleClose();\r\n        })\r\n      );\r\n    } else {\r\n      let data = {\r\n        ...values,\r\n        user_id: id,\r\n      };\r\n      dispatch(\r\n        updateDeveloperCvBio(data,role, () => {\r\n          dispatch(getDeveloperDetails(id));\r\n          handleClose();\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const handleCloseAndModalData = () => {\r\n    setValue(\"bio\",data);\r\n    handleClose()\r\n    clearErrors(\"bio\");\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleCloseAndModalData}\r\n      centered\r\n      className=\"custom-modal\"\r\n      animation\r\n    >\r\n      <Modal.Header closeButton className=\"border-0 pb-3\">\r\n        {/* <Modal.Title>About Section</Modal.Title> */}\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <h3 className=\"popup-heading\">{t(\"aboutSection\")}</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n          <Form.Group className=\"mb-4\">\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              className=\"common-field\"\r\n              rows=\"6\"\r\n              name=\"bio\"\r\n              placeholder=\"Enter your bio\"\r\n              {...register(\"bio\", {\r\n                required: {\r\n                  value: true,\r\n                  message: \"Please Enter Bio Data\",\r\n                },\r\n                validate: (value) =>\r\n                  value.length <= maxChars || \"Maximum character limit reached\",\r\n              })}\r\n              // onChange={handleChange}\r\n              maxLength={1000}\r\n            ></Form.Control>\r\n            <p className=\"error-message\">{errors.bio?.message}</p>\r\n            <p className=\"font-13 text-end\">\r\n              {watch(\"bio\")?.length >= maxChars\r\n                ? t(\"max_character_limit_msg\")\r\n                : maxChars - watch(\"bio\")?.length}{\" \"}\r\n              {t(\"charactersRemaining\")}\r\n            </p>\r\n          </Form.Group>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text={t(\"submit\")}\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\nexport default AboutCV;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport { filePreassignedUrlGenerate, getDeveloperDetails, updateDeveloperCvDetails } from \"../../../redux/slices/clientDataSlice\";\r\nimport { fetchDeveloperCv } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst DeveloperDetails = ({ show, handleClose, name, position, profile ,experience, id,role,isEdited }) => {\r\n    const dispatch = useDispatch();\r\n    const { smallLoader } = useSelector(state => state.clientData)\r\n    const [file, setFile] = useState(null)\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const{ t } =  useTranslation() \r\n    const {\r\n        register,\r\n        setValue,\r\n        handleSubmit,\r\n        formState: { errors, isDirty, isValid, isSubmitting },\r\n    } = useForm({});\r\n\r\n    useEffect(() => {\r\n        setValue(\"name\", name);\r\n        setValue(\"professional_title\", position);\r\n        setValue(\"profile_picture\", profile);\r\n        setValue(\"total_experience\" , experience)\r\n    }, [name, position ,experience])\r\n\r\n    const handleChange = (e) => {\r\n        const file = e.target.files[0];\r\n        setFile(file)\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setSelectedImage(reader.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n   \r\n\r\n    const onSubmit = (values) => {\r\n        console.log(values , \"values\")\r\n        let fileData = new FormData();\r\n        fileData.append(\"file\",file);\r\n        if(file==null){\r\n            let data = {\r\n                ...values,\r\n                \"user_id\" : +id\r\n            };\r\n            console.log(data,\"data\")\r\n            dispatch(updateDeveloperCvDetails(data,role, () => {\r\n                if(role==\"developer\"){\r\n                    dispatch(fetchDeveloperCv())\r\n                }else{\r\n                    dispatch(getDeveloperDetails(id))\r\n\r\n                }\r\n                handleClose()\r\n            }))\r\n        }else{\r\n            dispatch(filePreassignedUrlGenerate(fileData, (url) => {\r\n                let data = {\r\n                    ...values,\r\n                    \"profile_picture\": url,\r\n                    \"user_id\" : +id\r\n                };\r\n                console.log(data,\"data\")\r\n                dispatch(updateDeveloperCvDetails(data,role, () => {\r\n                    if(role==\"developer\"){\r\n                        dispatch(fetchDeveloperCv())\r\n                    }else{\r\n                        dispatch(getDeveloperDetails(id))\r\n    \r\n                    }\r\n                    handleClose()\r\n                }))\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} centered className=\"custom-modal\" animation>\r\n            <Modal.Header closeButton className=\"border-0 pb-3\">\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h3 className=\"popup-heading\">Developer Section</h3>\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <Form.Group className=\"mb-4\">\r\n                        <Form.Label className=\"font-14\">Name</Form.Label>\r\n                        <Form.Control name=\"name\" className=\"common-field\" placeholder=\"Enter your name\"\r\n                            {...register(\"name\", {\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Please Enter Name\",\r\n                                },\r\n\r\n                            })}\r\n\r\n                        ></Form.Control>\r\n                        <p className=\"error-message\">\r\n                            {errors.name?.message}\r\n                        </p>\r\n                        <Form.Label className=\"font-14\">Position</Form.Label>\r\n                        <Form.Control name=\"professional_title\" className=\"common-field\" placeholder=\"Enter your Position\"\r\n                            {...register(\"professional_title\", {\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Please Enter Position\",\r\n                                },\r\n\r\n\r\n                            })}\r\n\r\n                        ></Form.Control>\r\n                        <p className=\"error-message\">\r\n                            {errors.professional_title?.message}\r\n                        </p>\r\n                        <div className=\"flex-none\">\r\n                                    <Form.Label className=\"common-label\">{t(\"experience\")}</Form.Label>\r\n                                    <Form.Select className=\"filter-select shadow-none\"\r\n                                      {...register(\"total_experience\", {\r\n                                        required: {\r\n                                            value: true,\r\n                                            message: \"Please Enter Experience\",\r\n                                        },\r\n                                    })}\r\n                                    >\r\n                                        <option value=\"\" > {t(\"selectExperience\")} </option>\r\n                                        <option value=\"1 years\" onClick={(e) => e.stopPropagation()}>1 {t(\"years\")}</option>\r\n                                        <option value=\"2 years\" onClick={(e) => e.stopPropagation()}>2 {t(\"years\")}</option>\r\n                                        <option value=\"3 years\" onClick={(e) => e.stopPropagation()}>3 {t(\"years\")}</option>\r\n                                        <option value=\"5 years\" onClick={(e) => e.stopPropagation()}>5 {t(\"years\")}</option>\r\n                                        <option value=\"above 5\" onClick={(e) => e.stopPropagation()}>above 5  {t(\"years\")}</option>\r\n                                    </Form.Select>\r\n                                </div>\r\n                        <p className=\"error-message\">\r\n                            {errors.professional_title?.message}\r\n                        </p>\r\n\r\n\r\n                        <Form.Label className=\"font-14\">Image</Form.Label>\r\n                        <Form.Control type=\"file\" id=\"developer-image\"\r\n                            name=\"profile_picture\"\r\n                            {...register(\"profile_picture\", {\r\n                                onChange: (e) => handleChange(e),\r\n                                required: {\r\n                                    value: false,\r\n                                    message: \"Profile Picture is required\",\r\n                                },\r\n                            })}\r\n                            className=\"d-none\" />\r\n                        <Form.Label htmlFor=\"developer-image\" className=\"upload-image-label d-block\"><HiUpload /> Upload Image, Image must be jpg or png</Form.Label>\r\n                        <div>\r\n                            <img src={selectedImage ? selectedImage : profile} alt=\"Selected\" style={{ width: \"150px\", maxHeight: \"150px\" }} />\r\n                        </div>\r\n\r\n\r\n                    </Form.Group>\r\n                    <div className=\"text-center\">\r\n                        <RexettButton\r\n                            type=\"submit\"\r\n                            text=\"Submit\"\r\n                            className=\"main-btn px-4 font-14 fw-semibold\"\r\n                            variant=\"transparent\"\r\n                            disabled={smallLoader}\r\n                            isLoading={smallLoader}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nexport default DeveloperDetails;","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  addDegree,\r\n  addDeveloperCvEducation,\r\n  deleteEducationCv,\r\n  fetchDeveloperCv,\r\n  getDegreeList,\r\n  updateDeveloperCvEducation,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\";\r\nimport Select from \"react-select\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { GOOGLE_AUTOCOMPLETE_API_KEY } from \"../../clients/TimeReporiting/constant\";\r\n\r\n\r\nconst EducationCV = ({ show, handleClose, data, id, role }) => {\r\n  const dispatch = useDispatch();\r\n  const [disbaleYear, setDisbaleYear] = useState([]);\r\n  const [renderModalData, setRenderModalData] = useState(data);\r\n  const { degreeList, smallLoader } = useSelector(\r\n    (state) => state.developerData\r\n  );\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    watch,\r\n    setValue,\r\n    trigger,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: \"educations\",\r\n  });\r\n\r\n  function generateYears() {\r\n    const currentYear = new Date().getFullYear();\r\n    const years = [];\r\n    for (let year = 1995; year <= currentYear; year++) {\r\n      years.push(year);\r\n    }\r\n    return years;\r\n  }\r\n  console.log(data, \"data\");\r\n  console.log(degreeList, \"degreeeelist\");\r\n\r\n  // Example usage:\r\n  const yearsArray = generateYears();\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data.forEach((item, index) => {\r\n        append({\r\n          university_name: item.university_name,\r\n          degree_id: item.degree_id,\r\n          address: item.address,\r\n          start_year: item.start_year,\r\n          end_year: item.end_year,\r\n          currently_attending: item.currently_attending,\r\n          education_id: item?.id,\r\n        });\r\n        setDisbaleYear((prevState) => [...prevState, item.currently_attending]);\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getDegreeList());\r\n  }, []);\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, null);\r\n    } else {\r\n      const end_year = watch(`educations[${index}].end_year`);\r\n      const updatedDisabledEndDates = [...disbaleYear];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisbaleYear(updatedDisabledEndDates);\r\n      setValue(`educations[${index}].end_year`, end_year);\r\n    }\r\n  };\r\n\r\n  const handleAddMore = async () => {\r\n    const isValid = await trigger();\r\n    if (isValid) {\r\n      append({\r\n        university_name: \"\",\r\n        degree_id: \"\",\r\n        address: \"\",\r\n        start_year: \"\",\r\n        end_year: \"\",\r\n        currently_attending: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteDeveloperEducation = (id, devId, index) => {\r\n    remove(index);\r\n    if (id) {\r\n      dispatch(\r\n        deleteEducationCv(id, devId, () => {\r\n          if (role == \"developer\") {\r\n            dispatch(fetchDeveloperCv());\r\n          } else {\r\n            dispatch(getDeveloperDetails(devId));\r\n          }\r\n          // handleClose()\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmit = (value) => {\r\n    let { educations } = value;\r\n    let data = {\r\n      developer_id: id,\r\n      educations: educations,\r\n    };\r\n\r\n    dispatch(\r\n      updateDeveloperCvEducation(data, role, () => {\r\n        if (role == \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreate = (inputValue) => {\r\n    const payload = {\r\n      title: inputValue,\r\n    };\r\n    dispatch(\r\n      addDegree(payload, () => {\r\n        dispatch(getDegreeList());\r\n      })\r\n    );\r\n  };\r\n\r\n  const deletetooltip = <Tooltip id=\"tooltip\">Delete Row</Tooltip>;\r\n  const addtooltip = <Tooltip id=\"tooltip\">Add Row</Tooltip>;\r\n  console.log(fields, \"----educationfirld\");\r\n  const next = degreeList.find((option) => option.value === fields.degree_id);\r\n  console.log(next, \"next\");\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      centered\r\n      scrollable\r\n      className=\"custom-modal\"\r\n      animation\r\n      size=\"lg\"\r\n    >\r\n      <Modal.Header closeButton className=\"border-0 pb-3\">\r\n        {/* <Modal.Title>Education</Modal.Title> */}\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <h3 className=\"popup-heading\">Education</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          {fields.map((item, index) => (\r\n            <div className=\"experience-container mb-3\" key={item.id}>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">University Name</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      placeholder=\"Enter University Name\"\r\n                      {...register(`educations.${index}.university_name`, {\r\n                        required: true,\r\n                      })}\r\n                      defaultValue={item.university_name}\r\n                    />\r\n                    {errors &&\r\n                      errors.educations &&\r\n                      errors.educations[index] &&\r\n                      errors.educations[index].university_name && (\r\n                        <p className=\"error-message\">\r\n                          University name is required\r\n                        </p>\r\n                      )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">Degree Name</Form.Label>\r\n                    <CreatableSelect\r\n                      isClearable\r\n                      onChange={(val) =>\r\n                        setValue(\r\n                          `educations.${index}.degree_id`,\r\n                          val ? val.value : \"\"\r\n                        )\r\n                      }\r\n                      // value={degreeList.find(\r\n                      //   (option) => option.value === item.degree_id\r\n                      // )}\r\n                      onCreateOption={handleCreate}\r\n                      options={degreeList}\r\n                    />\r\n                    {/* <Select\r\n                                            options={degreeList}\r\n                                            onCreateOption={handleCreate}\r\n                                            onChange={(val) => setValue(`educations.${index}.degree_id`, val ? val.value : '')}\r\n                                            defaultValue={degreeList.find(option => option.value === item.degree_id)}\r\n\r\n                                        /> */}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">Address</Form.Label>\r\n                    {/* <Form.Control\r\n                                            type=\"text\"\r\n                                            className=\"common-field\"\r\n                                            placeholder=\"Enter Address\"\r\n                                            {...register(`educations.${index}.address`, { required: true })}\r\n                                            defaultValue={item.address}\r\n                                        /> */}\r\n                    <Controller\r\n                      name=\"address\"\r\n                      className=\"common-field \"\r\n                        control={control}\r\n                      rules={{\r\n                        required: \"Address is required\",\r\n                      }}\r\n                    \r\n                      // value={item.address}\r\n                      render={({ field, fieldState }) => (\r\n                        <Autocomplete\r\n                          style={{ width: \"500px\" }}\r\n                          // errors={fieldState?.errors}\r\n                          className=\"common-field font-14 w-100 p-2\"\r\n                          apiKey={GOOGLE_AUTOCOMPLETE_API_KEY}\r\n                          onPlaceSelected={(place) => {\r\n                            console.log(place);\r\n                          }}\r\n                          options={{\r\n                            types: [\"establishment\", \"geocode\"], \r\n                          }}\r\n                          onChange={(event) => {\r\n                            field.onChange(event.target.value);\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    {/* {errors &&\r\n                      errors.educations &&\r\n                      errors.educations[index] &&\r\n                      errors. educations[index].address&& (\r\n                        <p className=\"error-message\">\r\n                        {errors.educations[index].address?.message}\r\n                      </p>\r\n                        \r\n                      )} */}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">Start Year</Form.Label>\r\n                    <Form.Select\r\n                      {...register(`educations.${index}.start_year`, {\r\n                        required: \"Start Year is required\",\r\n                        validate: {\r\n                          lessThanEndYear: (value) => {\r\n                            const endYear = watch(\r\n                              `educations.${index}.end_year`\r\n                            );\r\n                            if (\r\n                              !endYear ||\r\n                              parseInt(value) < parseInt(endYear)\r\n                            ) {\r\n                              return true;\r\n                            }\r\n                            return \"Start Year must be less than End Year\";\r\n                          },\r\n                        },\r\n                      })}\r\n                    >\r\n                      <option disabled selected>\r\n                        Please select year\r\n                      </option>\r\n                      {yearsArray?.map((item) => (\r\n                        <option key={item} value={item}>\r\n                          {item}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                    {errors &&\r\n                      errors.educations &&\r\n                      errors.educations[index] &&\r\n                      errors.educations[index].start_year && (\r\n                        <p className=\"error-message\">\r\n                          {errors.educations[index].start_year.message}\r\n                        </p>\r\n                      )}\r\n                  </Form.Group>\r\n                </Col>\r\n                {!disbaleYear[index] ? (\r\n                  <Col md=\"6\">\r\n                    <Form.Group className=\"mb-4\">\r\n                      <Form.Label className=\"font-14\">End Year</Form.Label>\r\n                      <Form.Select\r\n                        {...register(`educations.${index}.end_year`, {\r\n                          required: {\r\n                            value: disbaleYear[index] ? false : true,\r\n                            message: \"End year is required\",\r\n                          },\r\n                        })}\r\n                        disabled={disbaleYear[index]}\r\n                      >\r\n                        <option disabled selected>\r\n                          Please select year\r\n                        </option>\r\n                        {yearsArray?.map((item) => (\r\n                          <option key={item} value={item}>\r\n                            {item}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      {errors &&\r\n                        errors.educations &&\r\n                        errors.educations[index] &&\r\n                        errors.educations[index].end_year && (\r\n                          <p className=\"error-message\">\r\n                            {errors.educations[index].end_year.message}\r\n                          </p>\r\n                        )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Col md=\"12\">\r\n                  <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                    <Form.Group className=\"d-flex gap-2 align-items-center\">\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        className=\"cv-field\"\r\n                        id={`currently_attending_${index}`}\r\n                        {...register(`educations.${index}.currently_attending`)}\r\n                        defaultChecked={item.currently_attending}\r\n                        onChange={(e) => handleCurrentlyWorkingChange(e, index)}\r\n                      />\r\n                      <Form.Label\r\n                        htmlFor={`currently_attending_${index}`}\r\n                        className=\"mb-0 font-14\"\r\n                      >\r\n                        Currently Attending\r\n                      </Form.Label>\r\n                    </Form.Group>\r\n\r\n                    {index !== 0 && (\r\n                      <div>\r\n                        <OverlayTrigger\r\n                          placement=\"bottom\"\r\n                          overlay={deletetooltip}\r\n                        >\r\n                          <Button\r\n                            variant=\"danger\"\r\n                            onClick={() =>\r\n                              deleteDeveloperEducation(\r\n                                item.new_id,\r\n                                item?.education_id,\r\n                                index\r\n                              )\r\n                            }\r\n                          >\r\n                            <FaTrashAlt />\r\n                          </Button>\r\n                        </OverlayTrigger>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-end mb-3\">\r\n            <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n              <Button\r\n                className=\"main-btn\r\n                        py-2 px-3\"\r\n                onClick={handleAddMore}\r\n              >\r\n                +\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Submit\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EducationCV;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Form, Modal, Row, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { useForm, useFieldArray } from \"react-hook-form\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { addDeveloperCvExperience, deleteExperience, fetchDeveloperCv, updateDeveloperCvExperience } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst ExperienceCVModal = ({ show, handleClose, data ,id ,role }) => {\r\n  const [renderModalData, setRenderModalData] = useState(data)\r\n  const [disabledEndDates, setDisabledEndDates] = useState([]);\r\n  const dispatch = useDispatch()\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    setError, \r\n    formState: { errors },\r\n  } = useForm();\r\n  const { t } =  useTranslation()\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"test\",\r\n  });\r\n  const {smallLoader } = useSelector(state => state.developerData)\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data?.forEach((item, index) => {\r\n        append({\r\n          company_name: item.company_name,\r\n          job_title: item.job_title,\r\n          description: item.description,\r\n          start_date: item.start_date?.slice(0, 10),\r\n          end_date: item.end_date?.slice(0, 10),\r\n          is_still_working: item.is_still_working,\r\n          experience_id: item.id\r\n\r\n        });\r\n        setDisabledEndDates(prevState => [...prevState, item.is_still_working]);\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n  const handleCurrentlyWorkingChange = (e, index) => {\r\n    if (e.target.checked) {\r\n      const isChecked = watch(`test[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = true;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n      setValue(`test[${index}].end_date`, \"\");\r\n    } else {\r\n      const isChecked = watch(`test[${index}].is_still_working`);\r\n      const updatedDisabledEndDates = [...disabledEndDates];\r\n      updatedDisabledEndDates[index] = false;\r\n      setDisabledEndDates(updatedDisabledEndDates);\r\n    }\r\n\r\n  }\r\n\r\n  const onSubmit = (value) => {\r\n    let { test } = value\r\n    let data={\r\n      developer_id:id,\r\n      experiences:test\r\n    }\r\n    dispatch(updateDeveloperCvExperience(data,role,()=>{\r\n      if(role==\"developer\"){\r\n        dispatch(fetchDeveloperCv())\r\n      }else{\r\n        dispatch(getDeveloperDetails(id))\r\n      }\r\n      handleClose()\r\n    }))\r\n  \r\n  };\r\n\r\n  const handleAppend = async () => {\r\n    const isValid = await trigger();\r\n    if (isValid) {\r\n      append({\r\n        company_name: \"\",\r\n        job_title: \"\",\r\n        description: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        is_still_working: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteDeveloperExperience = ( itemId,index) => {\r\n    remove(index)\r\n    if (itemId) {\r\n      dispatch(deleteExperience(itemId,id, () => {\r\n          if (role == \"developer\") {\r\n              dispatch(fetchDeveloperCv())\r\n          } else {\r\n              dispatch(getDeveloperDetails(id))\r\n          }\r\n          // handleClose()\r\n\r\n      }))\r\n    }\r\n  }\r\n  const deletetooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n     {t(\"deleteRow\")}\r\n    </Tooltip>\r\n  );\r\n  const addtooltip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {t(\"addRow\")}\r\n    </Tooltip>\r\n  );\r\n\r\nconsole.log(fields,\"firldssssss\")\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      centered\r\n      className=\"custom-modal\"\r\n      size=\"lg\"\r\n      animation\r\n      scrollable\r\n    >\r\n      <Modal.Header closeButton className=\"border-0 pb-3\">\r\n        {/* <Modal.Title>Experience CV Section</Modal.Title> */}\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h3 className=\"popup-heading\">{t(\"experience\")} CV {t(\"section\")}</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n          {fields.map((item, index) => (\r\n            <div className=\"experience-container mb-3\" key={item.id}>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">{t(\"companyName\")}</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"company_name\"\r\n                      placeholder=\"Enter Company Name\"\r\n                      {...register(`test[${index}].company_name`, {\r\n                        required: \"Company name is required\",\r\n                      })}\r\n                    />\r\n                    {errors?.test?.[index]?.company_name && (\r\n                      <p className=\"error-message\">{errors.test[index].company_name.message}</p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">{t(\"jobPosition\")}</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      className=\"common-field\"\r\n                      name=\"job_title\"\r\n                      placeholder=\"Enter Job Position\"\r\n                      {...register(`test[${index}].job_title`, {\r\n                        required: \"Job Position is required\",\r\n                      })}\r\n                    />\r\n                    {errors?.test?.[index]?.job_title && (\r\n                      <p className=\"error-message\">{errors.test[index].job_title.message}</p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">{t(\"jobDescription\")}</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      as=\"textarea\"\r\n                      rows={3}\r\n                      className=\"common-field\"\r\n                      placeholder=\"Enter Job Description\"\r\n                      {...register(`test[${index}].description`, {\r\n                        required: \"Description name is required\",\r\n                      })}\r\n                    />\r\n                    {errors?.test?.[index]?.description && (\r\n                      <p className=\"error-message\">{errors.test[index].description.message}</p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">{t(\"startDate\")}</Form.Label>\r\n                    <Form.Control\r\n                      type=\"date\"\r\n                      className=\"common-field\"\r\n                      placeholder=\"Enter Start Date\"\r\n                      max={new Date().toISOString().split(\"T\")[0]}\r\n                      {...register(`test[${index}].start_date`, {\r\n                        required: \"Start Date is required\",\r\n                        validate: {\r\n                          dateRange: (value) => {\r\n                            const endDate = watch(`test[${index}].end_date`); // Get the value of the end date field\r\n                            if (!endDate || value <= endDate) {\r\n                              return true;\r\n                            }\r\n                            return \"Start Date must be before End Date\";\r\n                          },\r\n                        },\r\n                      })}\r\n                    />\r\n                    {errors?.test?.[index]?.start_date && (\r\n                      <p className=\"error-message\">{errors.test[index].start_date.message}</p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <Form.Group className=\"mb-4\">\r\n                    <Form.Label className=\"font-14\">{t(\"endDate\")}</Form.Label>\r\n                    <Form.Control\r\n                      type=\"date\"\r\n                      className=\"common-field\"\r\n                      placeholder=\"Enter End Date\"\r\n                      max={new Date().toISOString().split(\"T\")[0]}\r\n                      {...register(`test[${index}].end_date`, {\r\n                        required: {\r\n                          value: disabledEndDates[index] ? false : true,\r\n                          message: \"End Date is required\",\r\n                        },\r\n                      })}\r\n                      disabled={disabledEndDates[index]}\r\n                    />\r\n                    {errors?.test?.[index]?.end_date && (\r\n                      <p className=\"error-message\">{errors.test[index].end_date.message}</p>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md=\"12\">\r\n                  <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                    <Form.Group className=\"d-flex gap-2 align-items-center\">\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        className=\"cv-field\"\r\n                        {...register(`test[${index}].is_still_working`, {\r\n                          required: false,\r\n                        })}\r\n                        onChange={(e) => handleCurrentlyWorkingChange(e, index)}\r\n                      />\r\n                      <Form.Label className=\"mb-0 font-14\">{t(\"currentlyWorking\")}</Form.Label>\r\n                    </Form.Group>\r\n                    {index !== 0 && (\r\n                      <div>\r\n                        <OverlayTrigger placement=\"bottom\" overlay={deletetooltip}>\r\n                          <Button variant=\"danger\" className=\"font-14\" onClick={() => deleteDeveloperExperience(item.experience_id , index)\r\n                          }><FaTrashAlt /></Button>\r\n                        </OverlayTrigger>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-end mb-3\">\r\n            <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n              <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n                +\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Submit\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ExperienceCVModal;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deleteSkill,\r\n  fetchDeveloperCv,\r\n  updateDeveloperSkills,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  getDeveloperDetails,\r\n  getSkillList,\r\n} from \"../../../redux/slices/clientDataSlice\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport { FaTrash } from \"react-icons/fa6\";\r\nimport { EXPERIENCE_OPTIONS } from \"../../../helper/utlis\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\n\r\nconst ExpertiseModal = ({ show, handleClose, data, id, role }) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const [selectedOption, setSelectedOption] = useState();\r\n  const { smallLoader } = useSelector((state) => state.developerData);\r\n  const [options, setOptions] = useState([]);\r\n  const [skillOptions, setSkillOptions] = useState([]);\r\n  const { skillList } = useSelector((state) => state.clientData);\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    setValue,\r\n    clearErrors,\r\n    watch,\r\n    reset,\r\n    trigger,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: {\r\n      skills: [\r\n        {\r\n          skill: \"\",\r\n          experience: \"\",\r\n        },\r\n      ],\r\n    },\r\n  });\r\n\r\n  console.log(data, \"data\");\r\n\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"skills\",\r\n    rules: {\r\n      required: t(\"required_message\"),\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    setSkillOptions(skillListMapped);\r\n    if (data?.length) {\r\n      let formattedData = [];\r\n      formattedData = data?.map((curElem) => {\r\n        const skill = {\r\n          label: curElem.skill,\r\n          value: curElem.skill,\r\n          id: curElem.id,\r\n        };\r\n        return {\r\n          ...curElem,\r\n          skill: skill,\r\n        };\r\n      });\r\n      setValue(\"skills\", formattedData)\r\n    } else {\r\n      setValue(\"skills\", [{ skill: \"\", experience: \"\" }]);\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const handleAppend = () => {\r\n    const expertise = watch(\"skills\");\r\n    const index = expertise.findIndex(\r\n      (curElem) => curElem.experience === \"\" || curElem.skill === \"\"\r\n    );\r\n    if (index === -1) {\r\n      append({\r\n        skill: \"\",\r\n        experience: \"\",\r\n      });\r\n    }\r\n  };\r\n  const handleDelete = (skill_id, index) => {\r\n    remove(index);\r\n    if (skill_id) {\r\n      dispatch(\r\n        deleteSkill(id, skill_id, () => {\r\n          if (role == \"developer\") {\r\n            dispatch(fetchDeveloperCv());\r\n          } else {\r\n            dispatch(getDeveloperDetails(id));\r\n          }\r\n          handleClose();\r\n        })\r\n      );\r\n    }\r\n  };\r\n  // const skillListMapped = skillList.map((item) => {\r\n  //     return { value: item.id, label: item.title };\r\n  // });\r\n\r\n  // useEffect(() => {\r\n  //     if (data) {\r\n  //         const array = data\r\n  //             .split(\",\")\r\n  //             .map((tech) => ({ label: tech.trim(), value: tech.trim() }));\r\n  //         setSelectedOption(array);\r\n  //     }\r\n  // }, [data]);\r\n\r\n  // useEffect(() => {\r\n  //     setSkillsCate(skillListMapped)\r\n  // }, [skillList]);\r\n\r\n  // const handleSubmit = (e) => {\r\n  //     e.preventDefault();\r\n  //     let convertString = selectedOption.map((item) => item.label);\r\n  //     if (role === \"developer\") {\r\n  //         let data = {\r\n  //             skills: convertString.toString(),\r\n  //             user_id: +id,\r\n  //         };\r\n  //         dispatch(\r\n  //             updateDeveloperSkills(data, () => {\r\n  //                 dispatch(fetchDeveloperCv());\r\n  //                 handleClose();\r\n  //             })\r\n  //         );\r\n  //     } else {\r\n  //         let data = {\r\n  //             skills: convertString.toString(),\r\n  //             user_id: +id,\r\n  //         };\r\n  //         dispatch(\r\n  //             updateDeveloperSkills(data, () => {\r\n  //                 dispatch(getDeveloperDetails(id));\r\n  //                 handleClose();\r\n  //             })\r\n  //         );\r\n  //     }\r\n  // };\r\n  // const handleExperience = () => {\r\n\r\n  // }\r\n\r\n  // const handleAppend = async () => {\r\n  //     // Trigger validation for all fields\r\n  //     append({\r\n  //         skills: \"\",\r\n  //         experience: \"\"\r\n  //     });\r\n  //     const isValid = await trigger();\r\n  //     console.log(isValid,\"isValid\")\r\n  //     // Check if all fields are valid\r\n  //     if (isValid) {\r\n  //         append({\r\n  //             skills: \"\",\r\n  //             experience: \"\"\r\n  //         });\r\n  //     }\r\n  // };\r\n  const addtooltip = <Tooltip id=\"tooltip\">{t(\"addRow\")}</Tooltip>;\r\n\r\n  // const filteredOptions = options.filter(\r\n  //     (option) =>\r\n  //         !selectedOption.find((selected) => selected.value === option.value)\r\n  // );\r\n\r\n  const onChangeSelect = (val, index) => {\r\n    const newOption = createOption(val);\r\n    setSkillOptions((prev) => [...prev, newOption]);\r\n    setValue(`skills.${index}.skill`, newOption);\r\n    setSelectedOption(newOption);\r\n  };\r\n  const onSubmit = (values) => {\r\n    let skills = [];\r\n    skills = values?.skills?.map(({ skill, experience }) => {\r\n      return { skill: skill.label, experience: experience };\r\n    });\r\n    const payload = {\r\n      user_id: id,\r\n      skills: [...skills],\r\n    };\r\n    dispatch(\r\n      updateDeveloperSkills(payload, role ,() => {\r\n        if (role == \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      })\r\n    );\r\n    // commented for future use\r\n    // if (data.length) {\r\n    //   dispatch(\r\n    //     updateDeveloperSkills(\r\n    //       payload,\r\n    //       () => {\r\n    //         dispatch(fetchDeveloperCv());\r\n    //         handleClose();\r\n    //       },\r\n    //       \"put\"\r\n    //     )\r\n    //   );\r\n    // } else {\r\n    //   dispatch(\r\n    //     updateDeveloperSkills(\r\n    //       payload,\r\n    //       () => {\r\n    //         dispatch(fetchDeveloperCv());\r\n    //         handleClose();\r\n    //       },\r\n    //       \"post\"\r\n    //     )\r\n    //   );\r\n    // }\r\n  };\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      centered\r\n      className=\"custom-modal\"\r\n      animation\r\n    >\r\n      <Modal.Header closeButton className=\"border-0 pb-3\"></Modal.Header>\r\n      <Modal.Body>\r\n        <h3 className=\"popup-heading\">{t(\"expertise\")}</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          {fields.map((field, index) => (\r\n            <Fragment key={field.id}>\r\n              <div className=\"experience-container\">\r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <Form.Group className=\"mb-4\">\r\n                      <Form.Label className=\"common-label\">\r\n                        {t(\"enterSkill\")}\r\n                      </Form.Label>\r\n                      <CreatableSelect\r\n                        {...register(`skills.${index}.skill`, {\r\n                          required: {\r\n                            value: true,\r\n                            message: t(\"required_message\"),\r\n                          },\r\n                        })}\r\n                        isClearable\r\n                        options={skillOptions}\r\n                        onChange={(newValue) => {\r\n                          console.log(newValue, \"newvalue\");\r\n                          setSelectedOption(newValue);\r\n                          setValue(`skills.${index}.skill`, newValue);\r\n                          clearErrors(`skills.${index}.skill`);\r\n                        }}\r\n                        onCreateOption={(val) => {\r\n                          onChangeSelect(val, index);\r\n                        }}\r\n                        value={watch(`skills.${index}.skill`)}\r\n                      />\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                {errors?.skills?.[index]?.skill && (\r\n                  <p className=\"error-message\">\r\n                    {errors?.skills[index]?.skill?.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n              <div className=\"flex-none\">\r\n                <Form.Label className=\"common-label\">\r\n                  {t(\"experience\")}\r\n                </Form.Label>\r\n                <Form.Select\r\n                  {...register(`skills.${index}.experience`, {\r\n                    required: {\r\n                      value: true,\r\n                      message: t(\"required_message\"),\r\n                    },\r\n                  })}\r\n                  className=\"filter-select shadow-none\"\r\n                  //   onChange={(e) => handleExperience(e)}\r\n                >\r\n                  <option value=\"\"> {t(\"selectExperience\")} </option>\r\n                  {EXPERIENCE_OPTIONS.map(({ label, value }, index) => (\r\n                    <option value={value} key={index}>\r\n                      {label} {t(\"years\")}\r\n                    </option>\r\n                  ))}\r\n                </Form.Select>\r\n                {errors?.skills?.[index]?.experience && (\r\n                  <p className=\"error-message\">\r\n                    {errors?.skills[index]?.experience?.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n              {watch(\"skills\")?.length !== 1 && (\r\n                <Col md=\"12\" className=\"d-flex justify-content-end\">\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    onClick={() => handleDelete(field?.skill?.id, index)}\r\n                  >\r\n                    <FaTrash />\r\n                  </Button>\r\n                </Col>\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n          <div className=\"text-end mb-3\">\r\n            <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n              <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n                +\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Submit\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n\r\n          {/* <div className=\"experience-container\">\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <Form.Label className=\"common-label\">\r\n                    {t(\"Enter Skills\")}\r\n                  </Form.Label>\r\n                  <CreatableSelect\r\n                    isMulti\r\n                    isClearable\r\n                    name={selectedOption}\r\n                    onChange={(newValue) => {\r\n                        setSelectedOption(newValue)\r\n                    }}\r\n                    // onCreateOption={onChangeSelect}\r\n                    options={skillCate}\r\n                    value={selectedOption}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </div> */}\r\n          {/* <div className=\"flex-none\">\r\n            <Form.Label className=\"common-label\">{t(\"experience\")}</Form.Label>\r\n            <Form.Select\r\n              className=\"filter-select shadow-none\"\r\n              onChange={(e) => handleExperience(e)}\r\n            >\r\n              <option value=\"\"> {t(\"selectExperience\")} </option>\r\n              {EXPERIENCE_OPTIONS.map(({ label, value }, index) => (\r\n                <option value={value} key={index}>\r\n                  {label} {t(\"years\")}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n          </div> */}\r\n          {/* <p className=\"error-message\">\r\n                            {errors.professional_title?.message}\r\n                        </p> */}\r\n\r\n          {/* <div className=\"text-end mb-3\">\r\n            <OverlayTrigger placement=\"bottom\" overlay={addtooltip}>\r\n              <Button className=\"main-btn py-2 px-3\" onClick={handleAppend}>\r\n                +\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Submit\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div> */}\r\n        </form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ExpertiseModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchDeveloperCv,\r\n  updateDeveloperSkills,\r\n} from \"../../../redux/slices/developerDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\n\r\nconst SkillsModal = ({ show, handleClose, data, id, role }) => {\r\n  const { skillList } = useSelector((state) => state.clientData);\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const { smallLoader } = useSelector((state) => state.developerData);\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n  const [skillCate, setSkillsCate] = useState(skillListMapped);\r\n\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  console.log(data, \"data,,,,\");\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const array = data?.map((tech) => ({\r\n        label: tech.skill,\r\n        value: tech.skill,\r\n        id: tech.id,\r\n      }));\r\n      setSelectedOption(array);\r\n    }\r\n  }, [data]);\r\n  console.log(selectedOption, \"selectedOption\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let formattedSkills = [];\r\n    // let convertString = selectedOption.map((item) => item.label);\r\n    formattedSkills = selectedOption.map((item) => {\r\n      return { skill: item.label, experience: \"\" };\r\n    });\r\n\r\n    let data = {\r\n      skills: formattedSkills,\r\n      user_id: +id,\r\n    };\r\n    dispatch(\r\n      updateDeveloperSkills(data, role, () => {\r\n        if (role === \"developer\") {\r\n          dispatch(fetchDeveloperCv());\r\n        } else {\r\n          dispatch(getDeveloperDetails(id));\r\n        }\r\n        handleClose();\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChangeSelect = (val) => {\r\n    setTimeout(() => {\r\n      const newOption = createOption(val);\r\n      setSelectedOption((prev) => [...prev, newOption]);\r\n      setSkillsCate((prev) => [...prev, newOption]);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      centered\r\n      className=\"custom-modal\"\r\n      animation\r\n    >\r\n      <Modal.Header closeButton className=\"border-0 pb-3\"></Modal.Header>\r\n      <Modal.Body>\r\n        <h3 className=\"popup-heading\">{t(\"skills\")}</h3>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"experience-container\">\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <Form.Group className=\"mb-4\">\r\n                  <CreatableSelect\r\n                    isMulti\r\n                    isClearable\r\n                    name={selectedOption}\r\n                    onChange={(newValue) => {\r\n                      setSelectedOption(newValue);\r\n                    }}\r\n                    onCreateOption={onChangeSelect}\r\n                    options={skillCate}\r\n                    value={selectedOption}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text={t(\"submit\")}\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\nexport default SkillsModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form, Row, Col, InputGroup } from \"react-bootstrap\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport { addDeveloperSocialMedia, deleteDeveloperSocialMedia, fetchDeveloperCv, updateDeveloperSocialMedia } from \"../../../redux/slices/developerDataSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDeveloperDetails } from \"../../../redux/slices/clientDataSlice\";\r\n\r\nconst socialMediaOptions = [\r\n  { value: \"facebook\", label: \"Facebook\" },\r\n  { value: \"linkedin\", label: \"Linkedin\" },\r\n  { value: \"twitter\", label: \"Twitter\" },\r\n  { value: \"github\", label: \"Github\" },\r\n  { value: \"instagram\", label: \"Instagram\" },\r\n  { value: \"gitlab\", label: \"Gitlab\" },\r\n  { value: \"pinterest\", label: \"Pinterest\" }\r\n];\r\n\r\nconst SocialMediaModal = ({ show, handleClose, data, id ,role }) => {\r\n  const dispatch = useDispatch()\r\n  const [renderModalData, setRenderModalData] = useState(data)\r\n  const { smallLoader, btnLoader } = useSelector(state => state.developerData)\r\n  const { t } = useTranslation()\r\n  const {\r\n    register,\r\n    control,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    reset,\r\n    trigger,\r\n    // setError,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const { fields, append, remove, replace } = useFieldArray({\r\n    control,\r\n    name: \"test\",\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data?.forEach((item, index) => {\r\n        append({\r\n          new_id: item.id,\r\n          url: item.url,\r\n          name: item.name,\r\n          slug: item.slug\r\n        });\r\n      });\r\n    }\r\n  }, [renderModalData]);\r\n\r\n\r\n\r\n\r\n  const onSubmit = (value) => {\r\n    let { test } = value\r\n    if (role === \"developer\") {\r\n      let data={\r\n        \"social_links\": test,\r\n        \"user_id\" : id\r\n      }\r\n      dispatch(addDeveloperSocialMedia(data, () => {\r\n        dispatch(fetchDeveloperCv())\r\n        handleClose()\r\n      }))\r\n    } else {\r\n      let data={\r\n        \"social_links\": test,\r\n        \"user_id\" : id\r\n      }\r\n      dispatch(addDeveloperSocialMedia(data, () => {\r\n        dispatch(getDeveloperDetails(id))\r\n        handleClose()\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose} centered className=\"custom-modal\" animation>\r\n      <Modal.Header closeButton className=\"border-0 pb-3\">\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <h3 className=\"popup-heading\">{t(\"addSocialMedia\")}</h3>\r\n        <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n\r\n          {fields?.map((row, index) => (\r\n            <div className=\"experience-container\" key={row.id}>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Text id=\"basic-addon1\">{row.slug}</InputGroup.Text>\r\n                    <Form.Control type=\"text\" className=\"cv-field\" placeholder=\"Enter Url\"\r\n                      {...register(`test[${index}].url`, {\r\n                        required: {\r\n                          value: true,\r\n                          message: \"Url can't blank\",\r\n                        },\r\n                        pattern: {\r\n                          value: /^(https?:\\/\\/)?(www\\.)?(facebook|twitter|instagram|linkedin|github)\\.com\\/\\S*$/,\r\n                          message: \"Please enter a valid social media URL\",\r\n                        }\r\n                      })}\r\n                    ></Form.Control>\r\n                    {errors && errors.test && errors.test[index] && errors.test[index].url && (\r\n                      <p className=\"error-message\">{errors.test[index].url.message}</p>\r\n                    )}\r\n                  </InputGroup>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-center\">\r\n            {/* <Button variant=\"transparent\" className=\"main-btn px-4\" type=\"submit\">Submit</Button> */}\r\n\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text=\"Update Profile\"\r\n              className=\"main-btn px-4 font-14 fw-semibold\"\r\n              variant=\"transparent\"\r\n              disabled={btnLoader}\r\n              isLoading={btnLoader}\r\n            />\r\n          </div>\r\n\r\n        </form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SocialMediaModal;\r\n","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["_ref","_errors$bio","_watch","_watch2","show","handleClose","data","id","role","isEdited","dispatch","useDispatch","t","useTranslation","smallLoader","useSelector","state","developerData","register","setValue","handleSubmit","watch","clearErrors","formState","errors","isDirty","isValid","isSubmitting","useForm","maxChars","useEffect","_jsxs","Modal","onHide","handleCloseAndModalData","centered","className","animation","children","_jsx","Header","closeButton","Body","onSubmit","values","user_id","updateDeveloperCvBio","fetchDeveloperCv","getDeveloperDetails","noValidate","Form","Group","Control","as","rows","name","placeholder","required","value","message","validate","length","maxLength","bio","RexettButton","type","text","variant","disabled","isLoading","_errors$name","_errors$professional_","_errors$professional_2","position","profile","experience","clientData","file","setFile","useState","selectedImage","setSelectedImage","console","log","fileData","FormData","append","updateDeveloperCvDetails","filePreassignedUrlGenerate","url","Label","professional_title","Select","onClick","e","stopPropagation","onChange","target","files","reader","FileReader","onloadend","result","readAsDataURL","handleChange","htmlFor","HiUpload","src","alt","style","width","maxHeight","disbaleYear","setDisbaleYear","renderModalData","setRenderModalData","degreeList","control","trigger","fields","remove","useFieldArray","yearsArray","currentYear","Date","getFullYear","years","year","push","generateYears","forEach","item","index","university_name","degree_id","address","start_year","end_year","currently_attending","education_id","prevState","getDegreeList","handleCreate","inputValue","payload","title","addDegree","deletetooltip","Tooltip","addtooltip","next","find","option","scrollable","size","educations","developer_id","updateDeveloperCvEducation","map","Row","Col","md","concat","defaultValue","CreatableSelect","isClearable","val","onCreateOption","options","Controller","rules","render","_ref2","field","fieldState","Autocomplete","apiKey","GOOGLE_AUTOCOMPLETE_API_KEY","onPlaceSelected","place","types","event","lessThanEndYear","endYear","parseInt","selected","Check","defaultChecked","handleCurrentlyWorkingChange","checked","updatedDisabledEndDates","OverlayTrigger","placement","overlay","Button","deleteDeveloperEducation","devId","deleteEducationCv","new_id","FaTrashAlt","async","disabledEndDates","setDisabledEndDates","reset","setError","replace","_item$start_date","_item$end_date","company_name","job_title","description","start_date","slice","end_date","is_still_working","experience_id","test","experiences","updateDeveloperCvExperience","_errors$test","_errors$test$index","_errors$test2","_errors$test2$index","_errors$test3","_errors$test3$index","_errors$test4","_errors$test4$index","_errors$test5","_errors$test5$index","max","toISOString","split","dateRange","endDate","deleteDeveloperExperience","itemId","deleteExperience","localStorage","getItem","selectedOption","setSelectedOption","setOptions","skillOptions","setSkillOptions","skillList","skillListMapped","label","defaultValues","skills","skill","formattedData","curElem","_values$skills","updateDeveloperSkills","_errors$skills","_errors$skills$index","_errors$skills$index2","_errors$skills$index3","_errors$skills2","_errors$skills2$index","_errors$skills$index4","_errors$skills$index5","Fragment","newValue","onChangeSelect","newOption","toLowerCase","prev","EXPERIENCE_OPTIONS","_ref3","_field$skill","handleDelete","skill_id","deleteSkill","FaTrash","handleAppend","findIndex","skillCate","setSkillsCate","array","tech","preventDefault","formattedSkills","isMulti","setTimeout","btnLoader","slug","addDeveloperSocialMedia","row","InputGroup","Text","pattern","InputGroupText","React","ref","bsPrefix","Component","props","useBootstrapPrefix","classNames","displayName","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}