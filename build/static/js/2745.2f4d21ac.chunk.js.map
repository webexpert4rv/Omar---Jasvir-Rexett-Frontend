{"version":3,"file":"static/js/2745.2f4d21ac.chunk.js","mappings":"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","sources":["../node_modules/src/index.tsx","pages/Authentication/Otp.jsx"],"sourcesContent":["import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport sidebarLogo from '../../assets/img/rexett-logo-white.png'\r\nimport authLoginImg from '../../assets/img/login-img-new.png'\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getVerifyOtp, loginUser, resendOtpDispatch } from \"../../redux/slices/authenticationDataSlice\";\r\nimport OTPInput from \"react-otp-input\";\r\nimport RexettSpinner from \"../../components/atomic/RexettSpinner\";\r\n\r\nconst Otp = ({ userType }) => {\r\n    const [otp, setOtpValue] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate()\r\n    const { smallLoader,otpLoader } = useSelector(state => state.authData);\r\n\r\n    const {\r\n        register,\r\n        setValue,\r\n        handleSubmit,\r\n\r\n        formState: { errors, isDirty, isValid, isSubmitting },\r\n    } = useForm({});\r\n\r\n\r\n    const onSubmit = () => {\r\n    let email = localStorage.getItem(\"email\" )\r\n\r\n        let data = {\r\n           otp: otp,\r\n           email: email\r\n        }\r\n        dispatch(getVerifyOtp(data))\r\n    }\r\n\r\n\r\n    const handleOtpInputChange = (otp) => {\r\n        if (isNaN(otp)) return;\r\n        setOtpValue(otp);\r\n    };\r\n\r\n  \r\n    const resendOtpSys = () => {\r\n        let email=localStorage.getItem(\"email\")\r\n        dispatch(resendOtpDispatch({email:email}))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"auth-wrapper\">\r\n                <div className=\"h-100 \">\r\n                    <Row className=\"mx-0 h-100 \">\r\n                        <Col md={5} className=\"px-0\">\r\n                            <div className=\"inner-auth-wrapper h-100 d-flex justify-content-center flex-column position-relative\">\r\n                                <div>\r\n                                    <div className=\"text-center mb-5 logo-auth-wrapper\">\r\n                                        <img src={sidebarLogo} className=\"logo-white\" />\r\n                                    </div>\r\n                                    <div className=\"d-flex justify-content-between align-items-center mb-4 text-white\">\r\n                                    </div>\r\n                                    <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                                        {/* <Form.Group className=\"mb-3\">\r\n                                            <Form.Label className=\"label-form\">Email</Form.Label>\r\n                                            <Form.Control type=\"email\" className=\"auth-field\"\r\n                                                name=\"email\"\r\n                                                {...register(\"email\", {\r\n                                                    onChange: (e) => setEmail(e.target.value),\r\n                                                    required: {\r\n                                                        value: true,\r\n                                                        message: \"Email is required\",\r\n                                                    },\r\n                                                    pattern: {\r\n                                                        value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                                        message: 'Invalid email format',\r\n                                                    },\r\n                                                })}\r\n                                            />\r\n                                            <p className=\"error-message\">\r\n                                                {errors.email?.message}\r\n                                            </p>\r\n                                        </Form.Group> */}\r\n                                        <Form.Group className=\"mb-4\">\r\n                                        <h2 className=\"text-center otp-heading \">Verify OTP</h2>\r\n                                            <OTPInput className=\"mb-5\"\r\n                                                value={otp}\r\n                                                onChange={handleOtpInputChange}\r\n                                                numInputs={4}\r\n                                                renderInput={(props) => (\r\n                                                    <input\r\n                                                        {...props}\r\n                                                        placeholder=\"-\"\r\n                                                        className=\"otpInput\"\r\n                                                    />\r\n                                                )}\r\n                                                isInputNum={true}\r\n                                                containerStyle=\"OTPInputContainer\"\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <div className=\"d-flex justify-content-between align-items-center mt-3 mb-4\">\r\n                                            {/* <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                id=\"remember_me\"\r\n                                                label=\"Remember Me\"\r\n                                                onChange={handleRemember}\r\n                                                checked={isRemember}\r\n                                                className=\"remeber-check\"\r\n                                            /> */}\r\n                                            {/* <Link to={\"/forgot-password\"} className=\"link-text\" >Forgot Password</Link> */}\r\n                                        </div>\r\n                                        <RexettButton\r\n                                            type=\"submit\"\r\n                                            text=\"Submit\"\r\n                                            className=\"auth-btn d-block text-decoration-none\"\r\n                                            variant=\"transparent\"\r\n                                            isLoading={smallLoader}\r\n                                        />\r\n                                    </form>\r\n                                    <div className=\"mt-3 text-center resend-top\" onClick={resendOtpSys}>{otpLoader?<RexettSpinner/>: \"Resend OTP\"}</div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={7} className=\"h-100 d-md-block d-none\">\r\n                            <div className=\"h-100 text-center\">\r\n                                <img src={authLoginImg} className=\"auth-img\" />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\nexport default Otp;"],"names":["isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","slice","focus","getPlaceholderValue","length","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","data","preventDefault","handleBlur","handleKeyDown","otp","code","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","style","Object","assign","display","alignItems","className","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","concat","width","textAlign","type","inputMode","onInput","_ref","userType","setOtpValue","useState","dispatch","useDispatch","smallLoader","otpLoader","useNavigate","useSelector","state","authData","register","setValue","handleSubmit","formState","errors","isDirty","isValid","isSubmitting","useForm","_jsx","_Fragment","children","_jsxs","Row","Col","md","src","sidebarLogo","onSubmit","email","localStorage","getItem","getVerifyOtp","noValidate","Form","Group","props","RexettButton","text","variant","isLoading","onClick","resendOtpSys","resendOtpDispatch","RexettSpinner","authLoginImg"],"sourceRoot":""}