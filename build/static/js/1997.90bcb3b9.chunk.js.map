{"version":3,"file":"static/js/1997.90bcb3b9.chunk.js","mappings":"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","sources":["pages/developer/DeveloperEditProfile.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ClientStep1 from \"../Registration flows/Client Registration flow/ClientStep1\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport ScreenLoader from \"../../components/atomic/ScreenLoader\";\r\nimport { getDeveloperActiveStepFields, getStepDataFromAPI } from \"../Registration flows/registrationConstant\";\r\nimport ProfileWrapper from \"../../components/common/EditProfile/ProfileWrapper\";\r\nimport { fileUploadForWeb, getDeveloperProfileDetails } from \"../../redux/slices/developerDataSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport { getCoutriesList, getCitiesList, getStatesList, getTimeZoneForCountry } from \"../../redux/slices/clientDataSlice\";\r\nimport { developerRegistration } from \"../../redux/slices/developerDataSlice\";\r\nimport AllRoleEditProfile from \"../../components/common/EditProfile/AllRoleEditProfile\";\r\n\r\n\r\n\r\nconst DeveloperEditProfile = () => {\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    reset,\r\n    formState: { errors },\r\n    watch,\r\n    setError,\r\n    setValue,\r\n    clearErrors,\r\n  } = useForm({});\r\n  const dispatch = useDispatch()\r\n  const { smallLoader, developerRegistrationData } = useSelector(\r\n    (state) => state?.developerData\r\n  );\r\n  const [previewImage, setPreviewImage] = useState({\r\n    profile_picture: \"\",\r\n    resume: \"\",\r\n    introVideo: \"\",\r\n  });\r\n  const [imageFile, setImageFile] = useState({\r\n    resume: \"\",\r\n    introVideo: \"\",\r\n  });\r\n\r\n  let userId = localStorage.getItem(\"userId\")\r\n\r\n  const onSubmit = (values) => {\r\n    // debugger;\r\n    console.log(values, \"va\");\r\n\r\n    const uploadFiles = (files) => {\r\n      let uploadedUrls = {};\r\n\r\n      const uploadPromises = Object.keys(files).map((key) => {\r\n        if (files[key]) {\r\n          let fileData = new FormData();\r\n          fileData.append(\"file\", files[key]);\r\n\r\n          return new Promise((resolve) => {\r\n            dispatch(\r\n              fileUploadForWeb(fileData, (url) => {\r\n                console.log(url, `${key} url`);\r\n                uploadedUrls[key] = url;\r\n                resolve();\r\n              })\r\n            );\r\n          });\r\n        } else {\r\n          return Promise.resolve(); // Resolve immediately if no file to upload\r\n        }\r\n      });\r\n\r\n      Promise.all(uploadPromises).then(() => {\r\n        let payload = {\r\n          first_name: values?.first_name,\r\n          last_name: values?.last_name,\r\n          profile_picture: uploadedUrls?.profile_picture,\r\n          profession: values?.professional_title,\r\n          email: values?.email,\r\n          country: values?.country_code?.label,\r\n          address: values?.address,\r\n          password: values?.password,\r\n          language_preference: values?.language_preference,\r\n          total_experience: values?.total_experience,\r\n          // city: values?.city,\r\n          city: null,\r\n          confirm_password: values?.confirm_password,\r\n          state: values?.state_iso_code?.label,\r\n          country_iso_code: values?.country_iso_code?.value,\r\n          state_iso_code: values?.state_iso_code?.value,\r\n          passcode: values?.passcode,\r\n          country_code: values?.country_code?.value,\r\n          phone_number: values?.phone_number,\r\n          language_proficiency: values?.language_proficiency?.value,\r\n          time_zone: values?.time_zone?.value,\r\n          resume: uploadedUrls?.resume ? uploadedUrls?.resume : values?.resume,\r\n          linkedin_url: values?.linkedin_url,\r\n          github_url: values?.github_url,\r\n          intro_video_url: uploadedUrls?.introVideo ? uploadedUrls?.introVideo : values?.intro_video_url,\r\n          user_id: userId,\r\n          is_2FA_enabled: values?.is_2FA_enabled,\r\n          tax_id: values?.tax_id,\r\n          cin: values?.cin,\r\n          address_2: values?.address_2,\r\n          company_name: values?.company_name,\r\n          company_tax_id: values?.company_tax_id\r\n        };\r\n\r\n        dispatch(developerRegistration(payload));\r\n      });\r\n    };\r\n    uploadFiles({\r\n      resume: imageFile.resume,\r\n      introVideo: imageFile.introVideo,\r\n      profile_picture: imageFile.profile_picture,\r\n    });\r\n  }\r\n\r\n\r\n  const toggleConfirmationModal = (e) => {\r\n    // Handle toggle confirmation modal\r\n  };\r\n\r\n  const [screenLoader, setScreenLoader] = React.useState(false); // Assuming screenLoader is a state\r\n\r\n  const activeStep = 1; // Assuming activeStep is defined somewhere\r\n  const nestedActiveStep = 0; // Assuming nestedActiveStep is defined somewhere\r\n  const activeStepFields = getDeveloperActiveStepFields(\r\n    activeStep,\r\n    nestedActiveStep\r\n  );\r\n\r\n  let stepData = getStepDataFromAPI(developerRegistrationData, activeStep);\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      dispatch(getDeveloperProfileDetails(userId));\r\n      dispatch(getCoutriesList());\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"country\")?.value) {\r\n      dispatch(getStatesList(watch(\"country\")?.value));\r\n      dispatch(getTimeZoneForCountry(watch(\"country\")?.value));\r\n    }\r\n  }, [watch(\"country\")]);\r\n\r\n  useEffect(() => {\r\n    if (watch(\"state\")?.value) {\r\n      dispatch(getCitiesList(watch(\"country\")?.value, watch(\"state\")?.value));\r\n      setValue(\"city\", null);\r\n    }\r\n  }, [watch(\"state\")]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <ProfileWrapper>\r\n        <div>\r\n          {screenLoader ? (\r\n            <ScreenLoader />\r\n          ) : (\r\n            <AllRoleEditProfile role=\"developer\" name={'individual'} onSubmit={onSubmit} activeStep={activeStep} previewImage={previewImage} imageFile={imageFile} setImageFile={setImageFile} setPreviewImage={setPreviewImage} stepData={stepData} activeStepFields={activeStepFields} />\r\n          )}\r\n        </div>\r\n      </ProfileWrapper>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeveloperEditProfile;\r\n"],"names":["DeveloperEditProfile","handleSubmit","register","control","reset","formState","errors","watch","setError","setValue","clearErrors","useForm","dispatch","useDispatch","smallLoader","developerRegistrationData","useSelector","state","developerData","previewImage","setPreviewImage","useState","profile_picture","resume","introVideo","imageFile","setImageFile","userId","localStorage","getItem","screenLoader","setScreenLoader","React","activeStepFields","getDeveloperActiveStepFields","stepData","getStepDataFromAPI","useEffect","getDeveloperProfileDetails","getCoutriesList","_watch","_watch2","_watch3","value","getStatesList","getTimeZoneForCountry","_watch4","_watch5","_watch6","getCitiesList","_jsx","_Fragment","children","ProfileWrapper","ScreenLoader","AllRoleEditProfile","role","name","onSubmit","values","console","log","files","uploadedUrls","uploadPromises","Object","keys","map","key","fileData","FormData","append","Promise","resolve","fileUploadForWeb","url","all","then","_values$country_code","_values$state_iso_cod","_values$country_iso_c","_values$state_iso_cod2","_values$country_code2","_values$language_prof","_values$time_zone","payload","first_name","last_name","profession","professional_title","email","country","country_code","label","address","password","language_preference","total_experience","city","confirm_password","state_iso_code","country_iso_code","passcode","phone_number","language_proficiency","time_zone","linkedin_url","github_url","intro_video_url","user_id","is_2FA_enabled","tax_id","cin","address_2","company_name","company_tax_id","developerRegistration","uploadFiles","activeStep"],"sourceRoot":""}