{"version":3,"file":"static/js/5488.70cbb62f.chunk.js","mappings":"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","sources":["pages/websiteRegisterForm/client/Step1.jsx","pages/websiteRegisterForm/client/RemainingSteps.jsx","pages/websiteRegisterForm/client/ClientRegisterForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FaEye, FaEyeSlash } from \"react-icons/fa\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport CommonInput from \"../../../components/atomic/CommonInput\";\r\nimport CommonAutocomplete from \"../../../components/atomic/CommonAutoComplete\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { getAllCountries } from \"../../../redux/slices/authenticationDataSlice\";\r\nimport { COMPANY_TYPE_SELECT_OPTIONS } from \"./constant\";\r\n// import CommonReactSelect from \"../../../components/atomic/CommonReactSelect\";\r\nimport CommonReactSelect from \"../../../components/atomic/CommonReactSelect\";\r\nimport {\r\n  getCitiesList,\r\n  getCoutriesList,\r\n  getStatesList,\r\n  getTimeZoneForCountry,\r\n} from \"../../../redux/slices/clientDataSlice\";\r\nimport { validatePassword } from \"../../../components/utils\";\r\nimport PasswordSection from \"../developer/PasswordSection\";\r\nimport LocationSection from \"../developer/LocationSection\";\r\n\r\nconst Step1 = ({\r\n  register,\r\n  errors,\r\n  control,\r\n  setValue,\r\n  setError,\r\n  clearErrors,\r\n  watch,\r\n  headingData,\r\n  selectedImage,\r\n  setSelectedImage,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const [file, setFile] = useState(null);\r\n  const GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_API;\r\n\r\n  const handleFileChange = (event, field) => {\r\n    const file = event.target.files[0];\r\n    setFile(file);\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"card-box\">\r\n        <div className=\"d-flex gap-3 align-items-center pb-2 mb-3 border-bottom-grey\">\r\n          <h2>{headingData.h1}</h2>\r\n          <p>{headingData.para}</p>\r\n        </div>\r\n        <div>\r\n          <Row className=\"mb-4\">\r\n            <Col md=\"6\">\r\n              <div className=\"inner-form\">\r\n                <div>\r\n                  <CommonInput\r\n                    // label={t(\"As Individual\")}\r\n                    name=\"client_type\"\r\n                    control={control}\r\n                    rules={{ required: \"Client type  is required\" }}\r\n                    error={errors?.client_type}\r\n                    type=\"radio\"\r\n                    options={[\r\n                      { label: \"As Individual\", value: \"individual\" },\r\n                      { label: \"As Company\", value: \"company\" },\r\n                    ]}\r\n                  />\r\n                </div>\r\n                {watch(\"client_type\") === \"company\" && (\r\n                  <>\r\n                    <CommonInput\r\n                      label={t(\"Type of Company\") + \" *\"}\r\n                      name=\"company_type\"\r\n                      type=\"select\"\r\n                      control={control}\r\n                      rules={{ required: \"Type of company is required\" }}\r\n                      error={errors?.company_type}\r\n                      selectOptions={COMPANY_TYPE_SELECT_OPTIONS}\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"Name of Company\") + \" *\"}\r\n                      name=\"company_name\"\r\n                      control={control}\r\n                      rules={{ required: \"Name of company is required\" }}\r\n                      error={errors?.company_name}\r\n                    />\r\n                    <CommonAutocomplete\r\n                      label={t(\"Company Address\") + \" *\"}\r\n                      name=\"company_address\"\r\n                      control={control}\r\n                      rules={{ required: \"Company address is required\" }}\r\n                      error={errors?.company_address}\r\n                      apiKey={GOOGLE_MAP_API_KEY}\r\n                      onPlaceSelected={(place) => {\r\n                        setValue(\"company_address\", place.formatted_address);\r\n                      }}\r\n                      onChange={(e) => {\r\n                        setValue(\"company_address\", e.target.value);\r\n                      }}\r\n                      options={{ types: [\"establishment\", \"geocode\"] }}\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"Tax ID\") + \" *\"}\r\n                      name=\"company_tax_id\"\r\n                      control={control}\r\n                      rules={{ required: \"Tax ID is required\" }}\r\n                      error={errors?.company_tax_id}\r\n                    />\r\n                  </>\r\n                )}\r\n                <CommonInput\r\n                  label={t(\"Name\") + \" *\"}\r\n                  name=\"name\"\r\n                  control={control}\r\n                  rules={{ required: \"Name is required\" }}\r\n                  error={errors.name}\r\n                />\r\n                <CommonInput\r\n                  label={t(\"email\") + \" *\"}\r\n                  name=\"email\"\r\n                  control={control}\r\n                  rules={{\r\n                    required: \"Email is required\",\r\n                    pattern: {\r\n                      value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                      message: \"Invalid email format\",\r\n                    },\r\n                  }}\r\n                  error={errors.email}\r\n                  // readOnly\r\n                />\r\n                <PasswordSection\r\n                  control={control}\r\n                  errors={errors}\r\n                  setError={setError}\r\n                  clearErrors={clearErrors}\r\n                  watch={watch}\r\n                />{\" \"}\r\n                <CommonAutocomplete\r\n                  label={t(\"address\") + \" *\"}\r\n                  name=\"address\"\r\n                  control={control}\r\n                  rules={{ required: \"Address is required\" }}\r\n                  error={errors.address}\r\n                  apiKey={GOOGLE_MAP_API_KEY}\r\n                  onPlaceSelected={(place) => {\r\n                    setValue(\"address\", place.formatted_address);\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setValue(\"address\", e.target.value);\r\n                  }}\r\n                  options={{ types: [\"establishment\", \"geocode\"] }}\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col md=\"6\">\r\n              <div>\r\n                <CommonInput\r\n                  label={t(\"phone\") + \"*\"}\r\n                  name=\"phone_number\"\r\n                  control={control}\r\n                  type=\"phone\"\r\n                  rules={{\r\n                    required: \"Phone Number is required\",\r\n                    pattern: {\r\n                      value: /^\\+?[0-9]{10,14}$/,\r\n                      message: \"Please enter a valid phone number\",\r\n                    },\r\n                  }}\r\n                  error={errors.phone_number}\r\n                />\r\n                {/* <CommonInput\r\n                    label={t(\"city\") + \"*\"}\r\n                    name=\"city\"\r\n                    control={control}\r\n                    rules={{\r\n                      required: \"City is required\",\r\n                      pattern: {\r\n                        value: /^[A-Za-z\\s]+$/,\r\n                        message:\r\n                          \"City should not contain numbers or special characters\",\r\n                      },\r\n                    }}\r\n                    error={errors.city}\r\n                  /> */}\r\n                {/* <CommonInput\r\n                    label={t(\"postCode\") + \"*\"}\r\n                    name=\"passcode\"\r\n                    control={control}\r\n                    rules={{\r\n                      required: \"Postcode is required\",\r\n                      pattern: {\r\n                        value: /^[0-9]+$/,\r\n                        message: \"Postcode should only contain numbers\",\r\n                      },\r\n                    }}\r\n                    error={errors.passcode}\r\n                  /> */}\r\n\r\n                {/* <CommonInput\r\n                    label={t(\"country\") + \"*\"}\r\n                    name=\"country\"\r\n                    type=\"select\"\r\n                    control={control}\r\n                    rules={{\r\n                      required: \"Country is required\",\r\n                      pattern: {\r\n                        value: /^[A-Za-z\\s]+$/,\r\n                        message:\r\n                          \"Country should not contain numbers or special characters\",\r\n                      },\r\n                    }}\r\n                    selectOptions={countries}\r\n                    error={errors.country}\r\n                  /> */}\r\n\r\n                {/* <CommonInput\r\n                    label={t(\"state\") + \"*\"}\r\n                    name=\"state\"\r\n                    type=\"select\"\r\n                    control={control}\r\n                    rules={{\r\n                      required: \"State is required\",\r\n                      pattern: {\r\n                        value: /^[A-Za-z\\s]+$/,\r\n                        message:\r\n                          \"Country should not contain numbers or special characters\",\r\n                      },\r\n                    }}\r\n                    error={errors?.state}\r\n                    selectOptions={countries}\r\n                  /> */}\r\n                {/* <CommonInput\r\n                    label={t(\"City\") + \"*\"}\r\n                    name=\"city\"\r\n                    type=\"select\"\r\n                    control={control}\r\n                    rules={{\r\n                      required: \"City is required\",\r\n                      pattern: {\r\n                        value: /^[A-Za-z\\s]+$/,\r\n                        message:\r\n                          \"Country should not contain numbers or special characters\",\r\n                      },\r\n                    }}\r\n                    selectOptions={countries}\r\n                    error={errors?.country}\r\n                  /> */}\r\n\r\n                <LocationSection\r\n                  control={control}\r\n                  errors={errors}\r\n                  watch={watch}\r\n                  setValue={setValue}\r\n                  setError={setError}\r\n                  clearErrors={clearErrors}\r\n                />\r\n                {/* <CommonReactSelect\r\n                  name=\"country_code\"\r\n                  errors={errors}\r\n                  handleChange={handleDropDownChange}\r\n                  watch={watch}\r\n                  control={control}\r\n                  required=\"Country is required\"\r\n                  label=\"Country\"\r\n                  type=\"country\"\r\n                  options={countriesList}\r\n                />\r\n\r\n                <CommonReactSelect\r\n                  name=\"state_iso_code\"\r\n                  errors={errors}\r\n                  handleChange={handleDropDownChange}\r\n                  watch={watch}\r\n                  control={control}\r\n                  required=\"State is required\"\r\n                  label=\"State\"\r\n                  type=\"state\"\r\n                  options={statesList}\r\n                />\r\n                <CommonReactSelect\r\n                  name=\"city\"\r\n                  errors={errors}\r\n                  handleChange={handleDropDownChange}\r\n                  control={control}\r\n                  // required=\"City is required\"\r\n                  label=\"City\"\r\n                  type=\"city\"\r\n                  watch={watch}\r\n                  options={citiesList}\r\n                /> */}\r\n\r\n                <CommonInput\r\n                  label={t(\"Passcode\") + \"*\"}\r\n                  name=\"passcode\"\r\n                  control={control}\r\n                  rules={{\r\n                    required: \"Postcode is required\",\r\n                    // pattern: {\r\n                    //   value: /^[0-9]+$/,\r\n                    //   message: \"Postcode should only contain numbers\",\r\n                    // },\r\n                  }}\r\n                  error={errors.passcode}\r\n                />\r\n                {/* <Form.Label>Image</Form.Label>\r\n                <Form.Label\r\n                  htmlFor=\"developer-image\"\r\n                  className=\"upload-image-label d-block\"\r\n                >\r\n                  <HiUpload />\r\n                  {t(\"uploadImage\")}\r\n                </Form.Label>\r\n                <Controller\r\n                  name=\"profile_picture\"\r\n                  control={control}\r\n                  rules={{ required: false }}\r\n                  render={({ field }) => (\r\n                    <input\r\n                      {...field}\r\n                      id=\"developer-image\"\r\n                      className=\"visually-hidden common-field\"\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      onChange={(e) => {\r\n                        handleFileChange(e, field);\r\n                        field.onChange(e);\r\n                      }}\r\n                    />\r\n                  )}\r\n                /> */}\r\n                <div>\r\n                  {selectedImage && (\r\n                    <img\r\n                      src={selectedImage && selectedImage}\r\n                      // alt=\"Selected\"\r\n                      className=\"uploaded-image\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default Step1;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ScreenLoader from \"../../../components/atomic/ScreenLoader\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\nimport CommonInput from \"../../../components/atomic/CommonInput\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { formatSkillOptionsForSelect } from \"./constant\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport DateSection from \"../developer/DateSection\";\r\n// this component will be used for  step 2,3,4,5,6,7,8\r\nconst RemainingSteps = ({\r\n  headingData,\r\n  name,\r\n  inputType,\r\n  label,\r\n  watch,\r\n  skillList,\r\n  register,\r\n  control,\r\n  options,\r\n  setError,\r\n  clearErrors,\r\n  errors,\r\n  setValue,\r\n}) => {\r\n  // const { skillList } = useSelector((state) => state.clientData);\r\n  const [skillOptions, setSkillOptions] = useState([]);\r\n  useEffect(() => {\r\n    if (skillList?.length) {\r\n      setSkillOptions(formatSkillOptionsForSelect(skillList));\r\n    }\r\n  }, [skillList]);\r\n  return (\r\n    <>\r\n      <section className=\"card-box\">\r\n        <div className=\"d-flex gap-3 align-items-center pb-2 mb-3 border-bottom-grey\">\r\n          <h2>{headingData.h1}</h2>\r\n          <p>{headingData.para}</p>\r\n        </div>\r\n        <div>\r\n          <Row className=\"mb-4\">\r\n            <Col md=\"6\">\r\n              <div className=\"inner-form\">\r\n                <div>\r\n                  {inputType === \"radio\" && (\r\n                    <CommonInput\r\n                      label={headingData.h1}\r\n                      name={name}\r\n                      control={control}\r\n                      rules={{ required: `This field  is required` }}\r\n                      error={errors[name]}\r\n                      type=\"radio\"\r\n                      options={options}\r\n                    />\r\n                  )}\r\n                  {inputType === \"multi-select\" && (\r\n                    <CommonInput\r\n                      label={label}\r\n                      name={name}\r\n                      isMulti={true}\r\n                      type=\"multi-select\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: \"This field is required\",\r\n                      }}\r\n                      selectOptions={skillOptions}\r\n                      error={errors?.[name]}\r\n                    />\r\n                  )}\r\n                  {inputType === \"date\" && (\r\n                    <>\r\n                      <CommonInput\r\n                        type=\"date\"\r\n                        name={name}\r\n                        control={control}\r\n                        label={\"Select your Date\"}\r\n                        isMinRequired={true}\r\n                        rules={{ required: \"This field is required\" }}\r\n                        error={errors?.[name]}\r\n                      />\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label className=\"common-label\">\r\n                          Select start time\r\n                        </Form.Label>\r\n                        <div className=\"position-relative\">\r\n                          <Form.Control\r\n                            {...register(\"meeting_start_time\", {\r\n                              required: \"Start time is required\",\r\n                              validate: (value) => {\r\n                                const endTime = watch(\"meeting_end_time\");\r\n                                if (endTime && value >= endTime) {\r\n                                  return \"Start time must be before end time\";\r\n                                }\r\n                                return true;\r\n                              },\r\n                            })}\r\n                            type=\"time\"\r\n                            className=\"common-field\"\r\n                          />\r\n                          {/* <Controller\r\n                            name=\"meeting_start_time\"\r\n                            control={control}\r\n                            rules={{\r\n                              required: \"Start time is required\",\r\n                              validate: (value) => {\r\n                                const endTime = watch(\"meeting_end_time\");\r\n                                if (endTime && value >= endTime) {\r\n                                  return \"Start time must be before end time\";\r\n                                }\r\n                                return true;\r\n                              },\r\n                            }}\r\n                            render={({ field }) => (\r\n                              <Form.Control\r\n                                {...field}\r\n                                rules\r\n                                type=\"time\"\r\n                                className=\"common-field\"\r\n                              />\r\n                            )}\r\n                          /> */}\r\n                        </div>\r\n                        {errors?.meeting_start_time && (\r\n                          <p className=\"error-message\">\r\n                            {errors?.meeting_start_time?.message}\r\n                          </p>\r\n                        )}\r\n                      </Form.Group>\r\n\r\n                      <Form.Group className=\"mb-3\">\r\n                        <Form.Label className=\"common-label\">\r\n                          Select end time\r\n                        </Form.Label>\r\n                        <div className=\"position-relative\">\r\n                          <Form.Control\r\n                            {...register(\r\n                              \"meeting_end_time\",\r\n                              {\r\n                                required: \"End time is required\",\r\n                              },\r\n                              (onchange = (e) => {\r\n                                const startTime = watch(\"meeting_start_time\");\r\n                                const endTime = watch(\"meeting_end_time\");\r\n                                if (endTime) {\r\n                                  if (startTime < endTime) {\r\n                                    clearErrors(\"meeting_start_time\");\r\n                                  } else {\r\n                                    setError(\"meeting_start_time\", {\r\n                                      type: \"manual\",\r\n                                      message:\r\n                                        \"Start time must be before end time\",\r\n                                    });\r\n                                  }\r\n                                }\r\n                              })\r\n                            )}\r\n                            type=\"time\"\r\n                            className=\"common-field\"\r\n                          />\r\n                        </div>\r\n                        {errors?.meeting_end_time && (\r\n                          <p className=\"error-message\">\r\n                            {errors?.meeting_end_time?.message}\r\n                          </p>\r\n                        )}\r\n                      </Form.Group>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RemainingSteps;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport CommonInput from \"../../../components/atomic/CommonInput\";\r\nimport ScreenLoader from \"../../../components/atomic/ScreenLoader\";\r\nimport CommonAutocomplete from \"../../../components/atomic/CommonAutoComplete\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { getAllCountries } from \"../../../redux/slices/authenticationDataSlice\";\r\nimport StepperFormWrapper from \"../../../components/common/websiteRegisterStepsForm/StepperFormWrapper\";\r\nimport Step1 from \"./Step1\";\r\nimport Step2 from \"./Step2\";\r\nimport Step3 from \"./Step3\";\r\nimport {\r\n  VERIFY_USER_MESSAGE,\r\n  convertSkills,\r\n  getActiveStepOptions,\r\n  getCurrentStepper,\r\n  getKeysForActiveStep,\r\n} from \"./constant\";\r\nimport {\r\n  applyAsClient,\r\n  clientPostJob,\r\n  getCoutriesList,\r\n  getSkillList,\r\n  getWebClientData,\r\n  getWebClientLookUp,\r\n  getWebsiteSkills,\r\n  sendVerificationOtp,\r\n  verifyOtp,\r\n} from \"../../../redux/slices/clientDataSlice\";\r\nimport RemainingSteps from \"./RemainingSteps\";\r\nimport ConfirmationModal from \"../../../components/common/Modals/ConfirmationModal\";\r\nimport Otp from \"../../Authentication/Otp\";\r\nimport LastStep from \"../developer/LastStep\";\r\n\r\nconst ClientRegisterForm = ({ role }) => {\r\n  const { t } = useTranslation();\r\n  const {\r\n    register,\r\n    control,\r\n    reset,\r\n    setError,\r\n    clearErrors,\r\n    watch,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({});\r\n  const clientId = localStorage.getItem(\"clientId\");\r\n  const [activeStep, setActiveStep] = useState(1);\r\n  const [email, setEmail] = useState(null);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [showVerificationModal, setShowVerificationModal] = useState(false);\r\n  const [step, setStep] = useState(\"register\");\r\n\r\n  // const toggleVerificationModal = () =>\r\n  //   setShowVerificationModal(!showVerificationModal);\r\n  const dispatch = useDispatch();\r\n  const { skillList, clientLook, webClientData, smallLoader, screenLoader } =\r\n    useSelector((state) => state.clientData);\r\n  const handleStep = (stepAction, completedStep) => {\r\n    if (stepAction === \"verify\") {\r\n      setShowVerificationModal(true);\r\n      setStep(\"verify\");\r\n    } else if (stepAction === \"verify-otp\") {\r\n      setStep(\"verify-otp\");\r\n      setShowVerificationModal(false);\r\n    } else if (\"otp-verify-success\") {\r\n      setStep(\"register\");\r\n      setActiveStep(Number(completedStep));\r\n      setShowVerificationModal(false);\r\n    }\r\n  };\r\n  let { name, inputType, headingData, label, optionKey } =\r\n    getCurrentStepper(activeStep);\r\n\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n\r\n  const labelAndValue = clientLook[name]?.map((item) => {\r\n    return { value: item.slug, label: item.name };\r\n  });\r\n\r\n  useEffect(() => {\r\n    const storedStep = localStorage.getItem(\"clientActiveStep\");\r\n    if (storedStep) {\r\n      setActiveStep(Number(storedStep));\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (activeStep === 1) {\r\n      setValue(\"client_type\", \"individual\");\r\n      dispatch(getCoutriesList());\r\n    }\r\n    dispatch(getWebClientLookUp());\r\n  }, []);\r\n  const increaseActiveStep = () => {\r\n    setActiveStep((prev) => prev + 1);\r\n    localStorage.setItem(\"clientActiveStep\", activeStep + 1);\r\n  };\r\n  const decreaseActiveStep = () => {\r\n    setActiveStep((prev) => prev - 1);\r\n    localStorage.setItem(\"clientActiveStep\", activeStep - 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let originalSkillArray = [];\r\n    if (activeStep === 6) {\r\n      dispatch(\r\n        getWebsiteSkills((skillArray) => {\r\n          originalSkillArray = skillArray;\r\n        })\r\n      );\r\n    }\r\n    if (clientId) {\r\n      dispatch(\r\n        getWebClientData(clientId, (data) => {\r\n          if (data) {\r\n            const keysForActiveStep = getKeysForActiveStep(activeStep);\r\n            keysForActiveStep.map((key) => {\r\n              if (key === \"country_code\") {\r\n                const newValue = { label: data[\"country\"], value: data[key] };\r\n                setValue(key, newValue);\r\n              } else if (key === \"state_iso_code\") {\r\n                const newValue = { label: data[\"state\"], value: data[key] };\r\n                setValue(key, newValue);\r\n              } else if (key === \"password\") {\r\n                // setValue(\"confirm_password\", data[key]);\r\n                // setValue(\"password\", data[key]);\r\n              } else if (key === \"profile_picture\") {\r\n                setSelectedImage(data[key]);\r\n                setValue(key, data[key]);\r\n              } else if (key === \"email\") {\r\n                setEmail(data[key]);\r\n                setValue(key, data[key]);\r\n              } else if (\r\n                key === \"engagement_type\" ||\r\n                key === \"project_length\"\r\n              ) {\r\n                setValue(key, data.jobs[0][key]);\r\n              } else if (key === \"when_should_the_development_start\") {\r\n                setValue(key, data?.jobs[0][\"development_should_start_in\"]);\r\n              } else if (key === \"availability\") {\r\n                setValue(key, data?.jobs[0][\"contract_type\"]);\r\n              } else if (key === \"skills\") {\r\n                const skillsForSelect = convertSkills({\r\n                  convertTo: \"array\",\r\n                  string: data?.jobs[0][key],\r\n                  originalSkillArray: originalSkillArray,\r\n                });\r\n                setValue(key, skillsForSelect);\r\n              } else {\r\n                setValue(key, data[key]);\r\n              }\r\n            });\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }, [activeStep, showVerificationModal]);\r\n\r\n  const onSubmit = (stepData) => {\r\n    let payload = {};\r\n    if (activeStep === 1) {\r\n      payload = {\r\n        ...stepData,\r\n        country_code: stepData[\"country_code\"]?.value,\r\n        state_iso_code: stepData[\"state_iso_code\"]?.value,\r\n        country: stepData[\"country_code\"]?.label,\r\n        state: stepData[\"state_iso_code\"]?.label,\r\n        company_type: stepData[\"company_type\"]?.value\r\n          ? stepData[\"company_type\"]?.value\r\n          : null,\r\n        profile_picture: selectedImage,\r\n      };\r\n      dispatch(\r\n        applyAsClient(\r\n          payload,\r\n          () => {\r\n            setActiveStep((prev) => prev + 1);\r\n          },\r\n          handleStep\r\n        )\r\n      );\r\n    } else if (activeStep === 6) {\r\n      payload = {\r\n        ...stepData,\r\n        client_id: clientId,\r\n      };\r\n      if (stepData?.[\"skills\"]?.length) {\r\n        payload = {\r\n          ...stepData,\r\n          client_id: clientId,\r\n          skills: convertSkills({\r\n            convertTo: \"string\",\r\n            options: stepData?.skills,\r\n          }),\r\n        };\r\n      }\r\n    } else {\r\n      // for step 2,3,4,5 and 7\r\n      let currentStepData;\r\n      const activeStepKeys = getKeysForActiveStep(activeStep);\r\n      activeStepKeys?.map((curKey) => {\r\n        if (curKey in stepData) {\r\n          currentStepData = {\r\n            ...currentStepData,\r\n            [curKey]: stepData[curKey],\r\n          };\r\n        }\r\n      });\r\n      payload = {\r\n        client_id: clientId,\r\n        ...currentStepData,\r\n      };\r\n    }\r\n    reset();\r\n    activeStep !== 1 && dispatch(clientPostJob(payload, increaseActiveStep));\r\n    // if (activeStep < 8) {\r\n    //   setActiveStep((prev) => prev + 1);\r\n    // }\r\n  };\r\n  const handleSendOtp = (e) => {\r\n    e.preventDefault();\r\n    const payload = { email: email };\r\n    dispatch(sendVerificationOtp(payload, handleStep));\r\n  };\r\n\r\n  const handleVerifyOtp = (otp) => {\r\n    dispatch(\r\n      verifyOtp({ email: email, otp: otp }, (completedStep) => {\r\n        handleStep(\"verify-otp-success\", completedStep);\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <section className=\"card-box\">\r\n        <div>\r\n          {screenLoader ? (\r\n            <ScreenLoader />\r\n          ) : (\r\n            step !== \"verify-otp\" && (\r\n              <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                {activeStep === 1 ? (\r\n                  <Step1\r\n                    register={register}\r\n                    errors={errors}\r\n                    control={control}\r\n                    selectedImage={selectedImage}\r\n                    setSelectedImage={setSelectedImage}\r\n                    watch={watch}\r\n                    setError={setError}\r\n                    clearErrors={clearErrors}\r\n                    setValue={setValue}\r\n                    headingData={headingData}\r\n                  />\r\n                ) : activeStep === 8 ? (\r\n                  <LastStep role={\"client\"} />\r\n                ) : (\r\n                  <RemainingSteps\r\n                    headingData={headingData}\r\n                    name={name}\r\n                    setValue={setValue}\r\n                    skillList={skillList}\r\n                    label={label}\r\n                    setError={setError}\r\n                    register={register}\r\n                    watch={watch}\r\n                    clearErrors={clearErrors}\r\n                    inputType={inputType}\r\n                    errors={errors}\r\n                    control={control}\r\n                    // client look contains the options data for all steps,and name contains active step key for options\r\n                    options={getActiveStepOptions(clientLook, optionKey)}\r\n                  />\r\n                )}\r\n\r\n                {/* {activeStep !== 8 && ( */}\r\n                <>\r\n                  {activeStep !== 8 && (\r\n                    <div className=\"text-center mr-2\">\r\n                      {activeStep !== 1 && (\r\n                        <RexettButton\r\n                          type=\"button\"\r\n                          text=\"Back\"\r\n                          onClick={decreaseActiveStep}\r\n                          className=\"main-btn outline-main-btn px-5\"\r\n                          // disabled={smallLoader}\r\n                          // isLoading={smallLoader}\r\n                        />\r\n                      )}\r\n                      <RexettButton\r\n                        type=\"submit\"\r\n                        text={activeStep < 8 ? \"Continue\" : t(\"submit\")}\r\n                        className=\"main-btn px-5\"\r\n                        // onClick={() => {\r\n                        //   setActiveStep((prev) => prev + 1);\r\n                        // }}\r\n                        // disabled={smallLoader}\r\n                        // isLoading={smallLoader}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </>\r\n                {/* )} */}\r\n              </form>\r\n            )\r\n          )}\r\n        </div>\r\n      </section>\r\n      {showVerificationModal && (\r\n        <ConfirmationModal\r\n          text={VERIFY_USER_MESSAGE}\r\n          show={showVerificationModal}\r\n          handleAction={handleSendOtp}\r\n          handleClose={() => {\r\n            setShowVerificationModal(false);\r\n          }}\r\n          submitText=\"Verify\"\r\n          smallLoader={smallLoader}\r\n        />\r\n      )}\r\n      {step === \"verify-otp\" && (\r\n        <Otp\r\n          email={email}\r\n          userType={\"client\"}\r\n          isRegisterStepForm={true}\r\n          isLoading={smallLoader}\r\n          handleVerifyOtp={handleVerifyOtp}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ClientRegisterForm;\r\n"],"names":["_ref","register","errors","control","setValue","setError","clearErrors","watch","headingData","selectedImage","setSelectedImage","t","useTranslation","file","setFile","useState","GOOGLE_MAP_API_KEY","process","_jsx","_Fragment","children","_jsxs","className","h1","para","Row","Col","md","CommonInput","name","rules","required","error","client_type","type","options","label","value","company_type","selectOptions","COMPANY_TYPE_SELECT_OPTIONS","company_name","CommonAutocomplete","company_address","apiKey","onPlaceSelected","place","formatted_address","onChange","e","target","types","company_tax_id","pattern","message","email","PasswordSection","address","phone_number","LocationSection","passcode","src","_errors$meeting_start","_errors$meeting_end_t","inputType","skillList","skillOptions","setSkillOptions","useEffect","length","formatSkillOptionsForSelect","isMulti","isMinRequired","Form","Group","Label","Control","validate","endTime","meeting_start_time","onchange","startTime","meeting_end_time","_clientLook$name","role","reset","handleSubmit","formState","useForm","clientId","localStorage","getItem","activeStep","setActiveStep","setEmail","showVerificationModal","setShowVerificationModal","step","setStep","dispatch","useDispatch","clientLook","webClientData","smallLoader","screenLoader","useSelector","state","clientData","handleStep","stepAction","completedStep","Number","optionKey","getCurrentStepper","map","item","id","title","slug","storedStep","getCoutriesList","getWebClientLookUp","increaseActiveStep","prev","setItem","originalSkillArray","getWebsiteSkills","skillArray","getWebClientData","data","getKeysForActiveStep","key","newValue","jobs","skillsForSelect","convertSkills","convertTo","string","ScreenLoader","onSubmit","stepData","payload","_stepData$country_cod","_stepData$state_iso_c","_stepData$country_cod2","_stepData$state_iso_c2","_stepData$company_typ","_stepData$company_typ2","country_code","state_iso_code","country","profile_picture","applyAsClient","_stepData$skills","client_id","skills","currentStepData","activeStepKeys","curKey","clientPostJob","noValidate","Step1","LastStep","RemainingSteps","getActiveStepOptions","RexettButton","text","onClick","decreaseActiveStep","ConfirmationModal","VERIFY_USER_MESSAGE","show","handleAction","preventDefault","sendVerificationOtp","handleClose","submitText","Otp","userType","isRegisterStepForm","isLoading","handleVerifyOtp","otp","verifyOtp"],"sourceRoot":""}