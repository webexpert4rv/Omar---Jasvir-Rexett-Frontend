{"version":3,"file":"static/js/2980.38561044.chunk.js","mappings":"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","sources":["components/atomic/NoDataFound.jsx","pages/admin/Modals/EditTimeReportModal.jsx","pages/admin/AdminTimeReporting.jsx","pages/admin/Modals/UploadInvoice.jsx"],"sourcesContent":["import React from 'react'\r\nimport errorImg from '../../assets/img/warning-icon.gif'\r\nconst NoDataFound = ({data}) => {\r\n  return (\r\n    <div className='no-data-container'>\r\n      <div className='no-data'>\r\n        <img src={errorImg} />{data?data:\"No Data Found\"}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoDataFound","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { adminTimeReporting, editTimeReporting } from \"../../../redux/slices/adminDataSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nconst EditTimeReport = ({ show, handleClose,adminTimeReportingList }) => {\r\n    const [devloperState,setDeveloperState]=useState([])\r\n    const {smallLoader}=useSelector(state=>state.adminData)\r\n    const dispatch =useDispatch()\r\n    const [time,setTime]=useState(null)\r\n    const [hours,setHours]=useState(null)\r\n    const { t } = useTranslation()\r\n\r\n    const handleClient=(e)=>{\r\n     let copyList=[...adminTimeReportingList]\r\n     let findData=copyList.find((item)=>item.client_details.id==e.target.value)\r\n     let devName=findData?.contracts.map((item)=>{\r\n        return { dev:item?.contractDetails?.developer.name,\r\n        time:item?.time_report?.totalDuration,\r\n        contract_id:item?.contractDetails?.id\r\n        }\r\n    })\r\n    setDeveloperState(devName)\r\n    }\r\n\r\n    useEffect(()=>{\r\n      return ()=>{\r\n        setTime(null)\r\n      }\r\n    },[])\r\n\r\n    const handleDeveloper=(e)=>{\r\n    let obj=JSON.parse(e.target.value)\r\n        setTime(obj)\r\n    }\r\n\r\n    const handleEditTime=async (e)=>{\r\n        e.preventDefault()\r\n        if(time==null){\r\n            return \r\n        }\r\n\r\n   let paylaod={\r\n    \"contract_id\": time?.contract_id,\r\n    \"total_hours\": hours\r\n  }\r\n  console.log(time.contractId,\"contractId\");\r\n  await dispatch(editTimeReporting(paylaod))\r\n  dispatch(adminTimeReporting())\r\n  setTime(null)\r\n  \r\n  handleClose()\r\n    }\r\n\r\n    const handleChange=(e)=>{\r\n        setHours(e.target.value)\r\n        setTime({\r\n            ...time,\r\n            time:e.target.value\r\n        })\r\n    }\r\n    return (\r\n        <Modal show={show} onHide={handleClose} centered className=\"custom-modal\" animation>\r\n            <Modal.Header closeButton className=\"border-0 pb-3\">\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h3 className=\"popup-heading\">{t(\"endTimeReport\")}</h3>\r\n                <Form>\r\n                    <Row>   \r\n                        {/* <Col md=\"12\">\r\n                            <Form.Group className=\"mb-4\">\r\n                                <Form.Select className=\"common-field\" onChange={handleClient}>\r\n                                    <option selected disabled>Select Client</option>\r\n                                     {\r\n                                       adminTimeReportingList?.map((item)=>{\r\n                                        return( <>\r\n                                          <option value={item?.client_details?.id}>{item?.client_details?.name}</option>\r\n                                        </>)\r\n                                       }) \r\n                                     }\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col> */}\r\n                        <Col md=\"12\">\r\n                            <Form.Group className=\"mb-4\">\r\n                                <Form.Select className=\"common-field\" onChange={handleDeveloper}>\r\n                                    <option selected disabled>Select Developer</option>\r\n                                     {\r\n                                       devloperState?.map((item)=>{\r\n                                        return( <>\r\n                                          <option value={JSON.stringify(item)}>{item?.dev}</option>\r\n                                        </>)\r\n                                       }) \r\n                                     }\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"12\">\r\n                            <Form.Group className=\"mb-4\">\r\n                                <Form.Select className=\"common-field\" onChange={handleDeveloper}>\r\n                                    <option selected disabled>Select Client</option>\r\n                                    <option>Amazon</option>\r\n                                    <option>Google</option>\r\n                                    <option>Volvo</option>\r\n                                    <option>BMW</option>\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <Form.Group className=\"mb-4\">\r\n                                <Form.Select className=\"common-field\" onChange={handleDeveloper}>\r\n                                    <option selected disabled>Select Month</option>\r\n                                    <option>January</option>\r\n                                    <option>Feburary</option>\r\n                                    <option>March</option>\r\n                                    <option>April</option>\r\n                                    <option>May</option>\r\n                                    <option>June</option>\r\n                                    <option>July</option>\r\n                                    <option>August</option>\r\n                                    <option>September</option>\r\n                                    <option>October</option>\r\n                                    <option>November</option>\r\n                                    <option>December</option>\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <Form.Group className=\"mb-4\">\r\n                                <Form.Select className=\"common-field\" onChange={handleDeveloper}>\r\n                                    <option selected disabled>Select Year</option>\r\n                                    <option>2024</option>\r\n                                    <option>2023</option>\r\n                                    <option>2022</option>\r\n                                    <option>2021</option>\r\n                                    <option>2020</option>\r\n                                    <option>2019</option>\r\n                                    <option>2018</option>\r\n                                    <option>2017</option>\r\n                                    </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"12\">\r\n                            <Form.Group className=\"mb-4\">\r\n                                <Form.Control type=\"text\" className=\"common-field\" placeholder=\"Enter Total Hours\" value={time?.time} name=\"name\" onChange={handleChange} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"12\">\r\n                            <Form.Group className=\"mb-4\">\r\n                                <Form.Control type=\"text\" as=\"textarea\" className=\"common-field\" placeholder=\"Enter reason for edit time sheet\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <div className=\"text-center\">\r\n                        <RexettButton\r\n                            type=\"submit\"\r\n                            text=\"Submit\"\r\n                            className=\"main-btn px-4 font-14 fw-semibold\"\r\n                            variant=\"transparent\"\r\n                            onClick={handleEditTime}\r\n                            isLoading={smallLoader}\r\n                        />\r\n                    </div>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nexport default EditTimeReport;","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport EditTimeReport from \"./Modals/EditTimeReportModal\";\r\nimport UploadInvoice from \"./Modals/UploadInvoice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { adminTimeReporting } from \"../../redux/slices/adminDataSlice\";\r\nimport ScreenLoader from \"../../components/atomic/ScreenLoader\";\r\nimport { getClientList } from \"../../redux/slices/vendorDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { IoSearch } from \"react-icons/io5\";\r\nimport NoDataFound from \"../../components/atomic/NoDataFound\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nconst AdminTimeReporting = () => {\r\n    const dispatch = useDispatch()\r\n    const { adminTimeReportingList, screenLoader, adminClientList } = useSelector(state => state.adminData)\r\n    const { clientList } = useSelector(state => state.vendorData);\r\n    const [contractId, setContractID] = useState(null);\r\n    const [showEditTimeModal, setShowEditTimeModal] = useState(false);\r\n    const [developerData, setDeveloperData] = useState([])\r\n    const { t } = useTranslation()\r\n    const navigate=useNavigate()\r\n\r\n    // useEffect(() => {\r\n    //     let newContacts = [...adminTimeReportingList?.raisedByDeveloperVendor];\r\n    //     let d = newContacts.map((item, index) => {\r\n    //         return {\r\n    //             ...item,\r\n    //             newData: item.contracts[index] ? item.contracts[index] : item.contracts[0]\r\n    //         };\r\n    //     });\r\n\r\n    //     setDeveloperData(d)\r\n\r\n    // }, [adminTimeReportingList])\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getClientList())\r\n    //      },[])\r\n\r\n\r\n    const handleShowEditTimeModal = () => {\r\n        setShowEditTimeModal(true);\r\n    };\r\n    const handleCloseEditTimeModal = () => {\r\n        setShowEditTimeModal(false);\r\n    };\r\n\r\n    const [showUploadInvoice, setShowUploadInvoice] = useState(false);\r\n    const handleShowUploadInvoice = (id) => {\r\n        setShowUploadInvoice(true);\r\n        setContractID(id)\r\n    };\r\n\r\n    const handleCloseUploadInvoice = () => {\r\n        setShowUploadInvoice(false);\r\n    };\r\n    useEffect(() => {\r\n        dispatch(adminTimeReporting())\r\n    }, [])\r\n\r\n    const contractName = (data) => {\r\n        let devName = data.map((item) => {\r\n            return { dev: item?.contractDetails?.developer.name }\r\n        })\r\n        return devName\r\n    }\r\n\r\n    const handleDeveloper = (e, inx) => {\r\n        let newInx = e.target.value\r\n        let newDev = [...developerData]\r\n        newDev[inx].newData = newDev[inx].contracts[newInx]\r\n        setDeveloperData(newDev)\r\n    }\r\n\r\n    const handleClientClick = (e) => {\r\n        dispatch(adminTimeReporting(e))\r\n    }\r\n    \r\n    const redirectToTimeReporting = (clientId) => {\r\n        navigate(`/admin-time-reporting-detail/${clientId}`)\r\n    }\r\n    return (\r\n        <>\r\n            <section>\r\n                <div className=\"filter-section mb-4\">\r\n                    <Form>\r\n                        <div className=\"d-md-flex gap-3 justify-content-between align-items-end\">\r\n                            <div className=\"mb-md-0 mb-3\">\r\n                                {/* <div>\r\n                                    <Form.Select className=\"filter-select shadow-none\" onClick={(e) => handleClientClick(e.target.value)}>\r\n                                        <option value=\"\" selected disabled>{t(\"selectClients\")}</option>\r\n                                        {\r\n                                            adminClientList?.map((item, index) => {\r\n                                                return (<>\r\n                                                    <option key={index} value={item.id}  >{item?.name}</option>\r\n                                                </>)\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                </div> */}\r\n                            </div>\r\n                            <div className=\"d-flex align-items-center gap-3\">\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"common-field font-14 shadow-none\"\r\n                                    placeholder=\"Enter Keyword...\"\r\n                                />\r\n                                <Button variant=\"transparent\" className=\"main-btn px-3 search-btn\">\r\n                                    <IoSearch />\r\n                                </Button>\r\n                            </div>\r\n                            {/* <div>\r\n                                <Button className=\"main-btn px-5\" onClick={handleShowEditTimeModal}>{t(\"editTimeReport\")}</Button>\r\n                            </div> */}\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table time-table table-bordered table-ui-custom\">\r\n                            <thead>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"clientName\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"totalHiredDevelopers\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"totalProjects\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"totalVendorDev\")}\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"totalIndivisualDev\")}\r\n\r\n                                </th>\r\n                                <th className=\"time-table-head\">\r\n                                    {t(\"contract\")}\r\n                                </th>\r\n                            </thead>\r\n                            <tbody>\r\n                                {screenLoader ? <ScreenLoader /> : <>\r\n                                    {adminTimeReportingList?.length > 0 ?\r\n                                        adminTimeReportingList?.map(({client_name,client_id,total_hired_developers,total_individual_dev,total_projects,total_vendors_dev,contracts}, index) => {\r\n                                            return (\r\n                                                <Fragment key={index}>\r\n                                                    <tr key={index} className=\"row-hover\" onClick={()=>{redirectToTimeReporting(client_id)}}>\r\n                                                        <td className=\"time-table-data\">{client_name}</td>\r\n                                                        <td className=\"time-table-data\">{total_hired_developers}</td>\r\n                                                        <td className=\"time-table-data\">{total_projects}</td>\r\n                                                        <td className=\"time-table-data\">{total_vendors_dev}</td>\r\n                                                        <td className=\"time-table-data\">{total_individual_dev}</td>\r\n                                                        <td className=\"time-table-data\">{}</td>\r\n                                                    </tr>\r\n                                                </Fragment>\r\n                                            )\r\n                                        })\r\n                                        : <td colSpan={6}><NoDataFound /></td>}\r\n                                </>}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"helper-text-section\">\r\n                        <h3>Guiding You Through: Helpful Text to Navigate Time Reporting</h3>\r\n                        <p>Admin can effortlessly review daily time sheets and promptly raise invoices for clients. Click on any client's name in the table above to delve deeper into their project and time reporting details. Gain insights and manage project progress with precision. Also you can raise invoice for clients and track the invoices for Devs , Vendors and Clients.</p>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <EditTimeReport show={showEditTimeModal} handleClose={handleCloseEditTimeModal} adminTimeReportingList={adminTimeReportingList} />\r\n            <UploadInvoice show={showUploadInvoice} handleClose={handleCloseUploadInvoice} contractId={contractId} role={\"admin\"} />\r\n        </>\r\n    )\r\n}\r\nexport default AdminTimeReporting;","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createNewFolderAndFile, filePreassignedUrlGenerate } from \"../../../redux/slices/clientDataSlice\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { MdPictureAsPdf } from \"react-icons/md\";\r\nconst UploadInvoice = ({ show, handleClose,contractId ,role}) => {\r\n    const [selectedFile, setSelectedFile] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const { smallLoader } = useSelector(state => state.clientData);\r\n    const {\r\n        register,\r\n        setValue,\r\n        handleSubmit,\r\n        formState: { errors, isDirty, isValid, isSubmitting },\r\n    } = useForm({});\r\n\r\n    const onSubmit = (values) => {\r\n        console.log(values?.file?.type, \"values\");\r\n    \r\n       \r\n         if (values.category === \"3\" && values.file_name[0].type !== \"application/pdf\") {\r\n            alert(\"Only PDF files are allowed for Invoices category.\");\r\n            return; \r\n        }\r\n    \r\n        let fileData = new FormData();\r\n        fileData.append(\"file\", selectedFile);\r\n    \r\n        dispatch(filePreassignedUrlGenerate(fileData, (url) => {\r\n            let data = {\r\n                \"contract_id\": contractId,\r\n                \"file_type\": 0,\r\n                \"parent_id\": 0,\r\n                \"type\": values.category,\r\n                \"s3_path\": url,\r\n                \"file_extension\": \"pdf\" \r\n            };\r\n            dispatch(createNewFolderAndFile(data, () => {\r\n                handleClose();\r\n            }));\r\n        }));\r\n    };\r\n    return (\r\n        <Modal show={show} onHide={handleClose} centered animation size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Upload File</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <div className=\"experience-container\">\r\n                        <Row>\r\n                            <Col md=\"12\">\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <Form.Label>Select Category</Form.Label>\r\n                                   { role ===\"admin\" ?  <Form.Select\r\n                                        {...register(\"category\", { required: \"Please select a Category\" })}\r\n                                    >\r\n                                        <option value=\"\" selected disabled>Select Category</option>\r\n                                        <option value=\"3\">Invoices</option>\r\n                                    </Form.Select> : <Form.Select\r\n                                        {...register(\"category\", { required: \"Please select a Category\" })}\r\n                                    >\r\n                                        <option value=\"\" selected disabled>Select Category</option>\r\n                                        <option value=\"3\">Invoices</option>\r\n                                        <option value=\"1\">Contracts</option>\r\n                                        <option value=\"2\">CV</option>\r\n                                        <option value=\"4\">Others</option>\r\n                                    </Form.Select>}\r\n                                    <Form.Control type=\"file\" className=\"d-none\" id=\"upload-file\"\r\n                                        name=\"file_name\"\r\n                                        {...register(\"file_name\", {\r\n                                            onChange: (e) => setSelectedFile(e.target.files[0]),\r\n                                            required: {\r\n                                                value: true,\r\n                                            },\r\n                                        })}\r\n                                    />\r\n                                    <Form.Label htmlFor=\"upload-file\" className=\"upload-file-label\">Upload File</Form.Label>\r\n                                </Form.Group>\r\n                                {selectedFile ? <div>Selected File:<span className=\"fs-6\">{selectedFile?.name}</span></div> : \"\"}\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                        <RexettButton\r\n                            type=\"submit\"\r\n                            text=\"Create\"\r\n                            className=\"main-btn px-4\"\r\n                            variant=\"transparent\"\r\n                            disabled={smallLoader}\r\n                            isLoading={smallLoader}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nexport default UploadInvoice;"],"names":["_ref","data","_jsx","className","children","_jsxs","src","errorImg","show","handleClose","adminTimeReportingList","devloperState","setDeveloperState","useState","smallLoader","useSelector","state","adminData","dispatch","useDispatch","time","setTime","hours","setHours","t","useTranslation","useEffect","handleDeveloper","e","obj","JSON","parse","target","value","Modal","onHide","centered","animation","Header","closeButton","Body","Form","Row","Col","md","Group","Select","onChange","selected","disabled","map","item","_Fragment","stringify","dev","Control","type","placeholder","name","as","RexettButton","text","variant","onClick","async","preventDefault","paylaod","contract_id","console","log","contractId","editTimeReporting","adminTimeReporting","isLoading","AdminTimeReporting","screenLoader","adminClientList","clientList","vendorData","setContractID","showEditTimeModal","setShowEditTimeModal","developerData","setDeveloperData","navigate","useNavigate","showUploadInvoice","setShowUploadInvoice","Button","IoSearch","ScreenLoader","length","index","client_name","client_id","total_hired_developers","total_individual_dev","total_projects","total_vendors_dev","contracts","Fragment","concat","colSpan","NoDataFound","EditTimeReport","handleCloseEditTimeModal","UploadInvoice","handleCloseUploadInvoice","role","selectedFile","setSelectedFile","clientData","register","setValue","handleSubmit","formState","errors","isDirty","isValid","isSubmitting","useForm","size","Title","onSubmit","values","_values$file","file","category","file_name","alert","fileData","FormData","append","filePreassignedUrlGenerate","url","createNewFolderAndFile","noValidate","Label","required","id","files","htmlFor"],"sourceRoot":""}