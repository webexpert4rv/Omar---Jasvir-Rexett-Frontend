{"version":3,"file":"static/js/4373.56729541.chunk.js","mappings":"2MAEA,MAUA,EAVoBA,IAAa,IAAZ,KAACC,GAAKD,EACzB,OACEE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,UAASC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKI,IAAKC,IAAaN,GAAU,oBAE/B,C,8GCDV,MAkGA,EAlGyBD,IAAgC,IAA/B,OAAEQ,EAAM,QAAEC,EAAO,KAAEC,GAAMV,GAChCW,EAAAA,EAAAA,MAAjB,MAEMC,EAAoBC,IACxBJ,EAAQI,EAAW,EAyErB,OACEX,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAV,UACEC,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAACZ,UAAU,uBAAsBC,SAAA,EAC1CF,EAAAA,EAAAA,KAACa,EAAAA,EAAWC,KAAI,CACdb,UAAU,+CACVc,QAASA,IAAML,EAAiBF,EAAO,GACvCQ,SAAmB,IAATR,KAEZR,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,SA9Ebe,MAC5B,MAAMC,EAAkB,GAExB,GAAIZ,GAAU,EAEZ,IAAK,IAAIa,EAAI,EAAGA,GAAKb,EAAQa,IAC3BD,EAAgBE,MACdpB,EAAAA,EAAAA,KAACa,EAAAA,EAAWQ,KAAI,CAEdpB,UAAU,yBACVqB,OAAQH,IAAMX,EACdO,QAASA,IAAML,EAAiBS,GAAGjB,SAElCiB,GALIA,QASN,CAELD,EAAgBE,MACdpB,EAAAA,EAAAA,KAACa,EAAAA,EAAWQ,KAAI,CAEdpB,UAAU,yBACVqB,OAAQ,IAAMd,EACdO,QAASA,IAAML,EAAiB,GAAGR,SAElC,GALI,IASLM,EAAO,GACTU,EAAgBE,MACdpB,EAAAA,EAAAA,KAACa,EAAAA,EAAWU,SAAQ,CAAkBP,UAAQ,GAArB,eAI7B,IAAK,IAAIG,EAAIK,KAAKC,IAAI,EAAGjB,EAAO,GAAIW,GAAKK,KAAKE,IAAIlB,EAAO,EAAGF,EAAS,GAAIa,IACvED,EAAgBE,MACdpB,EAAAA,EAAAA,KAACa,EAAAA,EAAWQ,KAAI,CAEdpB,UAAU,yBACVqB,OAAQH,IAAMX,EACdO,QAASA,IAAML,EAAiBS,GAAGjB,SAElCiB,GALIA,IAUPX,EAAOF,EAAS,GAClBY,EAAgBE,MACdpB,EAAAA,EAAAA,KAACa,EAAAA,EAAWU,SAAQ,CAAgBP,UAAQ,GAAnB,aAI7BE,EAAgBE,MACdpB,EAAAA,EAAAA,KAACa,EAAAA,EAAWQ,KAAI,CAEdpB,UAAU,yBACVqB,OAAQhB,IAAWE,EACnBO,QAASA,IAAML,EAAiBJ,GAAQJ,SAEvCI,GALIA,GAQX,CAEA,OAAOY,CAAe,EAYfD,MAEHjB,EAAAA,EAAAA,KAACa,EAAAA,EAAWc,KAAI,CACd1B,UAAU,0DACVc,QAASA,IAAML,EAAiBF,EAAO,GACvCQ,SAAUR,IAASF,QAGtB,C,8NCrFP,MAyNA,EAzNgBR,IAQT,IAAD8B,EAAA,IARW,qBACfC,EAAoB,KACpBC,EAAI,KACJ/B,EAAI,UACJgC,EAAS,KACTC,EAAI,QACJzB,EAAO,KACPC,GACDV,EACC,MAAMmC,GAAWC,EAAAA,EAAAA,OACX,oBAAEC,EAAmB,aAAEC,IAAgBC,EAAAA,EAAAA,KAC1CC,GAAUA,EAAMC,YAErBC,QAAQC,IAAIL,EAAa,gBACvB,MAAMM,GACJ1C,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACC,GAAG,UAAS1C,SACT,iBAAT4B,EACG,OACS,gBAATA,EACA,YACA,cAIFe,GAAsB7C,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACC,GAAG,UAAS1C,SAAC,WAiBlD,OACEF,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAV,SACGkC,GAAepC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAY,KAAM3C,EAAAA,EAAAA,MAAAS,EAAAA,SAAA,CAAAV,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4BAA2BC,UACnC,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMgD,QAAS,GACd/C,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAV,SACO,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMiD,KAAI,CAACC,EAAMC,KAAW,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EArBVC,EAsBhB,OACE1D,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAV,UACEC,EAAAA,EAAAA,MAAA,OACEF,UACM,OAAJgD,QAAI,IAAJA,GAAAA,EAAMU,SACF,iCACA,qBACLzD,SAAA,EAGDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAC3B4B,GAAiB,cAATA,EAAuB,UAAYA,KAE9C3B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,OACEC,UAAU,aACVc,QAAU6C,IAAC,IAAAC,EA9BHjB,EA8BG,OA9BHA,EA+BqB,OAAJK,QAAI,IAAJA,GAAe,QAAXY,EAAJZ,EAAMa,iBAAS,IAAAD,OAAX,EAAJA,EAAiBjB,QA9BpD,UAARZ,EACFC,EAAS,kCAAD8B,OAAmCnB,IACzB,UAATZ,GACTC,EAAS,2BAAD8B,OAA4BnB,IA2B6B,EAC5C1C,UAEDF,EAAAA,EAAAA,KAAA,OACEI,IACM,OAAJ6C,QAAI,IAAJA,GAAe,QAAXE,EAAJF,EAAMa,iBAAS,IAAAX,GAAfA,EAAiBa,gBACT,OAAJf,QAAI,IAAJA,GAAe,QAAXG,EAAJH,EAAMa,iBAAS,IAAAV,OAAX,EAAJA,EAAiBY,gBACjBC,EAENC,IAAI,YACJjE,UAAU,gBAGdE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAM,OAAJ+C,QAAI,IAAJA,GAAe,QAAXI,EAAJJ,EAAMa,iBAAS,IAAAT,OAAX,EAAJA,EAAiBc,QAC5CnE,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBC,SAAC,wBAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,aAAYC,SAAM,OAAJ+C,QAAI,IAAJA,GAAe,QAAXK,EAAJL,EAAMa,iBAAS,IAAAR,OAAX,EAAJA,EAAiBc,SAC5CjE,EAAAA,EAAAA,MAAA,MAAIF,UAAU,eAAcC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAACqE,EAAAA,GAAI,CAACC,GAAG,IAAGpE,UACVF,EAAAA,EAAAA,KAACuE,EAAAA,IAAQ,SAGbvE,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAACqE,EAAAA,GAAI,CAACC,GAAG,IAAGpE,UACVF,EAAAA,EAAAA,KAACwE,EAAAA,IAAU,YAOjBrE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,CAClB,UAAT8B,GACS,gBAATF,GACU,cAATA,GACS,iBAATA,GACO,UAATA,EAyBE,IAxBA9B,EAAAA,EAAAA,KAACyE,EAAAA,EAAc,CACbC,UAAU,SACVC,QAASjC,EAAqBxC,UAE9BF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACLC,QAAQ,SACR7D,SACgB,UAAde,EAEFhB,QAAU6C,GACR/B,EAAqB+B,EAAO,OAAJX,QAAI,IAAJA,OAAI,EAAJA,EAAML,GAAId,GAEpC7B,UAAU,8CAA6CC,SAE7C,iBAAT4B,GACC9B,EAAAA,EAAAA,KAAC8E,EAAAA,IAAa,IACH,gBAAThD,GACF9B,EAAAA,EAAAA,KAAC+E,EAAAA,IAAmB,KAEpB/E,EAAAA,EAAAA,KAACgF,EAAAA,IAAW,QAOV,UAAThD,IACChC,EAAAA,EAAAA,KAACyE,EAAAA,EAAc,CACbC,UAAU,SACVC,QAAS9B,EAAoB3C,UAE7BF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACLC,QAAQ,SACR9D,QAAU6C,GACR/B,EACE+B,EACI,OAAJX,QAAI,IAAJA,OAAI,EAAJA,EAAML,GACN,YAGJ5B,SACgB,UAAde,EAEF9B,UAAU,QAAOC,UAEjBF,EAAAA,EAAAA,KAACiF,EAAAA,IAAW,QAIR,UAATjD,IACChC,EAAAA,EAAAA,KAACyE,EAAAA,EAAc,CACbC,UAAU,MACVC,SAjIAjB,EAkIM,OAAJT,QAAI,IAAJA,GAAe,QAAXM,EAAJN,EAAMa,iBAAS,IAAAP,OAAX,EAAJA,EAAiB2B,mBAhI7ClF,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACC,GAAG,UAAS1C,SAClBwD,EAAS,0BAA4B,2BAgIZxD,UAEFF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACLC,QACM,OAAJ5B,QAAI,IAAJA,GAAe,QAAXO,EAAJP,EAAMa,iBAAS,IAAAN,GAAfA,EAAiB0B,kBACb,OACA,UAENnE,QAASA,KAAA,IAAAoE,EAAAC,EAAA,OACPvD,EACM,OAAJoB,QAAI,IAAJA,GAAe,QAAXkC,EAAJlC,EAAMa,iBAAS,IAAAqB,OAAX,EAAJA,EAAiBvC,GACb,OAAJK,QAAI,IAAJA,GAAe,QAAXmC,EAAJnC,EAAMa,iBAAS,IAAAsB,GAAfA,EAAiBF,kBAAoB,EAAI,EAC1C,EAEHjF,UAAU,mDAAkDC,SAEvD,OAAJ+C,QAAI,IAAJA,GAAe,QAAXQ,EAAJR,EAAMa,iBAAS,IAAAL,GAAfA,EAAiByB,mBAChBlF,EAAAA,EAAAA,KAACqF,EAAAA,IAAqB,KAEtBrF,EAAAA,EAAAA,KAAC8E,EAAAA,IAAa,qBAS7B,OAKT3E,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACG,KACDF,EAAAA,EAAAA,KAACsF,EAAAA,EAAW,CAACvF,KAAK,4BAMhB,UAATiC,GAA6B,cAATF,GACnB3B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+DAA8DC,SAAA,EAC3EC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,OAAMC,SAAA,CAAC,WACU,OAAnBiC,QAAmB,IAAnBA,GAAyB,QAANP,EAAnBO,EAAqBpC,YAAI,IAAA6B,OAAN,EAAnBA,EAA2BmB,OAAO,eAE7C/C,EAAAA,EAAAA,KAACuF,EAAAA,EAAgB,CACfjF,OAA2B,OAAnB6B,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBqD,oBAC7BjF,QAASA,EACTC,KAAMA,OAIV,OAGD,C,gHChOP,MAoCA,EApC0BV,IAAyF,IAAxF,KAAE2F,EAAI,KAACC,EAAI,YAAEC,EAAW,QAAC5E,EAAO,aAAE6E,EAAY,YAACC,EAAW,KAAC/D,EAAI,UAACgE,EAAS,QAACC,GAAQjG,EAOzG,OACIK,EAAAA,EAAAA,MAAC6F,EAAAA,EAAK,CAACN,KAAMA,EAAMO,OAASrC,GAAI+B,EAAY/B,GAAIsC,UAAQ,EAACC,WAAS,EAAClG,UAAU,eAAcC,SAAA,EACvFF,EAAAA,EAAAA,KAACgG,EAAAA,EAAMI,OAAM,CAACC,aAAW,EAACpG,UAAU,mBAIpCD,EAAAA,EAAAA,KAACgG,EAAAA,EAAMM,KAAI,CAAApG,UACPC,EAAAA,EAAAA,MAACoG,EAAAA,EAAI,CAAArG,SAAA,EACDF,EAAAA,EAAAA,KAACuG,EAAAA,EAAKC,MAAK,CAACvG,UAAU,OAAMC,UACxBF,EAAAA,EAAAA,KAACuG,EAAAA,EAAKE,MAAK,CAACxG,UAAU,sBAAqBC,SAAEuF,OAEjDtF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EACxBF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAY,CACT5E,KAAK,SACL2D,KAAK,MACL1E,QAASe,EArBd8B,IAIf7C,EAAQ6C,EAHC,CACLF,OAAQ5B,GAEG,EAiBmC8D,EAE9B3F,UAAU,yCACV4E,QAAQ,cACR7D,SAAU6E,EACVc,UAAWd,KAEf7F,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CAACC,QAAQ,cAAc9D,QAAS4E,EAAa1F,UAAU,mFAAkFC,SAAE,iBAI1J,C,yGClChB,MAmEA,EAnEoBJ,IAQb,IARc,KACnB4F,EAAI,YACJC,EAAW,YACXiB,EAAW,YACXf,EAAW,OACXgB,EAAM,UACNC,EAAS,OACTC,GACDjH,EACC,MAAOkH,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAKzC,OACE/G,EAAAA,EAAAA,MAAC6F,EAAAA,EAAK,CACJN,KAAMA,EACNO,OAAQN,EACRO,UAAQ,EACRjG,UAAU,eACVkG,WAAS,EAAAjG,SAAA,EAETF,EAAAA,EAAAA,KAACgG,EAAAA,EAAMI,OAAM,CAACC,aAAW,EAACpG,UAAU,mBAEpCE,EAAAA,EAAAA,MAAC6F,EAAAA,EAAMM,KAAI,CAAApG,SAAA,EACTC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,gBAAeC,SAAA,CAAE2G,EAAO,QACtC1G,EAAAA,EAAAA,MAACoG,EAAAA,EAAI,CAAArG,SAAA,EACHC,EAAAA,EAAAA,MAACoG,EAAAA,EAAKC,MAAK,CAACvG,UAAU,OAAMC,SAAA,EAC1BF,EAAAA,EAAAA,KAACuG,EAAAA,EAAKE,MAAK,CAAAvG,SAAE4G,KACb9G,EAAAA,EAAAA,KAACuG,EAAAA,EAAKY,QAAO,CACXC,GAAG,WACHC,KAAK,IACLC,YACgB,YAAdR,EACI,wDACA,+CAENS,SA3BY3D,IACtBqD,EAAYrD,EAAE4D,OAAOC,MAAM,EA2BjBC,UAAQ,QAGZ1H,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BC,EAAAA,EAAAA,MAACyE,EAAAA,EAAM,CACLC,QAAQ,cACR5E,UAAU,gBACVc,QAAU6C,IACR,IAAI7D,EAEFA,EADgB,YAAd+G,EACKE,EAEA,CACLtD,OAAQ,QACRiE,WAAYX,GAGhBJ,EAAYhD,EAAG7D,EAAK,EAEtBiB,SAA+B,KAAb,OAARgG,QAAQ,IAARA,OAAQ,EAARA,EAAUjE,QAAa7C,SAAA,CAEhC2F,GAAc7F,EAAAA,EAAAA,KAAC4H,EAAAA,EAAa,IAAMb,EAAQ,iBAK7C,C,kMCjEZ,MA+BA,EA/BoBjH,IAA+C,IAA9C,KAAE4F,EAAI,YAAEC,EAAW,QAAC5E,EAAO,YAAC8E,GAAY/F,EACzD,MAAOkH,EAASC,IAAaC,EAAAA,EAAAA,UAAS,IAItC,OACI/G,EAAAA,EAAAA,MAAC6F,EAAAA,EAAK,CAACN,KAAMA,EAAMO,OAAQN,EAAaO,UAAQ,EAACjG,UAAU,eAAekG,WAAS,EAAAjG,SAAA,EAC/EF,EAAAA,EAAAA,KAACgG,EAAAA,EAAMI,OAAM,CAACC,aAAW,EAACpG,UAAU,mBAGpCE,EAAAA,EAAAA,MAAC6F,EAAAA,EAAMM,KAAI,CAAApG,SAAA,EACPF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeC,SAAC,YAC9BC,EAAAA,EAAAA,MAACoG,EAAAA,EAAI,CAAArG,SAAA,EACDC,EAAAA,EAAAA,MAACoG,EAAAA,EAAKC,MAAK,CAACvG,UAAU,OAAMC,SAAA,EACxBF,EAAAA,EAAAA,KAACuG,EAAAA,EAAKE,MAAK,CAACxG,UAAU,UAASC,SAAE,eACjCF,EAAAA,EAAAA,KAACuG,EAAAA,EAAKY,QAAO,CAACC,GAAG,WAAWC,KAAK,IAAIpH,UAAU,eAAeqH,YAAY,+CAA+CC,SAbvH3D,IAClBqD,EAAYrD,EAAE4D,OAAOC,MAAM,QAcfzH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UACxBC,EAAAA,EAAAA,MAACyE,EAAAA,EAAM,CAACC,QAAQ,cAAc5E,UAAU,oCAAoCc,QAAU6C,IAKlF7C,EAAQ6C,EAJC,CACLF,OAAO,WACPmE,iBAAiBb,GAEN,EACb9G,SAAA,CAAE2F,GAAY7F,EAAAA,EAAAA,KAAC4H,EAAAA,EAAa,IAAG,SAAS,kBAItD,E,gJCOhB,MAqoBA,EAroBkBE,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACtB,MAAOC,EAAkBC,IAAuBxB,EAAAA,EAAAA,UAAS,KAClDyB,EAAmBC,IAAwB1B,EAAAA,EAAAA,UAAS,gBACpD2B,EAAYC,IAAiB5B,EAAAA,EAAAA,UAAS,gBACtC6B,EAAaC,IAAkB9B,EAAAA,EAAAA,UAAS,CAC7C+B,QAAQ,EACRrG,GAAI,QAECsG,EAAsBC,IAA2BjC,EAAAA,EAAAA,UAAS,CAAC,GAC5DkC,GAAW3I,EAAAA,EAAAA,MACXwB,GAAWC,EAAAA,EAAAA,MACXmH,GAAWC,EAAAA,EAAAA,MACjB,IAAI1G,EAAKyG,EAASE,SAASC,MAAM,KAAK,GACtC,MAAMC,EAAWC,aAAaC,QAAQ,UACtCnH,QAAQC,IAAIgH,EAAS,YACrB,MAAM,iBACJG,EAAgB,gBAChBC,EAAe,cACfC,EAAa,eACbC,EAAc,YACdlE,GAAW,aACXzD,KACEC,EAAAA,EAAAA,KAAaC,GAAUA,EAAM0H,cAC3B,EAAEC,KAAMC,EAAAA,EAAAA,OACdC,EAAAA,EAAAA,YAAU,KACJvH,GACFwG,GAASgB,EAAAA,EAAAA,IAAkBxH,GAAI,UAEjCwG,GAASiB,EAAAA,EAAAA,MAAqB,GAC7B,KAEHF,EAAAA,EAAAA,YAAU,KACRhB,EAAqC,OAAbW,QAAa,IAAbA,OAAa,EAAbA,EAAe/J,KAAK,GAC3C,CAAC+J,IAEJ,MAKMQ,GAAkBC,GACC,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKf,MAAM,KA2G3BgB,GAAwBA,CAAC5G,EAAG7D,KAChC6D,EAAE6G,iBACiB,SAAf1K,EAAK2D,OACP0F,GACEsB,EAAAA,EAAAA,IAAkC,OAApBxB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtG,GAAI7C,GAAM,KAC5CiJ,EAAe,CAAC,GAChBI,GAASgB,EAAAA,EAAAA,IAAkBxH,GAAI,SAAU,KAGrB,eAAf7C,EAAK2D,OACd0F,GACEuB,EAAAA,EAAAA,IAAwB,OAAX5B,QAAW,IAAXA,OAAW,EAAXA,EAAanG,IAAI,KAC5BoG,EAAe,CAAC,GAChB/G,EAAS,qBAAqB,KAIlCmH,GACEwB,EAAAA,EAAAA,IAAgB/B,EAAuB,OAAXE,QAAW,IAAXA,OAAW,EAAXA,EAAanG,GAAI7C,GAAM,KACjDqJ,GACEgB,EAAAA,EAAAA,IAAkBxH,GAAI,KAAO,IAADiI,EAC1B7B,EAAe,CAAC,GAChB,IAAI8B,EAAW,IAAKhB,GAChBiB,EAAwB,QAAvBF,EAAGC,EAASjC,UAAW,IAAAgC,OAAA,EAApBA,EAAsBG,QAC3B/H,GAASA,EAAKL,MAAkB,OAAXmG,QAAW,IAAXA,OAAW,EAAXA,EAAanG,MAErCkI,EAASjC,GAAckC,EACvBrC,EAAoBoC,EAASjC,GAAY,IAE5C,IAGP,EAaIhH,GAAuBA,CAAC+B,EAAGhB,EAAIc,UAC1BuH,GAALrH,EACFoF,EAAe,CACb,CAACtF,IAAUqF,EAAYE,OACvBrG,GAAIA,KAGNgB,EAAEsH,kBAEFlC,EAAe,CACb,CAACtF,IAAUqF,EAAYE,OACvBrG,GAAIA,IAER,EAEIuI,IAASnL,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACC,GAAG,UAAS1C,SAAE+J,GAAE,YAClCmB,IACJpL,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACC,GAAG,UAAS1C,SACc,gBAAZ,OAApBgJ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,QACnB,aACA,4BAGF2H,IACJrL,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACC,GAAG,UAAS1C,SACc,gBAAZ,OAApBgJ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,QACnB,WACA,0BAIF4H,IACJtL,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,CAACC,GAAG,UAAS1C,SACc,gBAAZ,OAApBgJ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,QACnB,cACA,kBAuCR,OACEvD,EAAAA,EAAAA,MAAAS,EAAAA,SAAA,CAAAV,SAAA,EACEC,EAAAA,EAAAA,MAACoL,EAAAA,EAAI,CACHC,iBAAiB,cACjB5I,GAAG,mBACH3C,UAAU,gBACVwL,SA9NgBC,IACpB5C,EAAc4C,GACdhD,EAAoBoB,EAAc4B,IACvB,aAAPA,GACF9C,EAAqB,eAmFZ,eAAP8C,GACF9C,EAAqB,gBAEZ,gBAAP8C,GACF9C,EAAqB,SAEZ,eAAP8C,GACF9C,EAAqB,cACvB,EA+H2B1I,SAAA,EAEvBF,EAAAA,EAAAA,KAAC2L,EAAAA,EAAG,CAACC,SAAS,cAAcC,MAAO5B,GAAE,cAAc/J,SACjDkC,IAAcpC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAY,KAAK3C,EAAAA,EAAAA,MAAA,WAASF,UAAU,qBAAoBC,SAAA,EACrEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0CAAyCC,SAAA,EACtDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uFAAsFC,SAAA,EACnGC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCC,SAAA,EAC9CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mCAAkCC,SACzB,OAApBgJ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB2C,SAEzB7L,EAAAA,EAAAA,KAAA,KACEC,UAAS,QAAA8D,OA7CIL,KAC7B,OAAQA,GACN,IAAK,QAQL,IAAK,cACH,MAAO,kBAPT,IAAK,YACH,MAAO,kBACT,IAAK,YAEL,IAAK,YACH,MAAO,kBAGT,QACE,OACJ,EA+BmCoI,CACG,OAApB5C,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,SACpBxD,UAEJF,EAAAA,EAAAA,KAAA,QAAAE,UACuB,OAApBgJ,QAAoB,IAApBA,GAA4B,QAARnB,EAApBmB,EAAsBxF,cAAM,IAAAqE,GAAW,QAAXC,EAA5BD,EAA8BgE,OAAO,UAAE,IAAA/D,OAAnB,EAApBA,EAAyCgE,gBACpB,OAApB9C,QAAoB,IAApBA,GAA4B,QAARjB,EAApBiB,EAAsBxF,cAAM,IAAAuE,OAAR,EAApBA,EAA8BgE,MAAM,YAI5C9L,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yDAAwDC,SAAA,CACnC,WAAb,OAApBgJ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,SACrBvD,EAAAA,EAAAA,MAAAS,EAAAA,SAAA,CAAAV,SAAA,EACEF,EAAAA,EAAAA,KAACyE,EAAAA,EAAc,CAACC,UAAU,MAAMC,QAASwG,GAAOjL,UAC9CF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACLC,QAAQ,cACR9D,QAAU6C,GACR/B,GACE+B,EACoB,OAApBsF,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtG,GACtB,SAGJ3C,UAAU,gEAA+DC,UAEzEF,EAAAA,EAAAA,KAACkM,EAAAA,IAAwB,SAG7BlM,EAAAA,EAAAA,KAACyE,EAAAA,EAAc,CAACC,UAAU,MAAMC,QAAS2G,GAAWpL,UAClDF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACLC,QAAQ,cACR5E,UAAU,iEACVc,QAASA,KACP,IAAIhB,EAAO,CACT2D,OACkC,cAAZ,OAApBwF,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,QAClB,cACA,aArRRyI,EAACvJ,EAAI7C,KAC7BqJ,GACEsB,EAAAA,EAAAA,IAAc9H,EAAI7C,GAAM,KACtBqJ,GAASgB,EAAAA,EAAAA,IAAkBxH,GAAI,SAAU,IAE5C,EAkRuBuJ,CAAsC,OAApBjD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtG,GAAI7C,EAAK,EACjDG,SAED6J,GACC/J,EAAAA,EAAAA,KAAC4H,EAAAA,EAAa,IACoB,cAAZ,OAApBsB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,SACxB1D,EAAAA,EAAAA,KAACoM,EAAAA,IAAe,KAEhBpM,EAAAA,EAAAA,KAACqM,EAAAA,IAAc,WAMvB,GAEgC,WAAb,OAApBnD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,SACrB1D,EAAAA,EAAAA,KAACyE,EAAAA,EAAc,CAACC,UAAU,MAAMC,QAASyG,GAAUlL,UACjDF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACL3E,UAAU,gEACV4E,QAAQ,cACR9D,QAASA,IAjHVuL,EAAC5I,EAAQd,KACQ,gBAAZ,OAApBsG,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,SACxBsF,EAAe,CACb,CAACtF,IAAUqF,EAAYE,OACvBrG,GAAIA,GAER,EA4GsB0J,CAAa,cAAmC,OAApBpD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtG,IACnD1C,UAEDF,EAAAA,EAAAA,KAACuM,EAAAA,IAAU,QAIf,GAEgC,WAAb,OAApBrD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,SACrB1D,EAAAA,EAAAA,KAACyE,EAAAA,EAAc,CAACC,UAAU,MAAMC,QAAS0G,GAAQnL,UAC/CF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACL3E,UAAU,8DACV4E,QAAQ,cACR9D,QAASA,KACuC,OAApBmI,QAAoB,IAApBA,GAAAA,EAAsBtG,QAhLlC,gBAAZ,OAApBsG,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,UACNgG,aAAaC,QAAQ,eAErCD,aAAa8C,QAAQ,aAAc,GAErCvK,EAAS,kBAAD8B,OAAmBnB,OA4KR1C,UAEDF,EAAAA,EAAAA,KAACyM,EAAAA,IAAM,QAIX,UAINzM,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,oBACrCF,EAAAA,EAAAA,KAAA,KACEC,UAAU,8BACVyM,wBAAyB,CACvBC,OAA4B,OAApBzD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB0D,mBAIpC5M,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,MAAC0M,EAAAA,EAAG,CAAA3M,SAAA,EACFC,EAAAA,EAAAA,MAAC2M,EAAAA,EAAG,CAACC,GAAG,IAAG7M,SAAA,EACTF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAE+J,GAAE,iBAC/BjK,EAAAA,EAAAA,KAAA,KAAGC,UAAU,WAAUC,SACA,OAApBgJ,QAAoB,IAApBA,GAA4B,QAARhB,EAApBgB,EAAsB8D,cAAM,IAAA9E,OAAR,EAApBA,EAA8B/D,WAGnChE,EAAAA,EAAAA,MAAC2M,EAAAA,EAAG,CAACC,GAAG,IAAG7M,SAAA,EACTF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAE+J,GAAE,6BAC/BjK,EAAAA,EAAAA,KAAA,KAAGC,UAAU,WAAUC,SAGb,OAARmJ,QAAQ,IAARA,GAAe,QAAPlB,EAARkB,EAAU/G,aAAK,IAAA6F,GAAfA,EAAiB8E,oBAAmB,GAAAlJ,OAAc,OAARsF,QAAQ,IAARA,GAAe,QAAPjB,EAARiB,EAAU/G,aAAK,IAAA8F,OAAP,EAARA,EAAiB6E,oBAAmB,UAAU,sBAG5F9M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAG,CAACC,GAAG,IAAG7M,SAAA,EACTF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAE+J,GAAE,eAC/BjK,EAAAA,EAAAA,KAAA,KAAGC,UAAU,WAAUC,SACA,OAApBgJ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBgE,oBAG3B/M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAG,CAACC,GAAG,IAAG7M,SAAA,EACTF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBC,SAAE+J,GAAE,eACpCjK,EAAAA,EAAAA,KAAA,KAAGC,UAAU,WAAUC,SAAsB,OAApBgJ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBiE,oBAIrDnN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,MAAC0M,EAAAA,EAAG,CAAA3M,SAAA,EACFC,EAAAA,EAAAA,MAAC2M,EAAAA,EAAG,CAACC,GAAG,IAAG7M,SAAA,EACTF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAE+J,GAAE,qBACV,OAApBf,QAAoB,IAApBA,GAA4B,QAARb,EAApBa,EAAsBkE,cAAM,IAAA/E,OAAR,EAApBA,EAA8BtF,QAAS,GACtC/C,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sBAAqBC,SACY,QADZoI,EAChCgC,GAAmC,OAApBpB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBkE,eAAO,IAAA9E,OAAA,EAA5CA,EAA8CtF,KAC7C,CAACC,EAAMC,KAEHlD,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAV,UACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAiB+C,GAARC,SAOnB,gBACC,QAEL/C,EAAAA,EAAAA,MAAC2M,EAAAA,EAAG,CAACC,GAAG,IAAG7M,SAAA,EACTF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAE+J,GAAE,qBACV,OAApBf,QAAoB,IAApBA,GAAqC,QAAjBX,EAApBW,EAAsBmE,uBAAe,IAAA9E,OAAjB,EAApBA,EAAuCxF,QAAS,GAC/C/C,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sBAAqBC,SAGhC,QAHgCsI,EAChC8B,GACqB,OAApBpB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBmE,wBACvB,IAAA7E,OAAA,EAFAA,EAEExF,KAAI,CAACC,EAAMC,KAEVlD,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAV,UACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAiB+C,GAARC,SAMjB,8BAyBZ/C,EAAAA,EAAAA,MAACwL,EAAAA,EAAG,CAACC,SAAS,YAAYC,MAAO5B,GAAE,eAAe/J,SAAA,EAChDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAY,CAACzG,UAAU,6BACxBwF,KAAO,0BACPkB,UAAWoD,EACX/I,SAAU+I,EACVhJ,QAAWA,IAzNGuM,MACtB,IAAIC,EAAQ,CACV9D,SAAWA,EACX+D,MAAQ5K,EACR6K,QAAU,qBAEZjL,QAAQC,IAAI8K,EAAQ,WACpBnE,GAASsE,EAAAA,EAAAA,IAAsBH,GAAS,EAkNjBD,QAEjBtN,EAAAA,EAAAA,KAAC2N,EAAAA,EAAO,CACN9L,qBAAsBA,GACtBC,KAAK,YACL/B,KAAM0I,EACN1G,UAA+B,OAApBmH,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,OACjC1B,KAAK,eAGThC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAG,CAACC,SAAS,cAAcC,MAAO5B,GAAE,eAAe/J,UA0BlDF,EAAAA,EAAAA,KAAC2N,EAAAA,EAAO,CACN9L,qBAAsBA,GACtBC,KAAK,cACL/B,KAAM0I,EACN1G,UAA+B,OAApBmH,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,OACjC1B,KAAK,cAGThC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAG,CAACC,SAAS,eAAeC,MAAO5B,GAAE,gBAAgB/J,UACpDF,EAAAA,EAAAA,KAAC2N,EAAAA,EAAO,CACN9L,qBAAsBA,GACtBC,KAAK,eACL/B,KAAM0I,EACN1G,UAA+B,OAApBmH,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,YA6BrC1D,EAAAA,EAAAA,KAAC2L,EAAAA,EAAG,CAACC,SAAS,QAAQC,MAAO5B,GAAE,SAAS/J,UAgDtCF,EAAAA,EAAAA,KAAC2N,EAAAA,EAAO,CACN9L,qBAAsBA,GACtBC,KAAK,QACL/B,KAAM0I,EACN1G,UAA+B,OAApBmH,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxF,eAIvC1D,EAAAA,EAAAA,KAAC4N,EAAW,CACVlI,KAAiB,OAAXqD,QAAW,IAAXA,OAAW,EAAXA,EAAa8E,SACnBlI,YAAa9D,GACbd,QAASyJ,GACT1I,KAAM+G,EACNhD,YAAaA,MAEf7F,EAAAA,EAAAA,KAAC8N,EAAAA,EAAW,CACVpI,KAAiB,OAAXqD,QAAW,IAAXA,OAAW,EAAXA,EAAagF,MACnBpI,YAAa9D,GACbd,QAASyJ,GACT3E,YAAaA,GACbgB,OAAO,UACPC,UAAW,YACXC,OAAQ,aAEV/G,EAAAA,EAAAA,KAACgO,EAAAA,EAAiB,CAChBvI,MAAMwI,EAAAA,EAAAA,IAAsBpF,GAC5BnD,MACa,OAAXqD,QAAW,IAAXA,OAAW,EAAXA,EAAamF,eACF,OAAXnF,QAAW,IAAXA,OAAW,EAAXA,EAAaoF,gBACF,OAAXpF,QAAW,IAAXA,OAAW,EAAXA,EAAaqF,aACF,OAAXrF,QAAW,IAAXA,OAAW,EAAXA,EAAasF,aAEftN,QAASyJ,GACT7E,YAAa9D,GACbgE,YAAaA,GACb/D,KAAM6G,MAQP,C","sources":["components/atomic/NoDataFound.jsx","components/atomic/RexettPagination.jsx","components/common/SingleJob/JobCard.jsx","pages/views/Modals/ConfirmationModal.jsx","pages/views/Modals/EndJob.jsx","pages/views/Modals/RejectModal.jsx","pages/views/SingleJob.jsx"],"sourcesContent":["import React from 'react'\r\nimport errorImg from '../../assets/img/warning-icon.gif'\r\nconst NoDataFound = ({data}) => {\r\n  return (\r\n    <div className='no-data-container'>\r\n      <div className='no-data'>\r\n        <img src={errorImg} />{data?data:\"No Data Found\"}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoDataFound","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ResponsivePagination from 'react-responsive-pagination';\r\nimport 'react-responsive-pagination/themes/classic.css';\r\nimport { adminJobListing } from \"../../redux/slices/adminDataSlice\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nconst RexettPagination = ({ number, setPage, page }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setPage(pageNumber);\r\n  };\r\n\r\n  const renderPaginationItems = () => {\r\n    const paginationItems = [];\r\n\r\n    if (number <= 6) {\r\n      // If total number of pages is 6 or less, render all pages\r\n      for (let i = 1; i <= number; i++) {\r\n        paginationItems.push(\r\n          <Pagination.Item\r\n            key={i}\r\n            className=\"custom-pagination-item\"\r\n            active={i === page}\r\n            onClick={() => handlePageChange(i)}\r\n          >\r\n            {i}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n    } else {\r\n      // If total number of pages is greater than 6, render first 3 pages, last 3 pages, and dots\r\n      paginationItems.push(\r\n        <Pagination.Item\r\n          key={1}\r\n          className=\"custom-pagination-item\"\r\n          active={1 === page}\r\n          onClick={() => handlePageChange(1)}\r\n        >\r\n          {1}\r\n        </Pagination.Item>\r\n      );\r\n\r\n      if (page > 4) {\r\n        paginationItems.push(\r\n          <Pagination.Ellipsis key=\"start-dots\" disabled />\r\n        );\r\n      }\r\n\r\n      for (let i = Math.max(2, page - 1); i <= Math.min(page + 1, number - 1); i++) {\r\n        paginationItems.push(\r\n          <Pagination.Item\r\n            key={i}\r\n            className=\"custom-pagination-item\"\r\n            active={i === page}\r\n            onClick={() => handlePageChange(i)}\r\n          >\r\n            {i}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n\r\n      if (page < number - 3) {\r\n        paginationItems.push(\r\n          <Pagination.Ellipsis key=\"end-dots\" disabled />\r\n        );\r\n      }\r\n\r\n      paginationItems.push(\r\n        <Pagination.Item\r\n          key={number}\r\n          className=\"custom-pagination-item\"\r\n          active={number === page}\r\n          onClick={() => handlePageChange(number)}\r\n        >\r\n          {number}\r\n        </Pagination.Item>\r\n      );\r\n    }\r\n\r\n    return paginationItems;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Pagination className=\"pagination flex-wrap\">\r\n        <Pagination.Prev\r\n          className=\"pagination-arrow custom-pagination-item me-1\"\r\n          onClick={() => handlePageChange(page - 1)}\r\n          disabled={page === 1}\r\n        />\r\n        <div className=\"pages-link flex-wrap\">\r\n          {renderPaginationItems()}\r\n        </div>\r\n        <Pagination.Next\r\n          className=\"pagination-arrow next-arrow ms-1 custom-pagination-item\"\r\n          onClick={() => handlePageChange(page + 1)}\r\n          disabled={page === number}\r\n        />\r\n      </Pagination>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RexettPagination;\r\n","import React from \"react\";\r\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport userImg from \"../../../assets/img/user-img.jpg\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\nimport { FaLinkedin } from \"react-icons/fa\";\r\nimport { MdOutlinePersonRemove } from \"react-icons/md\";\r\nimport NoDataFound from \"../../atomic/NoDataFound\";\r\nimport RexettPagination from \"../../atomic/RexettPagination\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ImUserCheck } from \"react-icons/im\";\r\nimport { PiUserRectangleFill } from \"react-icons/pi\";\r\nimport { ImUserMinus } from \"react-icons/im\";\r\nimport { RiUserAddFill } from \"react-icons/ri\";\r\nimport ScreenLoader from \"../../atomic/ScreenLoader\";\r\n\r\nconst JobCard = ({\r\n  handleJobStatusModal,\r\n  type,\r\n  data,\r\n  jobStatus,\r\n  role,\r\n  setPage,\r\n  page,\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const { singleJobPagination ,screenLoader} = useSelector(\r\n    (state) => state.adminData\r\n  );\r\nconsole.log(screenLoader,\"screenloader\")\r\n  const developerCardToolTip = (\r\n    <Tooltip id=\"tooltip\">\r\n      {type === \"Interviewing\"\r\n        ? \"Hire\"\r\n        : type === \"Shortlisted\"\r\n        ? \"Interview\"\r\n        : \"Shortlist\"}\r\n    </Tooltip>\r\n  );\r\n\r\n  const rejectedCardToolTip = <Tooltip id=\"tooltip\">Reject</Tooltip>;\r\n\r\n  const suggestedCardToolTip = (status) => {\r\n    return (\r\n      <Tooltip id=\"tooltip\">\r\n        {status ? \" Remove from suggestion\" : \"Suggest the developer\"}\r\n      </Tooltip>\r\n    );\r\n  };\r\n\r\n  const handleDeveloperCard = (e, id) => {\r\n    if (role == \"client\") {\r\n      navigate(`client/client-single-developer/${id}`);\r\n    } else if (role === \"admin\") {\r\n      navigate(`/admin-single-developer/${id}`);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {screenLoader ? <ScreenLoader /> : <>\r\n        <div className=\"developers-list job-card \">\r\n          {data?.length > 0 ? (\r\n            <>\r\n              {data?.map((item, index) => {\r\n                return (\r\n                  <>\r\n                    <div\r\n                      className={\r\n                        item?.recommed\r\n                          ? \"developer-card recomed-dev p-0\"\r\n                          : \"developer-card p-0\"\r\n                      }\r\n                    >\r\n                      {/* <div className=\"tag-developer\">{item?.recommed ? \"Recommend\" : \"Suggest\"}</div> */}\r\n                      <div className=\"tag-developer\">\r\n                        {type && type === \"Suggested\" ? \"Suggest\" : type}\r\n                      </div>\r\n                      <div className=\"overflow-hidden inner-dev-card\">\r\n                        <div\r\n                          className=\"user-imgbx\"\r\n                          onClick={(e) =>\r\n                            handleDeveloperCard(e, item?.developer?.id)\r\n                          }\r\n                        >\r\n                          <img\r\n                            src={\r\n                              item?.developer?.profile_picture\r\n                                ? item?.developer?.profile_picture\r\n                                : userImg\r\n                            }\r\n                            alt=\"developer\"\r\n                            className=\"user-img\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                          <h3 className=\"user-name\">{item?.developer?.name}</h3>\r\n                          <p className=\"designation-user\">Software Developer</p>\r\n                          <p className=\"email-user\">{item?.developer?.email}</p>\r\n                          <ul className=\"social-icons\">\r\n                            <li>\r\n                              <Link to=\"#\">\r\n                                <FaGithub />\r\n                              </Link>\r\n                            </li>\r\n                            <li>\r\n                              <Link to=\"#\">\r\n                                <FaLinkedin />\r\n                              </Link>\r\n                            </li>\r\n                            {/* <li>\r\n                                                    <Link to=\"#\"><MdEmail /></Link>\r\n                                                </li> */}\r\n                          </ul>\r\n                          <div className=\"job-card-btns\">\r\n                            {role !== \"admin\" &&\r\n                            (type === \"Shortlisted\" ||\r\n                              type === \"Suggested\" ||\r\n                              type === \"Interviewing\") &&\r\n                            type !== \"Hired\" ? (\r\n                              <OverlayTrigger\r\n                                placement=\"bottom\"\r\n                                overlay={developerCardToolTip}\r\n                              >\r\n                                <Button\r\n                                  variant=\"danger\"\r\n                                  disabled={\r\n                                    jobStatus === \"Ended\" ? true : false\r\n                                  }\r\n                                  onClick={(e) =>\r\n                                    handleJobStatusModal(e, item?.id, type)\r\n                                  }\r\n                                  className=\"w-100 main-btn text-black border-white mt-3\"\r\n                                >\r\n                                  {type === \"Interviewing\" ? (\r\n                                    <RiUserAddFill />\r\n                                  ) : type === \"Shortlisted\" ? (\r\n                                    <PiUserRectangleFill />\r\n                                  ) : (\r\n                                    <ImUserCheck />\r\n                                  )}\r\n                                </Button>\r\n                              </OverlayTrigger>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                            {role !== \"admin\" && (\r\n                              <OverlayTrigger\r\n                                placement=\"bottom\"\r\n                                overlay={rejectedCardToolTip}\r\n                              >\r\n                                <Button\r\n                                  variant=\"danger\"\r\n                                  onClick={(e) =>\r\n                                    handleJobStatusModal(\r\n                                      e,\r\n                                      item?.id,\r\n                                      \"rejected\"\r\n                                    )\r\n                                  }\r\n                                  disabled={\r\n                                    jobStatus === \"Ended\" ? true : false\r\n                                  }\r\n                                  className=\"w-100\"\r\n                                >\r\n                                  <ImUserMinus />\r\n                                </Button>\r\n                              </OverlayTrigger>\r\n                            )}\r\n                            {role === \"admin\" && (\r\n                              <OverlayTrigger\r\n                                placement=\"top\"\r\n                                overlay={suggestedCardToolTip(\r\n                                  item?.developer?.already_suggested\r\n                                )}\r\n                              >\r\n                                <Button\r\n                                  variant={\r\n                                    item?.developer?.already_suggested\r\n                                      ? \"dark\"\r\n                                      : \"success\"\r\n                                  }\r\n                                  onClick={() =>\r\n                                    handleJobStatusModal(\r\n                                      item?.developer?.id,\r\n                                      item?.developer?.already_suggested ? 0 : 1\r\n                                    )\r\n                                  }\r\n                                  className=\"w-100 mt-2 main-btn py-2 text-black mt-3 font-15\"\r\n                                >\r\n                                  {item?.developer?.already_suggested ? (\r\n                                    <MdOutlinePersonRemove />\r\n                                  ) : (\r\n                                    <RiUserAddFill />\r\n                                  )}\r\n                                </Button>\r\n                              </OverlayTrigger>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                );\r\n              })}\r\n            </>\r\n          ) : (\r\n            <div>\r\n              {\" \"}\r\n              <NoDataFound data=\"No developer found\" />\r\n            </div>\r\n          )}\r\n\r\n        </div>\r\n\r\n      {role === \"admin\" && type === \"Suggested\" ? (\r\n        <div className=\"d-flex w-100 align-items-center justify-content-between my-4\">\r\n          <p className=\"mb-0\">\r\n            Showing {singleJobPagination?.data?.length} results\r\n          </p>\r\n          <RexettPagination\r\n            number={singleJobPagination?.total_pages_for_all}\r\n            setPage={setPage}\r\n            page={page}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n   </> }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobCard;\r\n","import React from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { clientDeleteHoliday, getClientHolidayList } from \"../../../redux/slices/clientDataSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nconst ConfirmationModal = ({ text,show, handleClose,onClick ,handleAction,smallLoader,type,startDate,endDate}) => {\r\n    const callBackBtn=(e )=>{\r\n        let data={\r\n            status: type,\r\n        }\r\n        onClick(e,data)\r\n    }\r\n    return(\r\n        <Modal show={show} onHide={(e)=>handleClose(e)} centered animation className=\"custom-modal\">\r\n            <Modal.Header closeButton className=\"border-0 pb-3\">\r\n            {/* <Modal.Title>End Job</Modal.Title> */}\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group className=\"mb-4\">\r\n                        <Form.Label className=\"d-block text-center\">{text}</Form.Label>\r\n                    </Form.Group>\r\n                    <div className=\"text-center\">\r\n                        <RexettButton\r\n                            type=\"submit\"\r\n                            text=\"Yes\"\r\n                            onClick={type ? callBackBtn : handleAction}\r\n                            // onClick={callBackBtn}\r\n                            className=\"main-btn px-4 me-3 font-14 fw-semibold\"\r\n                            variant=\"transparent\"\r\n                            disabled={smallLoader}\r\n                            isLoading={smallLoader}\r\n                        />\r\n                        <Button variant=\"transparent\" onClick={handleClose} className=\"outline-main-btn font-14 fw-semibold bg-transparent border-black text-black px-4\" >No</Button>\r\n                    </div>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nexport default ConfirmationModal;","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport RexettSpinner from \"../../../components/atomic/RexettSpinner\";\r\nimport { useStateManager } from \"react-select\";\r\nconst RejectModal = ({\r\n  show,\r\n  handleClose,\r\n  handleClick,\r\n  smallLoader,\r\n  header,\r\n  feedbacks,\r\n  submit,\r\n}) => {\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const handleFeedback = (e) => {\r\n    setFeedback(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      centered\r\n      className=\"custom-modal\"\r\n      animation\r\n    >\r\n      <Modal.Header closeButton className=\"border-0 pb-3\"></Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <h3 className=\"popup-heading\">{header} </h3>\r\n        <Form>\r\n          <Form.Group className=\"mb-4\">\r\n            <Form.Label>{feedbacks}</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows=\"6\"\r\n              placeholder={\r\n                feedbacks === \"Reasons\"\r\n                  ? \"Enter your reason, why you want to reject the leave ?\"\r\n                  : \"Enter your feedback, why you want to reject?\"\r\n              }\r\n              onChange={handleFeedback}\r\n              required\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <div className=\"text-center\">\r\n            <Button\r\n              variant=\"transparent\"\r\n              className=\"main-btn px-4\"\r\n              onClick={(e) => {\r\n                let data;\r\n                if (feedbacks === \"Reasons\") {\r\n                  data = feedback\r\n                } else {\r\n                  data = {\r\n                    status: \"ended\",\r\n                    end_reason: feedback,\r\n                  };\r\n                }\r\n                handleClick(e, data);\r\n              }}\r\n              disabled={feedback?.length === 0}\r\n            >\r\n              {smallLoader ? <RexettSpinner /> : submit}{\" \"}\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\nexport default RejectModal;\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport RexettSpinner from \"../../../components/atomic/RexettSpinner\";\r\nconst RejectModal = ({ show, handleClose,onClick,smallLoader}) => {\r\n    const [feedback,setFeedback]=useState(\"\")\r\n    const handleFeedback=(e)=>{\r\n        setFeedback(e.target.value)\r\n    }\r\n    return(\r\n        <Modal show={show} onHide={handleClose} centered className=\"custom-modal\" animation>\r\n            <Modal.Header closeButton className=\"border-0 pb-3\">\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h3 className=\"popup-heading\">Reject</h3>\r\n                <Form>\r\n                    <Form.Group className=\"mb-4\">\r\n                        <Form.Label className=\"font-14\" >Feedbacks</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows=\"6\" className=\"common-field\" placeholder=\"Enter your feedback, why you want to reject?\" onChange={handleFeedback}></Form.Control>\r\n                    </Form.Group>\r\n                    <div className=\"text-center\">\r\n                        <Button variant=\"transparent\" className=\"main-btn px-4 font-14 fw-semibold\" onClick={(e)=>{\r\n                            let data={\r\n                                status:\"rejected\",\r\n                                rejection_reason:feedback\r\n                            }\r\n                            onClick(e,data)\r\n                            }}>{smallLoader?<RexettSpinner/>:\"Submit\"}  </Button>\r\n                    </div>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nexport default RejectModal;","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Tab,\r\n  Tabs,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\n// import userImg from '../../assets/img/user-img.jpg'\r\n\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport RejectModal from \"./Modals/RejectModal\";\r\nimport EndJobModal from \"./Modals/EndJob\";\r\nimport ConfirmationModal from \"./Modals/ConfirmationModal\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  changeJobStatus,\r\n  getAllJobPostedList,\r\n  getDeleteJob,\r\n  getJobCategoryList,\r\n  getSuggestedDeveloper,\r\n  publishedPost,\r\n  singleJobPostData,\r\n} from \"../../redux/slices/clientDataSlice\";\r\nimport JobCard from \"../../components/common/SingleJob/JobCard\";\r\nimport RexettSpinner from \"../../components/atomic/RexettSpinner\";\r\nimport { jobPostConfirmMessage } from \"../../helper/utlis\";\r\nimport { MdOutlineDoNotDisturbAlt } from \"react-icons/md\";\r\nimport { BsFillSendFill } from \"react-icons/bs\";\r\nimport { BsFillSendXFill } from \"react-icons/bs\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { FaTrashCan } from \"react-icons/fa6\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport ScreenLoader from \"../../components/atomic/ScreenLoader\";\r\n\r\nconst SingleJob = () => {\r\n  const [selectedTabsData, setSelectedTabsData] = useState([]);\r\n  const [currentTabsStatus, setCurrnetTabsStatus] = useState(\"application\");\r\n  const [currentTab, setCurrentTab] = useState(\"application\");\r\n  const [statusModal, setStatusModal] = useState({\r\n    isTrue: false,\r\n    id: null,\r\n  });\r\n  const [singleJobDescription, setSingleJobDescription] = useState({});\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  let id = location.pathname.split(\"/\")[3];\r\n  const clientId = localStorage.getItem(\"userId\")\r\n  console.log(clientId,\"clientid\")\r\n  const {\r\n    allJobPostedList,\r\n    jobCategoryList,\r\n    jobPostedData,\r\n    approvedLoader,\r\n    smallLoader,\r\n    screenLoader\r\n  } = useSelector((state) => state.clientData);\r\n  const { t } = useTranslation();\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(singleJobPostData(id, () => {}));\r\n    }\r\n    dispatch(getJobCategoryList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSingleJobDescription(jobPostedData?.data);\r\n  }, [jobPostedData]);\r\n\r\n  const getCategory = (cat) => {\r\n    let data = jobCategoryList.find((item) => item.value == cat);\r\n    return data?.label;\r\n  };\r\n\r\n  const convertToArray = (arr) => {\r\n    const skillsArray = arr?.split(\",\");\r\n    return skillsArray;\r\n  };\r\n  const handleUnpublished = (id, data) => {\r\n    dispatch(\r\n      publishedPost(id, data, () => {\r\n        dispatch(singleJobPostData(id, () => {}));\r\n      })\r\n    );\r\n  };\r\n  const handleSelect = (key) => {\r\n    setCurrentTab(key);\r\n    setSelectedTabsData(jobPostedData[key]);\r\n    if (key == \"suggested\") {\r\n      setCurrnetTabsStatus(\"shortlisted\");\r\n    }\r\n    const handleSelect = (key) => {\r\n      setCurrentTab(key);\r\n      setSelectedTabsData(jobPostedData[key]);\r\n      if (key == \"suggested\") {\r\n        setCurrnetTabsStatus(\"shortlisted\");\r\n      }\r\n      if (key == \"shortlisted\") {\r\n        setCurrnetTabsStatus(\"interviewing\");\r\n      }\r\n      if (key == \"interviewing\") {\r\n        setCurrnetTabsStatus(\"hired\");\r\n      }\r\n      if (key == \"application\") {\r\n        setCurrnetTabsStatus(\"application\");\r\n      }\r\n    };\r\n    const handleJobStatusAction = (e, data) => {\r\n      e.preventDefault();\r\n      if (data.status == \"ended\") {\r\n        dispatch(\r\n          publishedPost(singleJobDescription?.id, data, () => {\r\n            setStatusModal({});\r\n            dispatch(singleJobPostData(id, () => {}));\r\n          })\r\n        );\r\n      } else if (data.status == \"application\") {\r\n        dispatch(\r\n          getDeleteJob(statusModal?.id, () => {\r\n            setStatusModal({});\r\n            navigate(\"/client/job-posted\");\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(\r\n          changeJobStatus(currentTab, statusModal?.id, data, () => {\r\n            dispatch(\r\n              singleJobPostData(id, () => {\r\n                setStatusModal({});\r\n                let prevData = { ...jobPostedData };\r\n                let d = prevData[currentTab]?.filter(\r\n                  (item) => item.id !== statusModal?.id\r\n                );\r\n                prevData[currentTab] = d;\r\n                setSelectedTabsData(prevData[currentTab]);\r\n              })\r\n            );\r\n          })\r\n        );\r\n      }\r\n    };\r\n\r\n    const handleEdit = () => {\r\n      if (singleJobDescription?.status == \"Unpublished\") {\r\n        navigate(`/job-edit-post/${id}`);\r\n      }\r\n    };\r\n\r\n    const handleJobStatusModal = (e, id, status) => {\r\n      if (e == undefined) {\r\n        setStatusModal({\r\n          [status]: !statusModal.isTrue,\r\n          id: id,\r\n        });\r\n      } else {\r\n        e.stopPropagation();\r\n\r\n        setStatusModal({\r\n          [status]: !statusModal.isTrue,\r\n          id: id,\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleDelete = (status, id) => {\r\n      if (singleJobDescription?.status == \"Unpublished\") {\r\n        setStatusModal({\r\n          [status]: !statusModal.isTrue,\r\n          id: id,\r\n        });\r\n      }\r\n    };\r\n    if (key == \"shortlisted\") {\r\n      setCurrnetTabsStatus(\"interviewing\");\r\n    }\r\n    if (key == \"interviewing\") {\r\n      setCurrnetTabsStatus(\"hired\");\r\n    }\r\n    if (key == \"application\") {\r\n      setCurrnetTabsStatus(\"application\");\r\n    }\r\n  };\r\n  const handleJobStatusAction = (e, data) => {\r\n    e.preventDefault();\r\n    if (data.status == \"ended\") {\r\n      dispatch(\r\n        publishedPost(singleJobDescription?.id, data, () => {\r\n          setStatusModal({});\r\n          dispatch(singleJobPostData(id, () => {}));\r\n        })\r\n      );\r\n    } else if (data.status == \"application\") {\r\n      dispatch(\r\n        getDeleteJob(statusModal?.id, () => {\r\n          setStatusModal({});\r\n          navigate(\"/client/job-posted\");\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        changeJobStatus(currentTab, statusModal?.id, data, () => {\r\n          dispatch(\r\n            singleJobPostData(id, () => {\r\n              setStatusModal({});\r\n              let prevData = { ...jobPostedData };\r\n              let d = prevData[currentTab]?.filter(\r\n                (item) => item.id !== statusModal?.id\r\n              );\r\n              prevData[currentTab] = d;\r\n              setSelectedTabsData(prevData[currentTab]);\r\n            })\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    if (singleJobDescription?.status == \"Unpublished\") {\r\n      const savedStep = localStorage.getItem(\"activeStep\");\r\n      if (savedStep) {\r\n        localStorage.setItem(\"activeStep\", 1);\r\n      }\r\n      navigate(`/job-edit-post/${id}`);\r\n    }\r\n  };\r\n\r\n  const handleJobStatusModal = (e, id, status) => {\r\n    if (e == undefined) {\r\n      setStatusModal({\r\n        [status]: !statusModal.isTrue,\r\n        id: id,\r\n      });\r\n    } else {\r\n      e.stopPropagation();\r\n\r\n      setStatusModal({\r\n        [status]: !statusModal.isTrue,\r\n        id: id,\r\n      });\r\n    }\r\n  };\r\n  const endjob = <Tooltip id=\"tooltip\">{t(\"endJob\")}</Tooltip>;\r\n  const deletejob = (\r\n    <Tooltip id=\"tooltip\">\r\n      {singleJobDescription?.status == \"Unpublished\"\r\n        ? \"Delete Job\"\r\n        : \"Unpublish Job to delete\"}\r\n    </Tooltip>\r\n  );\r\n  const editjob = (\r\n    <Tooltip id=\"tooltip\">\r\n      {singleJobDescription?.status == \"Unpublished\"\r\n        ? \"Edit Job\"\r\n        : \"Unpublish Job to edit\"}\r\n    </Tooltip>\r\n  );\r\n\r\n  const publishjob = (\r\n    <Tooltip id=\"tooltip\">\r\n      {singleJobDescription?.status == \"Unpublished\"\r\n        ? \"Publish Job\"\r\n        : \"Unpublish Job\"}\r\n    </Tooltip>\r\n  );\r\n  const handleDelete = (status, id) => {\r\n    if (singleJobDescription?.status == \"Unpublished\") {\r\n      setStatusModal({\r\n        [status]: !statusModal.isTrue,\r\n        id: id,\r\n      });\r\n    }\r\n  };\r\n  const currentStatusCssClass = (status) => {\r\n    switch (status) {\r\n      case \"ended\":\r\n        return \"status-rejected\";\r\n      case \"Initiated\":\r\n        return \"status-progress\";\r\n      case \"completed\":\r\n        return \"status-finished\";\r\n      case \"published\":\r\n        return \"status-finished\";\r\n      case \"Unpublished\":\r\n        return \"status-rejected\";\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSuggestions=()=>{\r\n    let payload={\r\n      clientId : clientId,\r\n      jobId : id,\r\n      message : \"Suggest Developer\"\r\n    }\r\n    console.log(payload,\"payload\")\r\n    dispatch(getSuggestedDeveloper(payload))\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Tabs\r\n        defaultActiveKey=\"application\"\r\n        id=\"fill-tab-example\"\r\n        className=\"mb-3 job-tabs\"\r\n        onSelect={handleSelect}\r\n      >\r\n        <Tab eventKey=\"application\" title={t(\"jobDetails\")}>\r\n         {screenLoader? <ScreenLoader/> : <section className=\"single-job-section\">\r\n            <div className=\"single-job-card job-information-wrapper\">\r\n              <div className=\"d-flex justify-content-between align-items-md-center flex-md-row flex-column-reverse\">\r\n                <div className=\"d-flex align-items-center gap-3\">\r\n                  <h2 className=\"single-job-title text-start mb-0\">\r\n                    {singleJobDescription?.title}\r\n                  </h2>\r\n                  <p\r\n                    className={`mb-0 ${currentStatusCssClass(\r\n                      singleJobDescription?.status\r\n                    )}`}\r\n                  >\r\n                    <span>\r\n                      {singleJobDescription?.status?.charAt(0)?.toUpperCase() +\r\n                        singleJobDescription?.status?.slice(1)}\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n                <div className=\"d-flex gap-3 flex-wrap mb-md-0 mb-4 align-items-center\">\r\n                  {singleJobDescription?.status !== \"ended\" ? (\r\n                    <>\r\n                      <OverlayTrigger placement=\"top\" overlay={endjob}>\r\n                        <Button\r\n                          variant=\"transparent\"\r\n                          onClick={(e) =>\r\n                            handleJobStatusModal(\r\n                              e,\r\n                              singleJobDescription?.id,\r\n                              \"ended\"\r\n                            )\r\n                          }\r\n                          className=\"px-3 mb-2 arrow-btn danger-arrow font-16 text-decoration-none\"\r\n                        >\r\n                          <MdOutlineDoNotDisturbAlt />\r\n                        </Button>\r\n                      </OverlayTrigger>\r\n                      <OverlayTrigger placement=\"top\" overlay={publishjob}>\r\n                        <Button\r\n                          variant=\"transparent\"\r\n                          className=\"px-3 mb-2 arrow-btn primary-arrow font-16 text-decoration-none\"\r\n                          onClick={() => {\r\n                            let data = {\r\n                              status:\r\n                                singleJobDescription?.status == \"published\"\r\n                                  ? \"Unpublished\"\r\n                                  : \"published\",\r\n                            };\r\n                            handleUnpublished(singleJobDescription?.id, data);\r\n                          }}\r\n                        >\r\n                          {approvedLoader ? (\r\n                            <RexettSpinner />\r\n                          ) : singleJobDescription?.status == \"published\" ? (\r\n                            <BsFillSendXFill />\r\n                          ) : (\r\n                            <BsFillSendFill />\r\n                          )}\r\n                        </Button>\r\n                      </OverlayTrigger>\r\n                    </>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {singleJobDescription?.status !== \"ended\" ? (\r\n                    <OverlayTrigger placement=\"top\" overlay={deletejob}>\r\n                      <Button\r\n                        className=\"px-3 mb-2 arrow-btn danger-arrow font-16 text-decoration-none\"\r\n                        variant=\"transparent\"\r\n                        onClick={() =>\r\n                          handleDelete(\"application\", singleJobDescription?.id)\r\n                        }\r\n                      >\r\n                        <FaTrashCan />\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {singleJobDescription?.status !== \"ended\" ? (\r\n                    <OverlayTrigger placement=\"top\" overlay={editjob}>\r\n                      <Button\r\n                        className=\"px-3 mb-2 arrow-btn info-arrow font-16 text-decoration-none\"\r\n                        variant=\"transparent\"\r\n                        onClick={() =>\r\n                          handleEdit(\"application\", singleJobDescription?.id)\r\n                        }\r\n                      >\r\n                        <TiEdit />\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <p className=\"req-heading mb-1 mt-3\">About this job</p>\r\n              <p\r\n                className=\"single-job-description mb-0\"\r\n                dangerouslySetInnerHTML={{\r\n                  __html: singleJobDescription?.description,\r\n                }}\r\n              ></p>\r\n            </div>\r\n            <div className=\"single-job-card\">\r\n              <Row>\r\n                <Col md=\"4\">\r\n                  <h3 className=\"req-heading\">{t(\"clientName\")}</h3>\r\n                  <p className=\"req-text\">\r\n                    {singleJobDescription?.client?.name}\r\n                  </p>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                  <h3 className=\"req-heading\">{t(\"experienceRequirements\")}</h3>\r\n                  <p className=\"req-text\">\r\n                    {/* {singleJobDescription?.experience?.split(\"_\").join(\" \") ||\r\n                      \"Not Mentioned\"} */}\r\n                   {location?.state?.workExperienceyears ? `${location?.state?.workExperienceyears} years` :\"Not Mentioned\"}\r\n                  </p>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                  <h3 className=\"req-heading\">{t(\"contract\")}</h3>\r\n                  <p className=\"req-text\">\r\n                    {singleJobDescription?.contract_type}\r\n                  </p>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                  <h3 className=\"req-heading mt-4\">{t(\"location\")}</h3>\r\n                  <p className=\"req-text\">{singleJobDescription?.job_type}</p>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            <div className=\"single-job-card\">\r\n              <Row>\r\n                <Col md=\"4\">\r\n                  <h3 className=\"req-heading\">{t(\"skillsRequired\")}</h3>\r\n                  {singleJobDescription?.skills?.length > 0 ? (\r\n                    <ul className=\"skills-listing mb-0\">\r\n                      {convertToArray(singleJobDescription?.skills)?.map(\r\n                        (item, index) => {\r\n                          return (\r\n                            <>\r\n                              <li key={index}>{item}</li>\r\n                            </>\r\n                          );\r\n                        }\r\n                      )}\r\n                    </ul>\r\n                  ) : (\r\n                    \"Not Mentioned\"\r\n                  )}{\" \"}\r\n                </Col>\r\n                <Col md=\"4\">\r\n                  <h3 className=\"req-heading\">{t(\"optionalSkills\")}</h3>\r\n                  {singleJobDescription?.optional_skills?.length > 0 ? (\r\n                    <ul className=\"skills-listing mb-0\">\r\n                      {convertToArray(\r\n                        singleJobDescription?.optional_skills\r\n                      )?.map((item, index) => {\r\n                        return (\r\n                          <>\r\n                            <li key={index}>{item}</li>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                  ) : (\r\n                    \"Not Mentioned\"\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            {/* commented for future use */}\r\n            {/* <div className=\"single-job-card\">\r\n              <Row>\r\n                <Col md=\"4\">\r\n                  {singleJobDescription?.screening_questions.length &&\r\n                    singleJobDescription?.screening_questions?.map(\r\n                      ({ ideal_answer, question, must_have }) => (\r\n                        <>\r\n                          <p>Question :{question}</p>\r\n                          {question_type && <p>{question_type}</p>}</p>\r\n                          <p>Ideal Answer : {ideal_answer}</p>\r\n                          <p>Must Have : {must_have ? \"Yes\" : \"No\"}</p>\r\n                        </>\r\n                      )\r\n                    )}\r\n                </Col>\r\n              </Row>\r\n            </div> */}\r\n          </section>}\r\n        </Tab>\r\n        <Tab eventKey=\"suggested\" title={t(\"suggestions\")}>\r\n          <div className=\"text-end\">\r\n            <RexettButton className=\"main-btn px-4 py-2 font-14\" \r\n            text = \"Make Suggestion Request\"\r\n            isLoading={approvedLoader} \r\n            disabled={approvedLoader} \r\n            onClick = {()=>handleSuggestions()}/>\r\n          </div>\r\n          <JobCard\r\n            handleJobStatusModal={handleJobStatusModal}\r\n            type=\"Suggested\"\r\n            data={selectedTabsData}\r\n            jobStatus={singleJobDescription?.status}\r\n            role=\"client\"\r\n          />\r\n        </Tab>\r\n        <Tab eventKey=\"shortlisted\" title={t(\"shortlisted\")}>\r\n          {/* <div className=\"developers-list job-card\">\r\n                        <div className=\"developer-card\">\r\n                            <div className=\"tag-developer\">Shortlisted</div>\r\n                            <div className=\"user-imgbx\">\r\n                                <img src={userImg} className=\"user-img\" />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <h3 className=\"user-name\">Test dev</h3>\r\n                                <p className=\"designation-user\">Software Developer</p>\r\n                                <p className=\"email-user\">dev@rexett.com</p>\r\n                                <ul className=\"social-icons\">\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaGithub /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaLinkedin /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><MdEmail /></Link>\r\n                                    </li>\r\n                                </ul>\r\n                                <Button variant=\"danger\" onClick= className=\"w-100 mt-3\">Reject</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div> */}\r\n          <JobCard\r\n            handleJobStatusModal={handleJobStatusModal}\r\n            type=\"Shortlisted\"\r\n            data={selectedTabsData}\r\n            jobStatus={singleJobDescription?.status}\r\n            role=\"client\"\r\n          />\r\n        </Tab>\r\n        <Tab eventKey=\"interviewing\" title={t(\"interviewing\")}>\r\n          <JobCard\r\n            handleJobStatusModal={handleJobStatusModal}\r\n            type=\"Interviewing\"\r\n            data={selectedTabsData}\r\n            jobStatus={singleJobDescription?.status}\r\n          />\r\n          {/* <div className=\"developers-list job-card\">\r\n                        <div className=\"developer-card\">\r\n                            <div className=\"tag-developer\">Interviewing</div>\r\n                            <div className=\"user-imgbx\">\r\n                                <img src={userImg} className=\"user-img\" />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <h3 className=\"user-name\">Test dev</h3>\r\n                                <p className=\"designation-user\">Software Developer</p>\r\n                                <p className=\"email-user\">dev@rexett.com</p>\r\n                                <ul className=\"social-icons\">\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaGithub /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaLinkedin /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><MdEmail /></Link>\r\n                                    </li>\r\n                                </ul>\r\n                                <Button variant=\"danger\" onClick={handleJobStatusModal} className=\"w-100 bg-white text-black border-white mt-3\">Hire</Button>\r\n                                <Button variant=\"danger\" onClick= className=\"w-100 mt-2\">Reject</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div> */}\r\n        </Tab>\r\n        <Tab eventKey=\"hired\" title={t(\"hired\")}>\r\n          {/* <div className=\"developers-list job-card\">\r\n                        <div className=\"developer-card\">\r\n                            <div className=\"tag-developer\">Hired</div>\r\n                            <div className=\"user-imgbx\">\r\n                                <img src={userImg} className=\"user-img\" />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <h3 className=\"user-name\">Test dev</h3>\r\n                                <p className=\"designation-user\">Software Developer</p>\r\n                                <p className=\"email-user\">dev@rexett.com</p>\r\n                                <ul className=\"social-icons\">\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaGithub /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaLinkedin /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><MdEmail /></Link>\r\n                                    </li>\r\n                                </ul>\r\n                                <Button variant=\"danger\" onClick= className=\"w-100 mt-3\">Remove</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"developer-card\">\r\n                            <div className=\"tag-developer\">End Job</div>\r\n                            <div className=\"user-imgbx\">\r\n                                <img src={userImg} className=\"user-img\" />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <h3 className=\"user-name\">Test dev</h3>\r\n                                <p className=\"designation-user\">Software Developer</p>\r\n                                <p className=\"email-user\">dev@rexett.com</p>\r\n                                <ul className=\"social-icons\">\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaGithub /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><FaLinkedin /></Link>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Link to=\"#\"><MdEmail /></Link>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div> */}\r\n          <JobCard\r\n            handleJobStatusModal={handleJobStatusModal}\r\n            type=\"Hired\"\r\n            data={selectedTabsData}\r\n            jobStatus={singleJobDescription?.status}\r\n          />\r\n        </Tab>\r\n      </Tabs>\r\n      <RejectModal\r\n        show={statusModal?.rejected}\r\n        handleClose={handleJobStatusModal}\r\n        onClick={handleJobStatusAction}\r\n        type={currentTab}\r\n        smallLoader={smallLoader}\r\n      />\r\n      <EndJobModal\r\n        show={statusModal?.ended}\r\n        handleClose={handleJobStatusModal}\r\n        onClick={handleJobStatusAction}\r\n        smallLoader={smallLoader}\r\n        header=\"End Job\"\r\n        feedbacks={\"Feedbacks\"}\r\n        submit={\"Request\"}\r\n      />\r\n      <ConfirmationModal\r\n        text={jobPostConfirmMessage(currentTab)}\r\n        show={\r\n          statusModal?.Shortlisted ||\r\n          statusModal?.Interviewing ||\r\n          statusModal?.Suggested ||\r\n          statusModal?.application\r\n        }\r\n        onClick={handleJobStatusAction}\r\n        handleClose={handleJobStatusModal}\r\n        smallLoader={smallLoader}\r\n        type={currentTabsStatus}\r\n      />\r\n      {/* <ConfirmationModal\r\n                text={ `Are you sure you want to delete this job`}\r\n                show={showModal} onClick={handleAction}\r\n                handleClose={handleDelete}\r\n                smallLoader={smallLoader}\r\n            /> */}\r\n    </>\r\n  );\r\n};\r\nexport default SingleJob;\r\n"],"names":["_ref","data","_jsx","className","children","_jsxs","src","errorImg","number","setPage","page","useDispatch","handlePageChange","pageNumber","_Fragment","Pagination","Prev","onClick","disabled","renderPaginationItems","paginationItems","i","push","Item","active","Ellipsis","Math","max","min","Next","_singleJobPagination$","handleJobStatusModal","type","jobStatus","role","navigate","useNavigate","singleJobPagination","screenLoader","useSelector","state","adminData","console","log","developerCardToolTip","Tooltip","id","rejectedCardToolTip","ScreenLoader","length","map","item","index","_item$developer2","_item$developer3","_item$developer4","_item$developer5","_item$developer6","_item$developer7","_item$developer10","status","recommed","e","_item$developer","developer","concat","profile_picture","userImg","alt","name","email","Link","to","FaGithub","FaLinkedin","OverlayTrigger","placement","overlay","Button","variant","RiUserAddFill","PiUserRectangleFill","ImUserCheck","ImUserMinus","already_suggested","_item$developer8","_item$developer9","MdOutlinePersonRemove","NoDataFound","RexettPagination","total_pages_for_all","text","show","handleClose","handleAction","smallLoader","startDate","endDate","Modal","onHide","centered","animation","Header","closeButton","Body","Form","Group","Label","RexettButton","isLoading","handleClick","header","feedbacks","submit","feedback","setFeedback","useState","Control","as","rows","placeholder","onChange","target","value","required","end_reason","RexettSpinner","rejection_reason","SingleJob","_singleJobDescription","_singleJobDescription2","_singleJobDescription3","_singleJobDescription4","_location$state","_location$state2","_singleJobDescription5","_convertToArray","_singleJobDescription6","_convertToArray2","selectedTabsData","setSelectedTabsData","currentTabsStatus","setCurrnetTabsStatus","currentTab","setCurrentTab","statusModal","setStatusModal","isTrue","singleJobDescription","setSingleJobDescription","dispatch","location","useLocation","pathname","split","clientId","localStorage","getItem","allJobPostedList","jobCategoryList","jobPostedData","approvedLoader","clientData","t","useTranslation","useEffect","singleJobPostData","getJobCategoryList","convertToArray","arr","handleJobStatusAction","preventDefault","publishedPost","getDeleteJob","changeJobStatus","_prevData$currentTab2","prevData","d","filter","undefined","stopPropagation","endjob","deletejob","editjob","publishjob","Tabs","defaultActiveKey","onSelect","key","Tab","eventKey","title","currentStatusCssClass","charAt","toUpperCase","slice","MdOutlineDoNotDisturbAlt","handleUnpublished","BsFillSendXFill","BsFillSendFill","handleDelete","FaTrashCan","setItem","TiEdit","dangerouslySetInnerHTML","__html","description","Row","Col","md","client","workExperienceyears","contract_type","job_type","skills","optional_skills","handleSuggestions","payload","jobId","message","getSuggestedDeveloper","JobCard","RejectModal","rejected","EndJobModal","ended","ConfirmationModal","jobPostConfirmMessage","Shortlisted","Interviewing","Suggested","application"],"sourceRoot":""}