{"version":3,"file":"static/js/3981.aa219d4b.chunk.js","mappings":"0RAyBA,MA6NA,EA7NmBA,KACjB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAC1BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,OACrCG,GAAWC,EAAAA,EAAAA,OACX,QAAEC,EAAO,gBAAEC,EAAe,aAAEC,IAAiBC,EAAAA,EAAAA,KAChDC,GAAUA,EAAMC,cAEb,EAAEC,IAAMC,EAAAA,EAAAA,OAEdC,EAAAA,EAAAA,YAAU,KACRV,GAASW,EAAAA,EAAAA,MAAqB,GAC7B,CAACX,KAEJU,EAAAA,EAAAA,YAAU,KACR,MAAME,EAAU,CACdjB,KAAMA,EACNkB,KAAMf,EACNgB,QChCgC,IDkClCd,GAASe,EAAAA,EAAAA,IAAYH,GAAS,GAC7B,CAACjB,EAAMG,EAAWE,KAEDgB,EAAAA,EAAAA,cACjBC,IACC,MAAMC,EAAOf,EAAgBgB,MAAMC,GAASA,EAAKC,KAAOJ,IACxD,OAAW,OAAJC,QAAI,IAAJA,OAAI,EAAJA,EAAMI,KAAK,GAEpB,CAACnB,KAGoBa,EAAAA,EAAAA,cAAaO,GAAW,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKC,MAAM,MAAM,KAEzCC,EAAAA,EAAAA,UAAQ,KAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACN,GAAG,UAASO,SAAEpB,EAAE,cAAuB,CAACA,KAErDQ,EAAAA,EAAAA,cAAaa,IACzC,OAAQA,GACN,IAAK,QACL,IAAK,cACH,MAAO,kBACT,IAAK,YACH,MAAO,kBACT,IAAK,YACL,IAAK,YACH,MAAO,kBACT,QACE,MAAO,GACX,GACC,KAE4Cb,EAAAA,EAAAA,cAAac,IAC1D,GAAsB,OAAlBA,QAAkB,IAAlBA,GAAAA,EAAoBC,OAAQ,CAC9B,MAAMC,EAAoC,OAAlBF,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBX,MACzCc,GACuB,yDAAf,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASC,YAEb,OAAsB,OAAfF,QAAe,IAAfA,OAAe,EAAfA,EAAiBG,YAC1B,IACC,IAqEH,OACET,EAAAA,EAAAA,KAAAU,EAAAA,SAAA,CAAAR,SACGxB,GACCsB,EAAAA,EAAAA,KAACW,EAAAA,EAAY,KAEbX,EAAAA,EAAAA,KAAAU,EAAAA,SAAA,KAsFD,C","sources":["pages/views/JobListing.jsx","pages/views/constant.js"],"sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n  Tabs,\r\n  Tab,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  getJobCategoryList,\r\n  getJobLists,\r\n} from \"../../redux/slices/clientDataSlice\";\r\nimport RexettPagination from \"../../components/atomic/RexettPagination\";\r\nimport { FaEye, FaClipboardUser, FaUsers, FaHandshake } from \"react-icons/fa\";\r\nimport ScreenLoader from \"../../components/atomic/ScreenLoader\";\r\nimport NoDataFound from \"../../components/atomic/NoDataFound\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { PiChatsFill } from \"react-icons/pi\";\r\nimport { MdWorkHistory } from \"react-icons/md\";\r\nimport { JOB_LISTING_PER_PAGE } from \"./constant\";\r\n\r\nconst JobListing = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [activeTab, setActiveTab] = useState(\"all\");\r\n  const dispatch = useDispatch();\r\n  const { jobList, jobCategoryList, screenLoader } = useSelector(\r\n    (state) => state.clientData\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(getJobCategoryList());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    const filters = {\r\n      page: page,\r\n      type: activeTab,\r\n      perPage: JOB_LISTING_PER_PAGE,\r\n    };\r\n    dispatch(getJobLists(filters));\r\n  }, [page, activeTab, dispatch]);\r\n\r\n  const getCategory = useCallback(\r\n    (cat) => {\r\n      const data = jobCategoryList.find((item) => item.id === cat);\r\n      return data?.title;\r\n    },\r\n    [jobCategoryList]\r\n  );\r\n\r\n  const convertToArray = useCallback((arr) => arr?.split(\",\"), []);\r\n\r\n  const viewTooltip = useMemo(() => <Tooltip id=\"tooltip\">{t(\"viewJob\")}</Tooltip>, [t]);\r\n\r\n  const currentStatusCssClass = useCallback((status) => {\r\n    switch (status) {\r\n      case \"ended\":\r\n      case \"unpublished\":\r\n        return \"status-rejected\";\r\n      case \"Initiated\":\r\n        return \"status-progress\";\r\n      case \"completed\":\r\n      case \"published\":\r\n        return \"status-finished\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  }, []);\r\n\r\n  const returnExperienceFromScreeningQuestions = useCallback((screeningQuestions) => {\r\n    if (screeningQuestions?.length) {\r\n      const requiredElement = screeningQuestions?.find(\r\n        (curElem) =>\r\n          curElem?.question === \"How many years of experience do you currently have?\"\r\n      );\r\n      return requiredElement?.ideal_answer;\r\n    }\r\n  }, []);\r\n\r\n  const renderJobList = (jobs) => {\r\n    if (jobs?.length > 0) {\r\n      return jobs.map((item) => (\r\n        <div className=\"job-posted-list d-block\" key={item.id}>\r\n          <div className=\"d-xl-flex justify-content-between align-items-start\">\r\n            <div className=\"job-info-wrapper\">\r\n              <h2 className=\"job-title\">{item.title}</h2>\r\n              <div className=\"profile-req\">\r\n                <p className={returnExperienceFromScreeningQuestions(item?.screening_questions) ? \"grid-text\" : \"\"}>\r\n                  {returnExperienceFromScreeningQuestions(item?.screening_questions)}{\" \"}\r\n                  {returnExperienceFromScreeningQuestions(item?.screening_questions) && \" years\"}\r\n                </p>\r\n                <p className=\"grid-text\">{item?.contract_type}</p>\r\n                <p className=\"grid-text\">{item.job_type}</p>\r\n              </div>\r\n              <p\r\n                className=\"job-description mb-0\"\r\n                dangerouslySetInnerHTML={{ __html: item?.description }}\r\n              ></p>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <div className=\"info-grid\">\r\n                    <h4 className=\"grid-heading\">{t(\"skillsRequired\")}</h4>\r\n                    <ul className=\"need-skill-list\">\r\n                      {item?.skills?.length > 0\r\n                        ? convertToArray(item.skills)?.map((skill) => <li key={skill}>{skill}</li>)\r\n                        : \"Not Mentioned\"}\r\n                    </ul>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            <div className=\"status-wrapper\">\r\n              <div className=\"d-flex gap-3 align-items-center mb-2\">\r\n                <p className={currentStatusCssClass(item?.status)}>\r\n                  {item?.status.charAt(0).toUpperCase() + item?.status.slice(1)}\r\n                </p>\r\n              </div>\r\n              <p className=\"font-15\">\r\n                {t(\"postedDate\")}: <strong>{item.created_at.slice(0, 10)}</strong>\r\n              </p>\r\n              <OverlayTrigger placement=\"bottom\" overlay={viewTooltip}>\r\n                <Link\r\n                  to={`/client/single-job/${item.id}`}\r\n                  state={{\r\n                    workExperienceyears: returnExperienceFromScreeningQuestions(item?.screening_questions),\r\n                  }}\r\n                  className=\"px-3 mb-2 arrow-btn primary-arrow font-16 text-decoration-none\"\r\n                >\r\n                  <FaEye />\r\n                </Link>\r\n              </OverlayTrigger>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ));\r\n    } else {\r\n      return (\r\n          <div className=\"simple-no-data\">\r\n            <NoDataFound data=\"No Jobs are available\" />\r\n          </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const stagesTooltip = (text) => <Tooltip>{text}</Tooltip>;\r\n\r\n  return (\r\n    <>\r\n      {screenLoader ? (\r\n        <ScreenLoader />\r\n      ) : (\r\n        <>\r\n          {/* <Tabs\r\n            defaultActiveKey=\"all\"\r\n            id=\"justify-tab-example\"\r\n            activeKey={activeTab}\r\n            onSelect={(selectedTab) => setActiveTab(selectedTab)}\r\n            className=\"mb-3 notification-tabs job-listing-tabs gap-md-0 gap-3\"\r\n          >\r\n             <Tab eventKey=\"new-job-post\" title=\"New Job Post\">\r\n              <section className=\"job-posted-section\">\r\n                <div className=\"job-posted-wrapper\">\r\n                  {renderJobList(jobList?.data)}\r\n                </div>\r\n              </section>\r\n              {jobList?.totalCount > 5 && (\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <p className=\"showing-result\">\r\n                    {t(\"showing\")} {jobList?.data?.length} {t(\"results\")}\r\n                  </p>\r\n                  <RexettPagination number={jobList?.totalPages} setPage={setPage} page={page} />\r\n                </div>\r\n              )}\r\n            </Tab>\r\n            <Tab eventKey=\"in-progress\" title={t(\"inProgress\")}>\r\n              <section className=\"job-posted-section\">\r\n                <div className=\"job-posted-wrapper\">\r\n                  {renderJobList(jobList?.data)}\r\n                </div>\r\n              </section>\r\n              {jobList?.totalCount > 5 && (\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <p className=\"showing-result\">\r\n                    {t(\"showing\")} {jobList?.data?.length} {t(\"results\")}\r\n                  </p>\r\n                  <RexettPagination number={jobList?.totalPages} setPage={setPage} page={page} />\r\n                </div>\r\n              )}\r\n            </Tab>\r\n            <Tab eventKey=\"in-contract\" title={t(\"in Contract\")}>\r\n              <section className=\"job-posted-section\">\r\n                <div className=\"job-posted-wrapper\">\r\n                  {renderJobList(jobList?.data)}\r\n                </div>\r\n              </section>\r\n              {jobList?.totalCount > 5 && (\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <p className=\"showing-result\">\r\n                    {t(\"showing\")} {jobList?.data?.length} {t(\"results\")}\r\n                  </p>\r\n                  <RexettPagination number={jobList?.totalPages} setPage={setPage} page={page} />\r\n                </div>\r\n              )}\r\n            </Tab>\r\n            <Tab eventKey=\"ended\" title={t(\"endJobs\")}>\r\n              <section className=\"job-posted-section\">\r\n                <div className=\"job-posted-wrapper\">\r\n                  {renderJobList(jobList?.data)}\r\n                </div>\r\n              </section>\r\n              {jobList?.totalCount > 5 && (\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <p className=\"showing-result\">\r\n                    {t(\"showing\")} {jobList?.data?.length} {t(\"results\")}\r\n                  </p>\r\n                  <RexettPagination number={jobList?.totalPages} setPage={setPage} page={page} />\r\n                </div>\r\n              )}\r\n            </Tab>\r\n            <Tab eventKey=\"all\" title={t(\"all\")}>\r\n              <section className=\"job-posted-section\">\r\n                <div className=\"job-posted-wrapper\">\r\n                  {renderJobList(jobList?.data)}\r\n                </div>\r\n              </section>\r\n              {jobList?.totalCount > 5 && (\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <p className=\"showing-result\">\r\n                    {t(\"showing\")} {jobList?.data?.length} {t(\"results\")}\r\n                  </p>\r\n                  <RexettPagination number={jobList?.totalPages} setPage={setPage} page={page} />\r\n                </div>\r\n              )}\r\n            </Tab>\r\n          </Tabs> */}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobListing;\r\n","export const COMPANY_TYPES = [\r\n    { value: 'sole_partnership', label: 'Sole Partnership' },\r\n    { value: 'partnership', label: 'Partnership' },\r\n    { value: 'limited_liability_company(LLC)', label: 'Limited Liability Company (LLC)' },\r\n    { value: 'corporation', label: 'Corporation' },\r\n    { value: 'nonprofit_organization', label: 'Nonprofit Organization' },\r\n    { value: 'cooperative', label: 'Cooperative' },\r\n    { value: 'franchise', label: 'Franchise' },\r\n    { value: 'joint_venture', label: 'Joint Venture' },\r\n  ];\r\n  export const JOB_LISTING_PER_PAGE = 10;\r\n  "],"names":["JobListing","page","setPage","useState","activeTab","setActiveTab","dispatch","useDispatch","jobList","jobCategoryList","screenLoader","useSelector","state","clientData","t","useTranslation","useEffect","getJobCategoryList","filters","type","perPage","getJobLists","useCallback","cat","data","find","item","id","title","arr","split","useMemo","_jsx","Tooltip","children","status","screeningQuestions","length","requiredElement","curElem","question","ideal_answer","_Fragment","ScreenLoader"],"sourceRoot":""}