{"version":3,"file":"static/js/7629.9ec18778.chunk.js","mappings":"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","sources":["pages/views/JobPost.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport RexettButton from \"../../components/atomic/RexettButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  clientJobPost,\r\n  clientUpdatePost,\r\n  createNewJobCategory,\r\n  getJobCategoryList,\r\n  getSkillList,\r\n  singleJobPostData,\r\n} from \"../../redux/slices/clientDataSlice\";\r\nimport { useNavigate, useLocation } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { IoArrowBack } from \"react-icons/io5\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst createOption = (label) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, \"\"),\r\n});\r\n\r\nconst JobPost = () => {\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [selectedOptional, setSelectedOptional] = useState([]);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { skillList, jobCategoryList, smallLoader } = useSelector(\r\n    (state) => state.clientData\r\n  );\r\n  const [otherCategory, setOtherCategory] = useState(null);\r\n  const [options, setOptions] = useState([]);\r\n  const [skillCate, setSkillsCate] = useState([])\r\n  const { jobPostedData } = useSelector(state => state.clientData)\r\n  const { t } = useTranslation()\r\n\r\n  const dispatch = useDispatch();\r\n  let id = location.pathname.split(\"/\")[2]\r\n  const {\r\n    register,\r\n    setValue,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isDirty, isValid, isSubmitting },\r\n  } = useForm({});\r\n\r\n\r\n\r\nconsole.log(selectedOptional,\"selectedOptional\")\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(singleJobPostData(id, () => { }))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    dispatch(getSkillList());\r\n    dispatch(getJobCategoryList());\r\n  }, [dispatch]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (data) {\r\n  //         const array = data.split(\",\").map(tech => ({ label: tech.trim(), value: tech.trim() }));\r\n  //         setSelectedOption(array);\r\n  //     }\r\n  // }, [data]);\r\n\r\n  const getCategory = (cat) => {\r\n    if (cat !== undefined) {\r\n      console.log(cat, \"cat\")\r\n      let data = jobCategoryList.find((item) => item.value == cat)\r\n      console.log(data, \"|d\")\r\n      if (data) {\r\n        setOtherCategory({ label: data.label, value: data.value })\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      setValue(\"title\", jobPostedData?.data?.title)\r\n      setValue(\"experience\", jobPostedData?.data?.experience)\r\n      setValue(\"contract_type\", jobPostedData?.data?.contract_type)\r\n      setValue(\"job_type\", jobPostedData?.data?.job_type)\r\n      setValue(\"description\", jobPostedData?.data?.description)\r\n      convertToArray(\"optional\",jobPostedData?.data?.optional_skills)\r\n      convertToArray(\"skill\", jobPostedData?.data?.skills)\r\n    } else {\r\n      reset()\r\n      setOtherCategory(null)\r\n      setSelectedOption([])\r\n      setSelectedOptional([])\r\n      setValue(\"experience\", '')\r\n      setValue(\"contract_type\",'')\r\n\r\n    }\r\n  }, [jobPostedData, jobCategoryList, id])\r\n\r\n  const skillListMapped = skillList.map((item) => {\r\n    return { value: item.id, label: item.title };\r\n  });\r\n\r\n  console.log(jobPostedData, \"jobPostedData----\")\r\n  useEffect(() => {\r\n    setOptions(jobCategoryList);\r\n    setSkillsCate(skillListMapped)\r\n  }, [jobCategoryList, skillList]);\r\n\r\n  const handleCreate = (inputValue) => {\r\n    setTimeout(() => {\r\n      const newOption = createOption(inputValue);\r\n      setOptions((prev) => [...prev, newOption]);\r\n      let data = {\r\n        title: inputValue\r\n      }\r\n      dispatch(createNewJobCategory(data, () => {\r\n        dispatch(getJobCategoryList());\r\n      }))\r\n    }, 1000);\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    let convertedArr = selectedOptional.map((val)=> val.label)\r\n    let convertArr = selectedOption.map((item) => item.label);\r\n    let data = {\r\n      ...values,\r\n      skills: convertArr.toString(),\r\n      optional_skills: convertedArr.toString(),\r\n    };\r\n    if (id) {\r\n      dispatch(clientUpdatePost(data, id, () => {\r\n        navigate(\"/client/job-posted\");\r\n      }))\r\n    } else {\r\n      dispatch(\r\n        clientJobPost(data, () => {\r\n          navigate(\"/client/job-posted\");\r\n        })\r\n      );\r\n    };\r\n\r\n  }\r\n  const onChangeSelect = (val) => {\r\n    setTimeout(() => {\r\n      const newOption = createOption(val);\r\n      setSkillsCate((prev) => [...prev, newOption]);\r\n\r\n    }, 1000);\r\n  };\r\n\r\n  const convertToArray = (arg,arr) => {\r\n    if (arr) {\r\n      const skillsArray = arr?.split(\",\");\r\n      let data = skillsArray?.map((item) => {\r\n        return {\r\n          value: item, label: item\r\n        }\r\n      })\r\n      if(arg==\"optional\"){\r\n      setSelectedOptional(data)\r\n      }else{\r\n        setSelectedOption(data)\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <section className=\"job-post-section card-box\">\r\n        <h2 className=\"mb-4 section-head d-flex align-items-center gap-3\">\r\n          <Link className=\"main-btn outline-main-btn mb-0\" to=\"/client/job-posted\">\r\n            <IoArrowBack />\r\n          </Link>{\" \"}\r\n          {id ? \"Edit Post\" : \"Job Post\"}\r\n        </h2>\r\n        <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n          <Row>\r\n            <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"jobName\")}</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"common-field\"\r\n                  placeholder=\"Enter Job Name\"\r\n                  {...register(\"title\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Job name is Required\",\r\n                    },\r\n                  })}\r\n                />\r\n              </Form.Group>\r\n              <p className=\"error-message \">{errors.title?.message}</p>\r\n            </Col>\r\n            {/* <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"jobCategory\")}</Form.Label>\r\n\r\n                <CreatableSelect\r\n                  isClearable\r\n                  onChange={(newValue) => {\r\n                    console.log(newValue,\"newValue\")\r\n                    setOtherCategory(newValue)\r\n                  }}\r\n                  onCreateOption={handleCreate}\r\n                  options={options}\r\n                  value={otherCategory}\r\n                />\r\n              </Form.Group>\r\n            </Col> */}\r\n            <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"skillsRequired\")}</Form.Label>\r\n                <CreatableSelect\r\n                  isMulti\r\n                  isClearable\r\n                  name={selectedOption}\r\n                  onChange={(newValue) => {\r\n                    setSelectedOption(newValue)\r\n                  }}\r\n                  onCreateOption={onChangeSelect}\r\n                  options={skillCate}\r\n                  value={selectedOption}\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"experienceRequired\")}</Form.Label>\r\n                <Form.Select\r\n                  className=\"common-field\"\r\n                  {...register(\"experience\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Experienced is required\",\r\n                    },\r\n                  })}\r\n                >\r\n                  <option disabled selected value=''>\r\n                    {t(\"select\")} {t(\"experienceRequired\")}\r\n                  </option>\r\n                  <option value=\"Less_than_one\">{t(\"lessThan1Year\")}</option>\r\n                  <option value=\"1-2_Years\">1 - 2 {t(\"years\")}</option>\r\n                  <option value=\"2-3_Years\">2 - 3 {t(\"years\")}</option>\r\n                  <option value=\"3-4_Years\">3 - 4 {t(\"years\")}</option>\r\n                  <option value=\"4-5_Years\">4 - 5 {t(\"years\")}</option>\r\n                  <option value=\"5_more\">5+ {t(\"years\")}</option>\r\n                </Form.Select>\r\n              </Form.Group>\r\n              <p className=\"error-message\">{errors.experience?.message}</p>\r\n            </Col>\r\n            <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"optionalSkills\")}</Form.Label>\r\n                <CreatableSelect\r\n                  isMulti\r\n                  isClearable\r\n                  name=\"optional_skills\"\r\n                  onChange={(newValue) => {\r\n                    setSelectedOptional(newValue)\r\n                  }}\r\n                  onCreateOption={onChangeSelect}\r\n                  options={skillCate}\r\n                  value={selectedOptional}\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label className=\"d-block\">{t(\"location\")}</Form.Label>\r\n                <div>\r\n                  <Form.Check\r\n                    type=\"radio\"\r\n                    value=\"Remote\"\r\n                    label=\"Remote\"\r\n                    id=\"remote_loc\"\r\n                    inline\r\n                    name=\"location_radio\"\r\n                    {...register(\"job_type\", {\r\n                      required: {\r\n                        value: true,\r\n                        message: \"Job Type is required\",\r\n                      },\r\n                    })}\r\n                  />\r\n                  <Form.Check\r\n                    type=\"radio\"\r\n                    value=\"On Site\"\r\n                    label=\"On Site\"\r\n                    id=\"remote_onsite\"\r\n                    inline\r\n                    name=\"location_radio\"\r\n                    {...register(\"job_type\", {\r\n                      required: {\r\n                        value: true,\r\n                        message: \"Job Type is required\",\r\n                      },\r\n                    })}\r\n                  />\r\n                  <Form.Check\r\n                    type=\"radio\"\r\n                    value=\"Hybrid\"\r\n                    label=\"Hybrid\"\r\n                    id=\"remote_hybrid\"\r\n                    inline\r\n                    name=\"location_radio\"\r\n                    {...register(\"job_type\", {\r\n                      required: {\r\n                        value: true,\r\n                        message: \"Job Type is required\",\r\n                      },\r\n                    })}\r\n                  />\r\n                </div>\r\n                <p className=\"error-message \">{errors.job_type?.message}</p>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"contract\")}</Form.Label>\r\n                <Form.Select\r\n                  className=\"common-field\"\r\n                  {...register(\"contract_type\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Contract Type is required\",\r\n                    },\r\n                  })}\r\n                >\r\n                  <option value=\"\" selected disabled>\r\n                    {t(\"selectContract\")}\r\n                  </option>\r\n                  <option value=\"Hourly\">{t(\"hourly\")}</option>\r\n                  <option value=\"Project Base\">{t(\"projectBase\")}</option>\r\n                  <option value=\"Six month contract\">6 {t(\"MonthContract\")}</option>\r\n                  <option value=\"One Year Contract\">1 {t(\"yearContract\")}</option>\r\n                  <option value=\"One Year Contract\">1 {t(\"yearAndAbove\")}</option>\r\n                  <option value=\"Permanent\">{t(\"permanent\")}</option>\r\n                </Form.Select>\r\n              </Form.Group>\r\n              <p className=\"error-message \">{errors.contract_type?.message}</p>\r\n            </Col>\r\n            {/* <Col md=\"6\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"skills\")}</Form.Label> */}\r\n            {/* <Select\r\n                  options={skillListMapped}\r\n                  onChange={(val) => onChangeSelect(val)}\r\n                  name=\"skills\"\r\n                  isMulti\r\n               \r\n                /> */}\r\n            {/* <CreatableSelect\r\n                  isMulti\r\n                  isClearable\r\n                  name={selectedOption}\r\n                  onChange={(newValue) => {\r\n                    setSelectedOption(newValue)\r\n                  }}\r\n                  onCreateOption={onChangeSelect}\r\n                  options={skillCate}\r\n                  value={selectedOption}\r\n                />\r\n              </Form.Group> */}\r\n            {/* <p className=\"error-message \">\r\n                                {errors.skills?.message}\r\n                            </p> */}\r\n            {/* </Col> */}\r\n            <Col md=\"12\" className=\"mb-4\">\r\n              <Form.Group>\r\n                <Form.Label>{t(\"jobDescription\")}</Form.Label>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  className=\"common-field\"\r\n                  rows=\"5\"\r\n                  placeholder=\"Enter Job Description\"\r\n                  {...register(\"description\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Description is required\",\r\n                    },\r\n                  })}\r\n                />\r\n              </Form.Group>\r\n              <p className=\"error-message \">{errors.description?.message}</p>\r\n            </Col>\r\n          </Row>\r\n          <div className=\"text-center\">\r\n            <RexettButton\r\n              type=\"submit\"\r\n              text={t(\"submit\")}\r\n              className=\"main-btn px-5\"\r\n              disabled={smallLoader}\r\n              isLoading={smallLoader}\r\n            />\r\n          </div>\r\n        </form>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default JobPost;\r\n"],"names":["createOption","label","value","toLowerCase","replace","JobPost","_errors$title","_errors$experience","_errors$job_type","_errors$contract_type","_errors$description","selectedOption","setSelectedOption","useState","selectedOptional","setSelectedOptional","navigate","useNavigate","location","useLocation","skillList","jobCategoryList","smallLoader","useSelector","state","clientData","otherCategory","setOtherCategory","options","setOptions","skillCate","setSkillsCate","jobPostedData","t","useTranslation","dispatch","useDispatch","id","pathname","split","register","setValue","handleSubmit","reset","formState","errors","isDirty","isValid","isSubmitting","useForm","console","log","useEffect","singleJobPostData","getSkillList","getJobCategoryList","_jobPostedData$data","_jobPostedData$data2","_jobPostedData$data3","_jobPostedData$data4","_jobPostedData$data5","_jobPostedData$data6","_jobPostedData$data7","data","title","experience","contract_type","job_type","description","convertToArray","optional_skills","skills","skillListMapped","map","item","onChangeSelect","val","setTimeout","newOption","prev","arg","arr","skillsArray","_jsx","_Fragment","children","_jsxs","className","Link","to","IoArrowBack","onSubmit","values","convertedArr","toString","clientUpdatePost","clientJobPost","noValidate","Row","Col","md","Form","Group","Label","Control","type","placeholder","required","message","CreatableSelect","isMulti","isClearable","name","onChange","newValue","onCreateOption","Select","disabled","selected","Check","inline","as","rows","RexettButton","text","isLoading"],"sourceRoot":""}