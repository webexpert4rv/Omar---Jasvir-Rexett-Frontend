{"version":3,"file":"static/js/8632.d36f5eb2.chunk.js","mappings":"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","sources":["pages/views/EarnedBack.jsx","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Form, Button, Pagination } from \"react-bootstrap\";\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { earnedBackOfDeveloper } from \"../../redux/slices/clientDataSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\nconst data = {\r\n    labels: ['Earned Back', 'Developers'],\r\n    datasets: [\r\n        {\r\n            data: [95, 5],\r\n            backgroundColor: ['#180049', '#00cadc'],\r\n            hoverBackgroundColor: ['#060012', '#005d65'],\r\n        },\r\n    ],\r\n};\r\nconst options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    cutoutPercentage: 80,\r\n    legend: {\r\n        display: true,\r\n        position: 'top',\r\n        labels: {\r\n            fontColor: '#000',\r\n            fontSize: 16,\r\n        },\r\n    },\r\n    plugins: {\r\n        tooltip: {\r\n            enabled: true,\r\n            bodyFontSize: 14,\r\n            bodyFontColor: '#fff',\r\n            backgroundColor: '#000',\r\n            borderColor: '#ddd',\r\n            cornerRadius: 5,\r\n            callbacks: {\r\n                label: function (context) {\r\n                    let label = context.label || '';\r\n                    if (label) {\r\n                        label += ': ';\r\n                    }\r\n                    label += Math.round(context.parsed * 100) + '%';\r\n                    return label;\r\n                }\r\n            }\r\n        },\r\n    },\r\n};\r\n\r\nconst EarnedBack = () => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useTranslation();\r\n    const { earnedBack, screenLoader } = useSelector(state => state.clientData)\r\n    useEffect(() => {\r\n        dispatch(earnedBackOfDeveloper())\r\n    }, [])\r\n    return (\r\n        <>\r\n            <section>\r\n                <div>\r\n                    {/* <Form className=\"mb-4\">\r\n                        <div className=\"d-flex flex-wrap gap-3 justify-content-between\">\r\n                            <div className=\"d-flex flex-wrap gap-3\">\r\n                                <div>\r\n                                    <Form.Label className=\"common-label\">From</Form.Label>\r\n                                    <Form.Control type=\"date\" className=\"filter-field shadow-none\"></Form.Control>\r\n                                </div>\r\n                                <div>\r\n                                    <Form.Label className=\"common-label\">To</Form.Label>\r\n                                    <Form.Control type=\"date\" className=\"filter-field shadow-none\"></Form.Control>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                                <div className=\"d-flex gap-3\">\r\n                                    <Form.Control type=\"text\" placeholder=\"Search\" className=\"search-field\"></Form.Control>\r\n                                    <button className=\"main-btn px-5\">Filter</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Form> */}\r\n                </div>\r\n                <p className=\"mb-3\">{t(\"hiring\")}</p>\r\n                <div className=\"table-responsive mb-3\">\r\n                    <table className=\"table time-table table-ui-custom\">\r\n                        <thead>\r\n                            <th className=\"time-table-head\">\r\n                                {t(\"hiredDevelopers\")}\r\n                            </th>\r\n                            <th className=\"time-table-head\">\r\n                                {t(\"totalHours\")}\r\n                            </th>\r\n                            <th className=\"time-table-head\">\r\n                                {t(\"earnedBack\")} 5%\r\n                            </th>\r\n                            <th className=\"time-table-head\">\r\n                                {t(\"redeem\")}\r\n                            </th>\r\n                            <th className=\"time-table-head\">\r\n                                {t(\"report\")}\r\n                            </th>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"time-table-data\">{earnedBack?.totalContracts}</td>\r\n                                <td className=\"time-table-data\">{earnedBack?.totalHours?.toFixed(2)}</td>\r\n                                <td className=\"time-table-data\">{earnedBack?.earnedBackHours} {t(\"hrs\")}</td>\r\n                                <td className=\"time-table-data\">\r\n                                    <Form.Select className=\"status-select shadow-none\">\r\n                                        <option value=\"finished\">{t(\"Yes\")}</option>\r\n                                        <option value=\"progress\">{t(\"No\")}</option>\r\n                                    </Form.Select>\r\n                                </td>\r\n                                <td className=\"time-table-data\">\r\n                                    <Button variant=\"transparent\" className=\"outline-main-btn font-14\">{t(\"submit\")}</Button>\r\n                                </td>\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <h5 className=\"section-head-sub border-bottom-grey pb-2 mb-4\">{t(\"statisticEarnedBack\")}</h5>\r\n            </section>\r\n            <div className=\"stats-chart-wrapper\">\r\n                <Doughnut data={data} options={options} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default EarnedBack;","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["data","labels","datasets","backgroundColor","hoverBackgroundColor","options","responsive","maintainAspectRatio","cutoutPercentage","legend","display","position","fontColor","fontSize","plugins","tooltip","enabled","bodyFontSize","bodyFontColor","borderColor","cornerRadius","callbacks","label","context","Math","round","parsed","EarnedBack","_earnedBack$totalHour","dispatch","useDispatch","t","useTranslation","earnedBack","screenLoader","useSelector","state","clientData","useEffect","earnedBackOfDeveloper","_jsxs","_Fragment","children","_jsx","className","totalContracts","totalHours","toFixed","earnedBackHours","Form","Select","value","Button","variant","Doughnut","defaultDatasetIdKey","reforwardRef","ref","current","setLabels","currentData","nextLabels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","map","nextDataset","currentDataset","find","dataset","includes","push","Object","assign","cloneData","nextData","ChartComponent","props","height","width","redraw","type","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","chart","nextOptions","setOptions","config","setTimeout","update","React","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","DoughnutController"],"sourceRoot":""}