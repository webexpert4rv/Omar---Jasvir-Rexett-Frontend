{"version":3,"file":"static/js/8660.44d62751.chunk.js","mappings":"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","sources":["components/common/websiteRegisterStepsForm/StepperFormWrapper.jsx","pages/websiteRegisterForm/client/Step1.jsx","pages/websiteRegisterForm/client/Step2.jsx","pages/websiteRegisterForm/client/ClientRegisterForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst StepperFormWrapper = ({ children }) => {\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n\r\n  const nextStep = () => {\r\n    if (currentStep < children.length - 1) {\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    if (currentStep > 0) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        \r\n      <div>{children[currentStep]}</div>\r\n      <div>\r\n        <button onClick={prevStep} disabled={currentStep === 0}>\r\n          Continue\r\n        </button>\r\n        <button onClick={nextStep} disabled={currentStep === children.length - 1}>\r\n          Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StepperFormWrapper;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport CommonInput from \"../../../components/atomic/CommonInput\";\r\nimport ScreenLoader from \"../../../components/atomic/ScreenLoader\";\r\nimport CommonAutocomplete from \"../../../components/atomic/CommonAutoComplete\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { getAllCountries } from \"../../../redux/slices/authenticationDataSlice\";\r\n\r\nconst Step1 = ({ role }) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const { t } = useTranslation();\r\n  const {\r\n    register,\r\n    setValue,\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty, isValid, isSubmitting },\r\n  } = useForm({});\r\n  const dispatch = useDispatch();\r\n\r\n  const [isPassword, setPassword] = useState({\r\n    firstPass: false,\r\n    secondPass: false,\r\n  });\r\n  const [file, setFile] = useState(null);\r\n  const { smallLoader, userProfileDetails, screenLoader, countries } =\r\n    useSelector((state) => state.developerData);\r\n\r\n  const GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_API;\r\n\r\n  console.log(userProfileDetails, \"userProfileDetails\");\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllCountries());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (userProfileDetails?.data) {\r\n      setValue(\"name\", userProfileDetails?.data?.name);\r\n      setValue(\"email\", userProfileDetails?.data?.email);\r\n      setValue(\"phone_number\", userProfileDetails?.data?.phone_number);\r\n      setValue(\"address\", userProfileDetails?.data?.address);\r\n      setValue(\"address_2\", userProfileDetails?.data?.address_2);\r\n      setValue(\"city\", userProfileDetails?.data?.city);\r\n      setValue(\"country\", userProfileDetails?.data?.country);\r\n      setValue(\"passcode\", userProfileDetails?.data?.passcode);\r\n    }\r\n  }, [userProfileDetails]);\r\n\r\n  const disableProfile = <Tooltip id=\"tooltip\">Disable your Account</Tooltip>;\r\n\r\n  const onSubmit = (values) => {\r\n    // let formData = new FormData();\r\n    // let fileData = new FormData();\r\n    // for (const key in values) {\r\n    //   formData.append(key, values[key]);\r\n    // }\r\n    // fileData.append(\"file\", file);\r\n    // if (file == null) {\r\n    //   let data = {\r\n    //     ...values,\r\n    //     user_id: userId,\r\n    //   };\r\n    //   dispatch(updateDeveloperProfile(data));\r\n    // } else {\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileData, (url) => {\r\n    //       let data = {\r\n    //         ...values,\r\n    //         profile_picture: url,\r\n    //         user_id: userId,\r\n    //       };\r\n    //       dispatch(updateDeveloperProfile(data));\r\n    //     })\r\n    //   );\r\n    // }\r\n  };\r\n  const validatePassword = (value) => {\r\n    if (value === \"\") {\r\n      return true; // Password is not required, so return true if empty\r\n    } else {\r\n      // Check if password matches the pattern\r\n      const pattern = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\r\n      if (!pattern.test(value)) {\r\n        return \"Password must contain at least a symbol, upper and lower case letters and a number\";\r\n      }\r\n    }\r\n    return true; // Password meets the criteria\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setFile(file);\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"card-box\">\r\n        <div className=\"d-flex gap-3 align-items-center pb-2 mb-3 border-bottom-grey\">\r\n          <h2 className=\"section-head-sub mb-0 border-0\">\r\n            Add your Contact Details We are a Global tech talent and solutions\r\n            provider. Join our platform and take advantage of the opportunity to\r\n            enhance your talent acquisition journey with Rexett, all while\r\n            enjoying significant savings of up to 72% on hiring staff. Join the\r\n            ranks of over 100 satisfied clients who have chosen to partner with\r\n            Rexett.\r\n          </h2>\r\n        </div>\r\n        <div>\r\n          {screenLoader ? (\r\n            <ScreenLoader />\r\n          ) : (\r\n            <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n              <Row className=\"mb-4\">\r\n                <Col md=\"6\">\r\n                  <div className=\"inner-form\">\r\n                    <div>\r\n                      <CommonInput\r\n                        // label={t(\"As Individual\")}\r\n                        name=\"name\"\r\n                        control={control}\r\n                        rules={{ required: \"Name is required\" }}\r\n                        error={errors.name}\r\n                        type=\"radio\"\r\n                        options={[\r\n                          { label: \"As Individual\", value: \"as_individual\" },\r\n                        ]}\r\n                      />\r\n                      <CommonInput\r\n                        // label={t(\"As Company\")}\r\n                        name=\"name\"\r\n                        control={control}\r\n                        rules={{ required: \"Name is required\" }}\r\n                        error={errors.name}\r\n                        type=\"radio\"\r\n                        options={[{ label: \"As Company\", value: \"as_company\" }]}\r\n                      />\r\n                    </div>\r\n\r\n                    <CommonInput\r\n                      label={t(\"Name\") + \" *\"}\r\n                      name=\"name\"\r\n                      control={control}\r\n                      rules={{ required: \"Name is required\" }}\r\n                      error={errors.name}\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"email\") + \" *\"}\r\n                      name=\"email\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: \"Email is required\",\r\n                        pattern: {\r\n                          value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                          message: \"Invalid email format\",\r\n                        },\r\n                      }}\r\n                      error={errors.email}\r\n                      readOnly\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"Password\")}\r\n                      name=\"password\"\r\n                      control={control}\r\n                      type={isPassword.firstPass ? \"text\" : \"password\"}\r\n                      rules={{ validate: validatePassword }}\r\n                      error={errors.previous_password}\r\n                      isPassword\r\n                      onTogglePassword={() =>\r\n                        setPassword({\r\n                          ...isPassword,\r\n                          firstPass: !isPassword.firstPass,\r\n                        })\r\n                      }\r\n                      icon={<FaEye />}\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"Confirm Password\")}\r\n                      name=\"confirm_password\"\r\n                      control={control}\r\n                      type={isPassword.secondPass ? \"text\" : \"password\"}\r\n                      rules={{ validate: validatePassword }}\r\n                      error={errors.password}\r\n                      isPassword\r\n                      onTogglePassword={() =>\r\n                        setPassword({\r\n                          ...isPassword,\r\n                          secondPass: !isPassword.secondPass,\r\n                        })\r\n                      }\r\n                      icon={<FaEye />}\r\n                    />\r\n                    <CommonAutocomplete\r\n                      label={t(\"address\") + \" *\"}\r\n                      name=\"address\"\r\n                      control={control}\r\n                      rules={{ required: \"Address is required\" }}\r\n                      error={errors.address}\r\n                      apiKey={GOOGLE_MAP_API_KEY}\r\n                      onPlaceSelected={(place) => {\r\n                        setValue(\"address\", place.formatted_address);\r\n                      }}\r\n                      onChange={(e) => {\r\n                        setValue(\"address\", e.target.value);\r\n                      }}\r\n                      options={{ types: [\"establishment\", \"geocode\"] }}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                  <div>\r\n                    <CommonInput\r\n                      label={t(\"phone\") + \"*\"}\r\n                      name=\"phone_number\"\r\n                      control={control}\r\n                      type=\"phone\"\r\n                      rules={{\r\n                        required: \"Phone Number is required\",\r\n                        pattern: {\r\n                          value: /^\\+?[0-9]{10,14}$/,\r\n                          message: \"Please enter a valid phone number\",\r\n                        },\r\n                      }}\r\n                      error={errors.phone_number}\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"city\") + \"*\"}\r\n                      name=\"city\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: \"City is required\",\r\n                        pattern: {\r\n                          value: /^[A-Za-z\\s]+$/,\r\n                          message:\r\n                            \"City should not contain numbers or special characters\",\r\n                        },\r\n                      }}\r\n                      error={errors.city}\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"postCode\") + \"*\"}\r\n                      name=\"passcode\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: \"Postcode is required\",\r\n                        pattern: {\r\n                          value: /^[0-9]+$/,\r\n                          message: \"Postcode should only contain numbers\",\r\n                        },\r\n                      }}\r\n                      error={errors.passcode}\r\n                    />\r\n\r\n                    <CommonInput\r\n                      label={t(\"country\") + \"*\"}\r\n                      name=\"country\"\r\n                      type=\"select\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: \"Country is required\",\r\n                        pattern: {\r\n                          value: /^[A-Za-z\\s]+$/,\r\n                          message:\r\n                            \"Country should not contain numbers or special characters\",\r\n                        },\r\n                      }}\r\n                      selectOptions={countries}\r\n                      error={errors.country}\r\n                    />\r\n\r\n                    <CommonInput\r\n                      label={t(\"state\") + \"*\"}\r\n                      name=\"state\"\r\n                      type=\"select\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: \"State is required\",\r\n                        pattern: {\r\n                          value: /^[A-Za-z\\s]+$/,\r\n                          message:\r\n                            \"Country should not contain numbers or special characters\",\r\n                        },\r\n                      }}\r\n                      error={errors.country}\r\n                      selectOptions={countries}\r\n                    />\r\n                    <CommonInput\r\n                      label={t(\"City\") + \"*\"}\r\n                      name=\"city\"\r\n                      type=\"select\"\r\n                      control={control}\r\n                      rules={{\r\n                        required: \"City is required\",\r\n                        pattern: {\r\n                          value: /^[A-Za-z\\s]+$/,\r\n                          message:\r\n                            \"Country should not contain numbers or special characters\",\r\n                        },\r\n                      }}\r\n                      selectOptions={countries}\r\n                      error={errors.country}\r\n                    />\r\n\r\n                    <CommonInput\r\n                      label={t(\"image\") + \"*\"}\r\n                      name=\"profile_picture\"\r\n                      type=\"file\"\r\n                      control={control}\r\n                      rules={{ required: false }}\r\n                      onChange={(e) => handleFileChange(e)}\r\n                      accept=\"image/*\"\r\n                    />\r\n                    <Form.Label\r\n                      htmlFor=\"developer-image\"\r\n                      className=\"upload-image-label d-block\"\r\n                    >\r\n                      <HiUpload />\r\n                      {t(\"uploadImage\")}\r\n                    </Form.Label>\r\n                    <div>\r\n                      <img\r\n                        src={\r\n                          selectedImage\r\n                            ? selectedImage\r\n                            : userProfileDetails?.data?.profile_picture\r\n                        }\r\n                        alt=\"Selected\"\r\n                        className=\"uploaded-image\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              <div className=\"text-center\">\r\n                <RexettButton\r\n                  type=\"submit\"\r\n                  text={t(\"updateProfile\")}\r\n                  className=\"main-btn px-5\"\r\n                  variant=\"transparent\"\r\n                  disabled={smallLoader}\r\n                  isLoading={smallLoader}\r\n                />\r\n              </div>\r\n            </form>\r\n          )}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default Step1;\r\n","import React, { useState } from 'react'\r\nimport CommonInput from '../../../components/atomic/CommonInput';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst Step2 = () => {\r\n    const {\r\n        register,\r\n        setValue,\r\n        control,\r\n        handleSubmit,\r\n        formState: { errors, isDirty, isValid, isSubmitting },\r\n      } = useForm({});\r\n    const [selectedOption, setSelectedOption] = useState('current_team');\r\n\r\n    const options = [\r\n        { value: 'current_team', label: 'Additional support for your current team' },\r\n        { value: 'new_project', label: 'Starting fresh on a new project' },\r\n        { value: 'specific_tasks', label: 'Need help with specific tasks' },\r\n        { value: 'not_sure', label: 'I am not sure at the moment' }\r\n      ]\r\n\r\n    //   const handleOptionChange = (event) => {\r\n    //     setSelectedOption(event.target.value);\r\n    //   };\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Select the ideal length for your engagement</h1>\r\n      <p>Select the ideal length for your engagement</p>\r\n      <form id=\"stepForm\">\r\n\r\n          <CommonInput\r\n                        // label={t(\"As Company\")}\r\n                        name=\"name\"\r\n                        control={control}\r\n                        rules={{ required: \"Name is required\" }}\r\n                        error={errors.name}\r\n                        type=\"radio\"\r\n                        options={options}\r\n                      />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Step2","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FaEye } from \"react-icons/fa\";\r\nimport { HiUpload } from \"react-icons/hi\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport CommonInput from \"../../../components/atomic/CommonInput\";\r\nimport ScreenLoader from \"../../../components/atomic/ScreenLoader\";\r\nimport CommonAutocomplete from \"../../../components/atomic/CommonAutoComplete\";\r\nimport RexettButton from \"../../../components/atomic/RexettButton\";\r\nimport { getAllCountries } from \"../../../redux/slices/authenticationDataSlice\";\r\nimport StepperFormWrapper from \"../../../components/common/websiteRegisterStepsForm/StepperFormWrapper\";\r\nimport Step1 from \"./Step1\";\r\nimport Step2 from \"./Step2\";\r\n\r\nconst ClientRegisterForm = ({ role }) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const { t } = useTranslation();\r\n  const {\r\n    register,\r\n    setValue,\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty, isValid, isSubmitting },\r\n  } = useForm({});\r\n  const dispatch = useDispatch();\r\n\r\n  const [isPassword, setPassword] = useState({\r\n    firstPass: false,\r\n    secondPass: false,\r\n  });\r\n  const [file, setFile] = useState(null);\r\n  const { smallLoader, userProfileDetails, screenLoader, countries } =\r\n    useSelector((state) => state.developerData);\r\n\r\n  const GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_API;\r\n\r\n  console.log(userProfileDetails, \"userProfileDetails\");\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllCountries());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (userProfileDetails?.data) {\r\n      setValue(\"name\", userProfileDetails?.data?.name);\r\n      setValue(\"email\", userProfileDetails?.data?.email);\r\n      setValue(\"phone_number\", userProfileDetails?.data?.phone_number);\r\n      setValue(\"address\", userProfileDetails?.data?.address);\r\n      setValue(\"address_2\", userProfileDetails?.data?.address_2);\r\n      setValue(\"city\", userProfileDetails?.data?.city);\r\n      setValue(\"country\", userProfileDetails?.data?.country);\r\n      setValue(\"passcode\", userProfileDetails?.data?.passcode);\r\n    }\r\n  }, [userProfileDetails]);\r\n\r\n  const disableProfile = <Tooltip id=\"tooltip\">Disable your Account</Tooltip>;\r\n\r\n  const onSubmit = (values) => {\r\n    // let formData = new FormData();\r\n    // let fileData = new FormData();\r\n    // for (const key in values) {\r\n    //   formData.append(key, values[key]);\r\n    // }\r\n    // fileData.append(\"file\", file);\r\n    // if (file == null) {\r\n    //   let data = {\r\n    //     ...values,\r\n    //     user_id: userId,\r\n    //   };\r\n    //   dispatch(updateDeveloperProfile(data));\r\n    // } else {\r\n    //   dispatch(\r\n    //     filePreassignedUrlGenerate(fileData, (url) => {\r\n    //       let data = {\r\n    //         ...values,\r\n    //         profile_picture: url,\r\n    //         user_id: userId,\r\n    //       };\r\n    //       dispatch(updateDeveloperProfile(data));\r\n    //     })\r\n    //   );\r\n    // }\r\n  };\r\n  const validatePassword = (value) => {\r\n    if (value === \"\") {\r\n      return true; // Password is not required, so return true if empty\r\n    } else {\r\n      // Check if password matches the pattern\r\n      const pattern = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\r\n      if (!pattern.test(value)) {\r\n        return \"Password must contain at least a symbol, upper and lower case letters and a number\";\r\n      }\r\n    }\r\n    return true; // Password meets the criteria\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setFile(file);\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n     <StepperFormWrapper>\r\n      <Step1/>\r\n      <Step2 />\r\n      <Step1/>\r\n     </StepperFormWrapper>\r\n    </>\r\n  );\r\n};\r\nexport default ClientRegisterForm;\r\n"],"names":["_ref","children","currentStep","setCurrentStep","useState","_jsxs","_jsx","onClick","prevStep","disabled","nextStep","length","_userProfileDetails$d9","role","localStorage","getItem","selectedImage","setSelectedImage","t","useTranslation","register","setValue","control","handleSubmit","formState","errors","isDirty","isValid","isSubmitting","useForm","dispatch","useDispatch","isPassword","setPassword","firstPass","secondPass","file","setFile","smallLoader","userProfileDetails","screenLoader","countries","useSelector","state","developerData","console","log","useEffect","getAllCountries","_userProfileDetails$d","_userProfileDetails$d2","_userProfileDetails$d3","_userProfileDetails$d4","_userProfileDetails$d5","_userProfileDetails$d6","_userProfileDetails$d7","_userProfileDetails$d8","data","name","email","phone_number","address","address_2","city","country","passcode","Tooltip","validatePassword","value","test","_Fragment","className","ScreenLoader","onSubmit","values","noValidate","Row","Col","md","CommonInput","rules","required","error","type","options","label","pattern","message","readOnly","validate","previous_password","onTogglePassword","icon","FaEye","password","CommonAutocomplete","apiKey","process","onPlaceSelected","place","formatted_address","onChange","e","target","types","selectOptions","event","files","reader","FileReader","onloadend","result","readAsDataURL","handleFileChange","accept","Form","Label","htmlFor","HiUpload","src","profile_picture","alt","RexettButton","text","variant","isLoading","Step2","selectedOption","setSelectedOption","id","StepperFormWrapper","Step1"],"sourceRoot":""}