/*! For license information please see msal-browser.17d457ba25ad9432e826.cjs.LICENSE.txt */
"use strict";const Constants={LIBRARY_NAME:"MSAL.JS",SKU:"msal.js.common",CACHE_PREFIX:"msal",DEFAULT_AUTHORITY:"https://login.microsoftonline.com/common/",DEFAULT_AUTHORITY_HOST:"login.microsoftonline.com",DEFAULT_COMMON_TENANT:"common",ADFS:"adfs",DSTS:"dstsv2",AAD_INSTANCE_DISCOVERY_ENDPT:"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",CIAM_AUTH_URL:".ciamlogin.com",AAD_TENANT_DOMAIN_SUFFIX:".onmicrosoft.com",RESOURCE_DELIM:"|",NO_ACCOUNT:"NO_ACCOUNT",CLAIMS:"claims",CONSUMER_UTID:"9188040d-6c67-4c5b-b112-36a304b66dad",OPENID_SCOPE:"openid",PROFILE_SCOPE:"profile",OFFLINE_ACCESS_SCOPE:"offline_access",EMAIL_SCOPE:"email",CODE_RESPONSE_TYPE:"code",CODE_GRANT_TYPE:"authorization_code",RT_GRANT_TYPE:"refresh_token",FRAGMENT_RESPONSE_MODE:"fragment",S256_CODE_CHALLENGE_METHOD:"S256",URL_FORM_CONTENT_TYPE:"application/x-www-form-urlencoded;charset=utf-8",AUTHORIZATION_PENDING:"authorization_pending",NOT_DEFINED:"not_defined",EMPTY_STRING:"",NOT_APPLICABLE:"N/A",NOT_AVAILABLE:"Not Available",FORWARD_SLASH:"/",IMDS_ENDPOINT:"http://169.254.169.254/metadata/instance/compute/location",IMDS_VERSION:"2020-06-01",IMDS_TIMEOUT:2e3,AZURE_REGION_AUTO_DISCOVER_FLAG:"TryAutoDetect",REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX:"login.microsoft.com",KNOWN_PUBLIC_CLOUDS:["login.microsoftonline.com","login.windows.net","login.microsoft.com","sts.windows.net"],TOKEN_RESPONSE_TYPE:"token",ID_TOKEN_RESPONSE_TYPE:"id_token",SHR_NONCE_VALIDITY:240,INVALID_INSTANCE:"invalid_instance"},HttpStatus={SUCCESS:200,SUCCESS_RANGE_START:200,SUCCESS_RANGE_END:299,REDIRECT:302,CLIENT_ERROR:400,CLIENT_ERROR_RANGE_START:400,BAD_REQUEST:400,UNAUTHORIZED:401,NOT_FOUND:404,REQUEST_TIMEOUT:408,TOO_MANY_REQUESTS:429,CLIENT_ERROR_RANGE_END:499,SERVER_ERROR:500,SERVER_ERROR_RANGE_START:500,SERVICE_UNAVAILABLE:503,GATEWAY_TIMEOUT:504,SERVER_ERROR_RANGE_END:599,MULTI_SIDED_ERROR:600},OIDC_DEFAULT_SCOPES=[Constants.OPENID_SCOPE,Constants.PROFILE_SCOPE,Constants.OFFLINE_ACCESS_SCOPE],OIDC_SCOPES=[...OIDC_DEFAULT_SCOPES,Constants.EMAIL_SCOPE],HeaderNames={CONTENT_TYPE:"Content-Type",RETRY_AFTER:"Retry-After",CCS_HEADER:"X-AnchorMailbox",WWWAuthenticate:"WWW-Authenticate",AuthenticationInfo:"Authentication-Info",X_MS_REQUEST_ID:"x-ms-request-id",X_MS_HTTP_VERSION:"x-ms-httpver"},PersistentCacheKeys={ID_TOKEN:"idtoken",CLIENT_INFO:"client.info",ADAL_ID_TOKEN:"adal.idtoken",ERROR:"error",ERROR_DESC:"error.description",ACTIVE_ACCOUNT:"active-account",ACTIVE_ACCOUNT_FILTERS:"active-account-filters"},AADAuthorityConstants={COMMON:"common",ORGANIZATIONS:"organizations",CONSUMERS:"consumers"},ClaimsRequestKeys={ACCESS_TOKEN:"access_token",XMS_CC:"xms_cc"},PromptValue={LOGIN:"login",SELECT_ACCOUNT:"select_account",CONSENT:"consent",NONE:"none",CREATE:"create",NO_SESSION:"no_session"},CodeChallengeMethodValues={PLAIN:"plain",S256:"S256"},ServerResponseType={QUERY:"query",FRAGMENT:"fragment"},ResponseMode={...ServerResponseType,FORM_POST:"form_post"},GrantType={IMPLICIT_GRANT:"implicit",AUTHORIZATION_CODE_GRANT:"authorization_code",CLIENT_CREDENTIALS_GRANT:"client_credentials",RESOURCE_OWNER_PASSWORD_GRANT:"password",REFRESH_TOKEN_GRANT:"refresh_token",DEVICE_CODE_GRANT:"device_code",JWT_BEARER:"urn:ietf:params:oauth:grant-type:jwt-bearer"},CacheAccountType={MSSTS_ACCOUNT_TYPE:"MSSTS",ADFS_ACCOUNT_TYPE:"ADFS",MSAV1_ACCOUNT_TYPE:"MSA",GENERIC_ACCOUNT_TYPE:"Generic"},Separators={CACHE_KEY_SEPARATOR:"-",CLIENT_INFO_SEPARATOR:"."},CredentialType={ID_TOKEN:"IdToken",ACCESS_TOKEN:"AccessToken",ACCESS_TOKEN_WITH_AUTH_SCHEME:"AccessToken_With_AuthScheme",REFRESH_TOKEN:"RefreshToken"},APP_METADATA="appmetadata",CLIENT_INFO="client_info",THE_FAMILY_ID="1",AUTHORITY_METADATA_CONSTANTS={CACHE_KEY:"authority-metadata",REFRESH_TIME_SECONDS:86400},AuthorityMetadataSource={CONFIG:"config",CACHE:"cache",NETWORK:"network",HARDCODED_VALUES:"hardcoded_values"},SERVER_TELEM_CONSTANTS={SCHEMA_VERSION:5,MAX_CUR_HEADER_BYTES:80,MAX_LAST_HEADER_BYTES:330,MAX_CACHED_ERRORS:50,CACHE_KEY:"server-telemetry",CATEGORY_SEPARATOR:"|",VALUE_SEPARATOR:",",OVERFLOW_TRUE:"1",OVERFLOW_FALSE:"0",UNKNOWN_ERROR:"unknown_error"},AuthenticationScheme={BEARER:"Bearer",POP:"pop",SSH:"ssh-cert"},ThrottlingConstants={DEFAULT_THROTTLE_TIME_SECONDS:60,DEFAULT_MAX_THROTTLE_TIME_SECONDS:3600,THROTTLING_PREFIX:"throttling",X_MS_LIB_CAPABILITY_VALUE:"retry-after, h429"},Errors={INVALID_GRANT_ERROR:"invalid_grant",CLIENT_MISMATCH_ERROR:"client_mismatch"},PasswordGrantConstants={username:"username",password:"password"},ResponseCodes={httpSuccess:200,httpBadRequest:400},RegionDiscoverySources={FAILED_AUTO_DETECTION:"1",INTERNAL_CACHE:"2",ENVIRONMENT_VARIABLE:"3",IMDS:"4"},RegionDiscoveryOutcomes={CONFIGURED_MATCHES_DETECTED:"1",CONFIGURED_NO_AUTO_DETECTION:"2",CONFIGURED_NOT_DETECTED:"3",AUTO_DETECTION_REQUESTED_SUCCESSFUL:"4",AUTO_DETECTION_REQUESTED_FAILED:"5"},CacheOutcome={NOT_APPLICABLE:"0",FORCE_REFRESH_OR_CLAIMS:"1",NO_CACHED_ACCESS_TOKEN:"2",CACHED_ACCESS_TOKEN_EXPIRED:"3",PROACTIVELY_REFRESHED:"4"},JsonWebTokenTypes={Jwt:"JWT",Jwk:"JWK",Pop:"pop"},DEFAULT_TOKEN_RENEWAL_OFFSET_SEC=300,unexpectedError="unexpected_error",postRequestFailed$1="post_request_failed";var AuthErrorCodes=Object.freeze({__proto__:null,postRequestFailed:postRequestFailed$1,unexpectedError:unexpectedError});const AuthErrorMessages={[unexpectedError]:"Unexpected error in authentication.",[postRequestFailed$1]:"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details."},AuthErrorMessage={unexpectedError:{code:unexpectedError,desc:AuthErrorMessages[unexpectedError]},postRequestFailed:{code:postRequestFailed$1,desc:AuthErrorMessages[postRequestFailed$1]}};class AuthError extends Error{constructor(e,t,r){super(t?`${e}: ${t}`:e),Object.setPrototypeOf(this,AuthError.prototype),this.errorCode=e||Constants.EMPTY_STRING,this.errorMessage=t||Constants.EMPTY_STRING,this.subError=r||Constants.EMPTY_STRING,this.name="AuthError"}setCorrelationId(e){this.correlationId=e}}function createAuthError(e,t){return new AuthError(e,t?`${AuthErrorMessages[e]} ${t}`:AuthErrorMessages[e])}const clientInfoDecodingError="client_info_decoding_error",clientInfoEmptyError="client_info_empty_error",tokenParsingError="token_parsing_error",nullOrEmptyToken="null_or_empty_token",endpointResolutionError="endpoints_resolution_error",networkError="network_error",openIdConfigError="openid_config_error",hashNotDeserialized="hash_not_deserialized",invalidState="invalid_state",stateMismatch="state_mismatch",stateNotFound="state_not_found",nonceMismatch="nonce_mismatch",authTimeNotFound="auth_time_not_found",maxAgeTranspired="max_age_transpired",multipleMatchingTokens="multiple_matching_tokens",multipleMatchingAccounts="multiple_matching_accounts",multipleMatchingAppMetadata="multiple_matching_appMetadata",requestCannotBeMade="request_cannot_be_made",cannotRemoveEmptyScope="cannot_remove_empty_scope",cannotAppendScopeSet="cannot_append_scopeset",emptyInputScopeSet="empty_input_scopeset",deviceCodePollingCancelled="device_code_polling_cancelled",deviceCodeExpired="device_code_expired",deviceCodeUnknownError="device_code_unknown_error",noAccountInSilentRequest="no_account_in_silent_request",invalidCacheRecord="invalid_cache_record",invalidCacheEnvironment="invalid_cache_environment",noAccountFound="no_account_found",noCryptoObject="no_crypto_object",unexpectedCredentialType="unexpected_credential_type",invalidAssertion="invalid_assertion",invalidClientCredential="invalid_client_credential",tokenRefreshRequired="token_refresh_required",userTimeoutReached="user_timeout_reached",tokenClaimsCnfRequiredForSignedJwt="token_claims_cnf_required_for_signedjwt",authorizationCodeMissingFromServerResponse="authorization_code_missing_from_server_response",bindingKeyNotRemoved="binding_key_not_removed",endSessionEndpointNotSupported="end_session_endpoint_not_supported",keyIdMissing="key_id_missing",noNetworkConnectivity$1="no_network_connectivity",userCanceled="user_canceled",missingTenantIdError="missing_tenant_id_error",methodNotImplemented="method_not_implemented",nestedAppAuthBridgeDisabled="nested_app_auth_bridge_disabled";var ClientAuthErrorCodes=Object.freeze({__proto__:null,authTimeNotFound:authTimeNotFound,authorizationCodeMissingFromServerResponse:authorizationCodeMissingFromServerResponse,bindingKeyNotRemoved:bindingKeyNotRemoved,cannotAppendScopeSet:cannotAppendScopeSet,cannotRemoveEmptyScope:cannotRemoveEmptyScope,clientInfoDecodingError:clientInfoDecodingError,clientInfoEmptyError:clientInfoEmptyError,deviceCodeExpired:deviceCodeExpired,deviceCodePollingCancelled:deviceCodePollingCancelled,deviceCodeUnknownError:deviceCodeUnknownError,emptyInputScopeSet:emptyInputScopeSet,endSessionEndpointNotSupported:endSessionEndpointNotSupported,endpointResolutionError:endpointResolutionError,hashNotDeserialized:hashNotDeserialized,invalidAssertion:invalidAssertion,invalidCacheEnvironment:invalidCacheEnvironment,invalidCacheRecord:invalidCacheRecord,invalidClientCredential:invalidClientCredential,invalidState:invalidState,keyIdMissing:keyIdMissing,maxAgeTranspired:maxAgeTranspired,methodNotImplemented:methodNotImplemented,missingTenantIdError:missingTenantIdError,multipleMatchingAccounts:multipleMatchingAccounts,multipleMatchingAppMetadata:multipleMatchingAppMetadata,multipleMatchingTokens:multipleMatchingTokens,nestedAppAuthBridgeDisabled:nestedAppAuthBridgeDisabled,networkError:networkError,noAccountFound:noAccountFound,noAccountInSilentRequest:noAccountInSilentRequest,noCryptoObject:noCryptoObject,noNetworkConnectivity:noNetworkConnectivity$1,nonceMismatch:nonceMismatch,nullOrEmptyToken:nullOrEmptyToken,openIdConfigError:openIdConfigError,requestCannotBeMade:requestCannotBeMade,stateMismatch:stateMismatch,stateNotFound:stateNotFound,tokenClaimsCnfRequiredForSignedJwt:tokenClaimsCnfRequiredForSignedJwt,tokenParsingError:tokenParsingError,tokenRefreshRequired:tokenRefreshRequired,unexpectedCredentialType:unexpectedCredentialType,userCanceled:userCanceled,userTimeoutReached:userTimeoutReached});const ClientAuthErrorMessages={[clientInfoDecodingError]:"The client info could not be parsed/decoded correctly",[clientInfoEmptyError]:"The client info was empty",[tokenParsingError]:"Token cannot be parsed",[nullOrEmptyToken]:"The token is null or empty",[endpointResolutionError]:"Endpoints cannot be resolved",[networkError]:"Network request failed",[openIdConfigError]:"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.",[hashNotDeserialized]:"The hash parameters could not be deserialized",[invalidState]:"State was not the expected format",[stateMismatch]:"State mismatch error",[stateNotFound]:"State not found",[nonceMismatch]:"Nonce mismatch error",[authTimeNotFound]:"Max Age was requested and the ID token is missing the auth_time variable. auth_time is an optional claim and is not enabled by default - it must be enabled. See https://aka.ms/msaljs/optional-claims for more information.",[maxAgeTranspired]:"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.",[multipleMatchingTokens]:"The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more requirements such as authority or account.",[multipleMatchingAccounts]:"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account",[multipleMatchingAppMetadata]:"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata",[requestCannotBeMade]:"Token request cannot be made without authorization code or refresh token.",[cannotRemoveEmptyScope]:"Cannot remove null or empty scope from ScopeSet",[cannotAppendScopeSet]:"Cannot append ScopeSet",[emptyInputScopeSet]:"Empty input ScopeSet cannot be processed",[deviceCodePollingCancelled]:"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.",[deviceCodeExpired]:"Device code is expired.",[deviceCodeUnknownError]:"Device code stopped polling for unknown reasons.",[noAccountInSilentRequest]:"Please pass an account object, silent flow is not supported without account information",[invalidCacheRecord]:"Cache record object was null or undefined.",[invalidCacheEnvironment]:"Invalid environment when attempting to create cache entry",[noAccountFound]:"No account found in cache for given key.",[noCryptoObject]:"No crypto object detected.",[unexpectedCredentialType]:"Unexpected credential type.",[invalidAssertion]:"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515",[invalidClientCredential]:"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential",[tokenRefreshRequired]:"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.",[userTimeoutReached]:"User defined timeout for device code polling reached",[tokenClaimsCnfRequiredForSignedJwt]:"Cannot generate a POP jwt if the token_claims are not populated",[authorizationCodeMissingFromServerResponse]:"Server response does not contain an authorization code to proceed",[bindingKeyNotRemoved]:"Could not remove the credential's binding key from storage.",[endSessionEndpointNotSupported]:"The provided authority does not support logout",[keyIdMissing]:"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.",[noNetworkConnectivity$1]:"No network connectivity. Check your internet connection.",[userCanceled]:"User cancelled the flow.",[missingTenantIdError]:"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.",[methodNotImplemented]:"This method has not been implemented",[nestedAppAuthBridgeDisabled]:"The nested app auth bridge is disabled"},ClientAuthErrorMessage={clientInfoDecodingError:{code:clientInfoDecodingError,desc:ClientAuthErrorMessages[clientInfoDecodingError]},clientInfoEmptyError:{code:clientInfoEmptyError,desc:ClientAuthErrorMessages[clientInfoEmptyError]},tokenParsingError:{code:tokenParsingError,desc:ClientAuthErrorMessages[tokenParsingError]},nullOrEmptyToken:{code:nullOrEmptyToken,desc:ClientAuthErrorMessages[nullOrEmptyToken]},endpointResolutionError:{code:endpointResolutionError,desc:ClientAuthErrorMessages[endpointResolutionError]},networkError:{code:networkError,desc:ClientAuthErrorMessages[networkError]},unableToGetOpenidConfigError:{code:openIdConfigError,desc:ClientAuthErrorMessages[openIdConfigError]},hashNotDeserialized:{code:hashNotDeserialized,desc:ClientAuthErrorMessages[hashNotDeserialized]},invalidStateError:{code:invalidState,desc:ClientAuthErrorMessages[invalidState]},stateMismatchError:{code:stateMismatch,desc:ClientAuthErrorMessages[stateMismatch]},stateNotFoundError:{code:stateNotFound,desc:ClientAuthErrorMessages[stateNotFound]},nonceMismatchError:{code:nonceMismatch,desc:ClientAuthErrorMessages[nonceMismatch]},authTimeNotFoundError:{code:authTimeNotFound,desc:ClientAuthErrorMessages[authTimeNotFound]},maxAgeTranspired:{code:maxAgeTranspired,desc:ClientAuthErrorMessages[maxAgeTranspired]},multipleMatchingTokens:{code:multipleMatchingTokens,desc:ClientAuthErrorMessages[multipleMatchingTokens]},multipleMatchingAccounts:{code:multipleMatchingAccounts,desc:ClientAuthErrorMessages[multipleMatchingAccounts]},multipleMatchingAppMetadata:{code:multipleMatchingAppMetadata,desc:ClientAuthErrorMessages[multipleMatchingAppMetadata]},tokenRequestCannotBeMade:{code:requestCannotBeMade,desc:ClientAuthErrorMessages[requestCannotBeMade]},removeEmptyScopeError:{code:cannotRemoveEmptyScope,desc:ClientAuthErrorMessages[cannotRemoveEmptyScope]},appendScopeSetError:{code:cannotAppendScopeSet,desc:ClientAuthErrorMessages[cannotAppendScopeSet]},emptyInputScopeSetError:{code:emptyInputScopeSet,desc:ClientAuthErrorMessages[emptyInputScopeSet]},DeviceCodePollingCancelled:{code:deviceCodePollingCancelled,desc:ClientAuthErrorMessages[deviceCodePollingCancelled]},DeviceCodeExpired:{code:deviceCodeExpired,desc:ClientAuthErrorMessages[deviceCodeExpired]},DeviceCodeUnknownError:{code:deviceCodeUnknownError,desc:ClientAuthErrorMessages[deviceCodeUnknownError]},NoAccountInSilentRequest:{code:noAccountInSilentRequest,desc:ClientAuthErrorMessages[noAccountInSilentRequest]},invalidCacheRecord:{code:invalidCacheRecord,desc:ClientAuthErrorMessages[invalidCacheRecord]},invalidCacheEnvironment:{code:invalidCacheEnvironment,desc:ClientAuthErrorMessages[invalidCacheEnvironment]},noAccountFound:{code:noAccountFound,desc:ClientAuthErrorMessages[noAccountFound]},noCryptoObj:{code:noCryptoObject,desc:ClientAuthErrorMessages[noCryptoObject]},unexpectedCredentialType:{code:unexpectedCredentialType,desc:ClientAuthErrorMessages[unexpectedCredentialType]},invalidAssertion:{code:invalidAssertion,desc:ClientAuthErrorMessages[invalidAssertion]},invalidClientCredential:{code:invalidClientCredential,desc:ClientAuthErrorMessages[invalidClientCredential]},tokenRefreshRequired:{code:tokenRefreshRequired,desc:ClientAuthErrorMessages[tokenRefreshRequired]},userTimeoutReached:{code:userTimeoutReached,desc:ClientAuthErrorMessages[userTimeoutReached]},tokenClaimsRequired:{code:tokenClaimsCnfRequiredForSignedJwt,desc:ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt]},noAuthorizationCodeFromServer:{code:authorizationCodeMissingFromServerResponse,desc:ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse]},bindingKeyNotRemovedError:{code:bindingKeyNotRemoved,desc:ClientAuthErrorMessages[bindingKeyNotRemoved]},logoutNotSupported:{code:endSessionEndpointNotSupported,desc:ClientAuthErrorMessages[endSessionEndpointNotSupported]},keyIdMissing:{code:keyIdMissing,desc:ClientAuthErrorMessages[keyIdMissing]},noNetworkConnectivity:{code:noNetworkConnectivity$1,desc:ClientAuthErrorMessages[noNetworkConnectivity$1]},userCanceledError:{code:userCanceled,desc:ClientAuthErrorMessages[userCanceled]},missingTenantIdError:{code:missingTenantIdError,desc:ClientAuthErrorMessages[missingTenantIdError]},nestedAppAuthBridgeDisabled:{code:nestedAppAuthBridgeDisabled,desc:ClientAuthErrorMessages[nestedAppAuthBridgeDisabled]}};class ClientAuthError extends AuthError{constructor(e,t){super(e,t?`${ClientAuthErrorMessages[e]}: ${t}`:ClientAuthErrorMessages[e]),this.name="ClientAuthError",Object.setPrototypeOf(this,ClientAuthError.prototype)}}function createClientAuthError(e,t){return new ClientAuthError(e,t)}const DEFAULT_CRYPTO_IMPLEMENTATION={createNewGuid:()=>{throw createClientAuthError(methodNotImplemented)},base64Decode:()=>{throw createClientAuthError(methodNotImplemented)},base64Encode:()=>{throw createClientAuthError(methodNotImplemented)},base64UrlEncode:()=>{throw createClientAuthError(methodNotImplemented)},encodeKid:()=>{throw createClientAuthError(methodNotImplemented)},async getPublicKeyThumbprint(){throw createClientAuthError(methodNotImplemented)},async removeTokenBindingKey(){throw createClientAuthError(methodNotImplemented)},async clearKeystore(){throw createClientAuthError(methodNotImplemented)},async signJwt(){throw createClientAuthError(methodNotImplemented)},async hashString(){throw createClientAuthError(methodNotImplemented)}};exports.LogLevel=void 0,function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Info=2]="Info",e[e.Verbose=3]="Verbose",e[e.Trace=4]="Trace"}(exports.LogLevel||(exports.LogLevel={}));class Logger{constructor(e,t,r){this.level=exports.LogLevel.Info;const n=e||Logger.createDefaultLoggerOptions();this.localCallback=n.loggerCallback||(()=>{}),this.piiLoggingEnabled=n.piiLoggingEnabled||!1,this.level="number"===typeof n.logLevel?n.logLevel:exports.LogLevel.Info,this.correlationId=n.correlationId||Constants.EMPTY_STRING,this.packageName=t||Constants.EMPTY_STRING,this.packageVersion=r||Constants.EMPTY_STRING}static createDefaultLoggerOptions(){return{loggerCallback:()=>{},piiLoggingEnabled:!1,logLevel:exports.LogLevel.Info}}clone(e,t,r){return new Logger({loggerCallback:this.localCallback,piiLoggingEnabled:this.piiLoggingEnabled,logLevel:this.level,correlationId:r||this.correlationId},e,t)}logMessage(e,t){if(t.logLevel>this.level||!this.piiLoggingEnabled&&t.containsPii)return;const r=`${`[${(new Date).toUTCString()}] : [${t.correlationId||this.correlationId||""}]`} : ${this.packageName}@${this.packageVersion} : ${exports.LogLevel[t.logLevel]} - ${e}`;this.executeCallback(t.logLevel,r,t.containsPii||!1)}executeCallback(e,t,r){this.localCallback&&this.localCallback(e,t,r)}error(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Error,containsPii:!1,correlationId:t||Constants.EMPTY_STRING})}errorPii(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Error,containsPii:!0,correlationId:t||Constants.EMPTY_STRING})}warning(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Warning,containsPii:!1,correlationId:t||Constants.EMPTY_STRING})}warningPii(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Warning,containsPii:!0,correlationId:t||Constants.EMPTY_STRING})}info(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Info,containsPii:!1,correlationId:t||Constants.EMPTY_STRING})}infoPii(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Info,containsPii:!0,correlationId:t||Constants.EMPTY_STRING})}verbose(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Verbose,containsPii:!1,correlationId:t||Constants.EMPTY_STRING})}verbosePii(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Verbose,containsPii:!0,correlationId:t||Constants.EMPTY_STRING})}trace(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Trace,containsPii:!1,correlationId:t||Constants.EMPTY_STRING})}tracePii(e,t){this.logMessage(e,{logLevel:exports.LogLevel.Trace,containsPii:!0,correlationId:t||Constants.EMPTY_STRING})}isPiiLoggingEnabled(){return this.piiLoggingEnabled||!1}}const name$1="@azure/msal-common",version$1="14.15.0",AzureCloudInstance={None:"none",AzurePublic:"https://login.microsoftonline.com",AzurePpe:"https://login.windows-ppe.net",AzureChina:"https://login.chinacloudapi.cn",AzureGermany:"https://login.microsoftonline.de",AzureUsGovernment:"https://login.microsoftonline.us"};function extractTokenClaims(e,t){const r=getJWSPayload(e);try{const e=t(r);return JSON.parse(e)}catch(n){throw createClientAuthError(tokenParsingError)}}function getJWSPayload(e){if(!e)throw createClientAuthError(nullOrEmptyToken);const t=/^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/.exec(e);if(!t||t.length<4)throw createClientAuthError(tokenParsingError);return t[2]}function checkMaxAge(e,t){if(0===t||Date.now()-3e5>e+t)throw createClientAuthError(maxAgeTranspired)}function nowSeconds(){return Math.round((new Date).getTime()/1e3)}function isTokenExpired(e,t){const r=Number(e)||0;return nowSeconds()+t>r}function wasClockTurnedBack(e){return Number(e)>nowSeconds()}function generateCredentialKey(e){return[generateAccountId(e),generateCredentialId(e),generateTarget(e),generateClaimsHash(e),generateScheme(e)].join(Separators.CACHE_KEY_SEPARATOR).toLowerCase()}function createIdTokenEntity(e,t,r,n,o){return{credentialType:CredentialType.ID_TOKEN,homeAccountId:e,environment:t,clientId:n,secret:r,realm:o}}function createAccessTokenEntity(e,t,r,n,o,i,a,s,c,l,d,u,h,g,p){const m={homeAccountId:e,credentialType:CredentialType.ACCESS_TOKEN,secret:r,cachedAt:nowSeconds().toString(),expiresOn:a.toString(),extendedExpiresOn:s.toString(),environment:t,clientId:n,realm:o,target:i,tokenType:d||AuthenticationScheme.BEARER};if(u&&(m.userAssertionHash=u),l&&(m.refreshOn=l.toString()),g&&(m.requestedClaims=g,m.requestedClaimsHash=p),m.tokenType?.toLowerCase()!==AuthenticationScheme.BEARER.toLowerCase())switch(m.credentialType=CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME,m.tokenType){case AuthenticationScheme.POP:const e=extractTokenClaims(r,c);if(!e?.cnf?.kid)throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);m.keyId=e.cnf.kid;break;case AuthenticationScheme.SSH:m.keyId=h}return m}function createRefreshTokenEntity(e,t,r,n,o,i,a){const s={credentialType:CredentialType.REFRESH_TOKEN,homeAccountId:e,environment:t,clientId:n,secret:r};return i&&(s.userAssertionHash=i),o&&(s.familyId=o),a&&(s.expiresOn=a.toString()),s}function isCredentialEntity(e){return e.hasOwnProperty("homeAccountId")&&e.hasOwnProperty("environment")&&e.hasOwnProperty("credentialType")&&e.hasOwnProperty("clientId")&&e.hasOwnProperty("secret")}function isAccessTokenEntity(e){return!!e&&(isCredentialEntity(e)&&e.hasOwnProperty("realm")&&e.hasOwnProperty("target")&&(e.credentialType===CredentialType.ACCESS_TOKEN||e.credentialType===CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME))}function isIdTokenEntity(e){return!!e&&(isCredentialEntity(e)&&e.hasOwnProperty("realm")&&e.credentialType===CredentialType.ID_TOKEN)}function isRefreshTokenEntity(e){return!!e&&(isCredentialEntity(e)&&e.credentialType===CredentialType.REFRESH_TOKEN)}function generateAccountId(e){return[e.homeAccountId,e.environment].join(Separators.CACHE_KEY_SEPARATOR).toLowerCase()}function generateCredentialId(e){const t=e.credentialType===CredentialType.REFRESH_TOKEN&&e.familyId||e.clientId;return[e.credentialType,t,e.realm||""].join(Separators.CACHE_KEY_SEPARATOR).toLowerCase()}function generateTarget(e){return(e.target||"").toLowerCase()}function generateClaimsHash(e){return(e.requestedClaimsHash||"").toLowerCase()}function generateScheme(e){return e.tokenType&&e.tokenType.toLowerCase()!==AuthenticationScheme.BEARER.toLowerCase()?e.tokenType.toLowerCase():""}function isServerTelemetryEntity(e,t){const r=0===e.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY);let n=!0;return t&&(n=t.hasOwnProperty("failedRequests")&&t.hasOwnProperty("errors")&&t.hasOwnProperty("cacheHits")),r&&n}function isThrottlingEntity(e,t){let r=!1;e&&(r=0===e.indexOf(ThrottlingConstants.THROTTLING_PREFIX));let n=!0;return t&&(n=t.hasOwnProperty("throttleTime")),r&&n}function generateAppMetadataKey({environment:e,clientId:t}){return[APP_METADATA,e,t].join(Separators.CACHE_KEY_SEPARATOR).toLowerCase()}function isAppMetadataEntity(e,t){return!!t&&(0===e.indexOf(APP_METADATA)&&t.hasOwnProperty("clientId")&&t.hasOwnProperty("environment"))}function isAuthorityMetadataEntity(e,t){return!!t&&(0===e.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY)&&t.hasOwnProperty("aliases")&&t.hasOwnProperty("preferred_cache")&&t.hasOwnProperty("preferred_network")&&t.hasOwnProperty("canonical_authority")&&t.hasOwnProperty("authorization_endpoint")&&t.hasOwnProperty("token_endpoint")&&t.hasOwnProperty("issuer")&&t.hasOwnProperty("aliasesFromNetwork")&&t.hasOwnProperty("endpointsFromNetwork")&&t.hasOwnProperty("expiresAt")&&t.hasOwnProperty("jwks_uri"))}function generateAuthorityMetadataExpiresAt(){return nowSeconds()+AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS}function updateAuthorityEndpointMetadata(e,t,r){e.authorization_endpoint=t.authorization_endpoint,e.token_endpoint=t.token_endpoint,e.end_session_endpoint=t.end_session_endpoint,e.issuer=t.issuer,e.endpointsFromNetwork=r,e.jwks_uri=t.jwks_uri}function updateCloudDiscoveryMetadata(e,t,r){e.aliases=t.aliases,e.preferred_cache=t.preferred_cache,e.preferred_network=t.preferred_network,e.aliasesFromNetwork=r}function isAuthorityMetadataExpired(e){return e.expiresAt<=nowSeconds()}const redirectUriEmpty="redirect_uri_empty",claimsRequestParsingError="claims_request_parsing_error",authorityUriInsecure="authority_uri_insecure",urlParseError="url_parse_error",urlEmptyError="empty_url_error",emptyInputScopesError="empty_input_scopes_error",invalidPromptValue="invalid_prompt_value",invalidClaims="invalid_claims",tokenRequestEmpty="token_request_empty",logoutRequestEmpty="logout_request_empty",invalidCodeChallengeMethod="invalid_code_challenge_method",pkceParamsMissing="pkce_params_missing",invalidCloudDiscoveryMetadata="invalid_cloud_discovery_metadata",invalidAuthorityMetadata="invalid_authority_metadata",untrustedAuthority="untrusted_authority",missingSshJwk="missing_ssh_jwk",missingSshKid="missing_ssh_kid",missingNonceAuthenticationHeader="missing_nonce_authentication_header",invalidAuthenticationHeader="invalid_authentication_header",cannotSetOIDCOptions="cannot_set_OIDCOptions",cannotAllowNativeBroker="cannot_allow_native_broker",authorityMismatch="authority_mismatch";var ClientConfigurationErrorCodes=Object.freeze({__proto__:null,authorityMismatch:authorityMismatch,authorityUriInsecure:authorityUriInsecure,cannotAllowNativeBroker:cannotAllowNativeBroker,cannotSetOIDCOptions:cannotSetOIDCOptions,claimsRequestParsingError:claimsRequestParsingError,emptyInputScopesError:emptyInputScopesError,invalidAuthenticationHeader:invalidAuthenticationHeader,invalidAuthorityMetadata:invalidAuthorityMetadata,invalidClaims:invalidClaims,invalidCloudDiscoveryMetadata:invalidCloudDiscoveryMetadata,invalidCodeChallengeMethod:invalidCodeChallengeMethod,invalidPromptValue:invalidPromptValue,logoutRequestEmpty:logoutRequestEmpty,missingNonceAuthenticationHeader:missingNonceAuthenticationHeader,missingSshJwk:missingSshJwk,missingSshKid:missingSshKid,pkceParamsMissing:pkceParamsMissing,redirectUriEmpty:redirectUriEmpty,tokenRequestEmpty:tokenRequestEmpty,untrustedAuthority:untrustedAuthority,urlEmptyError:urlEmptyError,urlParseError:urlParseError});const ClientConfigurationErrorMessages={[redirectUriEmpty]:"A redirect URI is required for all calls, and none has been set.",[claimsRequestParsingError]:"Could not parse the given claims request object.",[authorityUriInsecure]:"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options",[urlParseError]:"URL could not be parsed into appropriate segments.",[urlEmptyError]:"URL was empty or null.",[emptyInputScopesError]:"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.",[invalidPromptValue]:"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest",[invalidClaims]:"Given claims parameter must be a stringified JSON object.",[tokenRequestEmpty]:"Token request was empty and not found in cache.",[logoutRequestEmpty]:"The logout request was null or undefined.",[invalidCodeChallengeMethod]:'code_challenge_method passed is invalid. Valid values are "plain" and "S256".',[pkceParamsMissing]:"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request",[invalidCloudDiscoveryMetadata]:"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields",[invalidAuthorityMetadata]:"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.",[untrustedAuthority]:"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.",[missingSshJwk]:"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.",[missingSshKid]:"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.",[missingNonceAuthenticationHeader]:"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.",[invalidAuthenticationHeader]:"Invalid authentication header provided",[cannotSetOIDCOptions]:"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.",[cannotAllowNativeBroker]:"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.",[authorityMismatch]:"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority."},ClientConfigurationErrorMessage={redirectUriNotSet:{code:redirectUriEmpty,desc:ClientConfigurationErrorMessages[redirectUriEmpty]},claimsRequestParsingError:{code:claimsRequestParsingError,desc:ClientConfigurationErrorMessages[claimsRequestParsingError]},authorityUriInsecure:{code:authorityUriInsecure,desc:ClientConfigurationErrorMessages[authorityUriInsecure]},urlParseError:{code:urlParseError,desc:ClientConfigurationErrorMessages[urlParseError]},urlEmptyError:{code:urlEmptyError,desc:ClientConfigurationErrorMessages[urlEmptyError]},emptyScopesError:{code:emptyInputScopesError,desc:ClientConfigurationErrorMessages[emptyInputScopesError]},invalidPrompt:{code:invalidPromptValue,desc:ClientConfigurationErrorMessages[invalidPromptValue]},invalidClaimsRequest:{code:invalidClaims,desc:ClientConfigurationErrorMessages[invalidClaims]},tokenRequestEmptyError:{code:tokenRequestEmpty,desc:ClientConfigurationErrorMessages[tokenRequestEmpty]},logoutRequestEmptyError:{code:logoutRequestEmpty,desc:ClientConfigurationErrorMessages[logoutRequestEmpty]},invalidCodeChallengeMethod:{code:invalidCodeChallengeMethod,desc:ClientConfigurationErrorMessages[invalidCodeChallengeMethod]},invalidCodeChallengeParams:{code:pkceParamsMissing,desc:ClientConfigurationErrorMessages[pkceParamsMissing]},invalidCloudDiscoveryMetadata:{code:invalidCloudDiscoveryMetadata,desc:ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata]},invalidAuthorityMetadata:{code:invalidAuthorityMetadata,desc:ClientConfigurationErrorMessages[invalidAuthorityMetadata]},untrustedAuthority:{code:untrustedAuthority,desc:ClientConfigurationErrorMessages[untrustedAuthority]},missingSshJwk:{code:missingSshJwk,desc:ClientConfigurationErrorMessages[missingSshJwk]},missingSshKid:{code:missingSshKid,desc:ClientConfigurationErrorMessages[missingSshKid]},missingNonceAuthenticationHeader:{code:missingNonceAuthenticationHeader,desc:ClientConfigurationErrorMessages[missingNonceAuthenticationHeader]},invalidAuthenticationHeader:{code:invalidAuthenticationHeader,desc:ClientConfigurationErrorMessages[invalidAuthenticationHeader]},cannotSetOIDCOptions:{code:cannotSetOIDCOptions,desc:ClientConfigurationErrorMessages[cannotSetOIDCOptions]},cannotAllowNativeBroker:{code:cannotAllowNativeBroker,desc:ClientConfigurationErrorMessages[cannotAllowNativeBroker]},authorityMismatch:{code:authorityMismatch,desc:ClientConfigurationErrorMessages[authorityMismatch]}};class ClientConfigurationError extends AuthError{constructor(e){super(e,ClientConfigurationErrorMessages[e]),this.name="ClientConfigurationError",Object.setPrototypeOf(this,ClientConfigurationError.prototype)}}function createClientConfigurationError(e){return new ClientConfigurationError(e)}class StringUtils{static isEmptyObj(e){if(e)try{const t=JSON.parse(e);return 0===Object.keys(t).length}catch(t){}return!0}static startsWith(e,t){return 0===e.indexOf(t)}static endsWith(e,t){return e.length>=t.length&&e.lastIndexOf(t)===e.length-t.length}static queryStringToObject(e){const t={},r=e.split("&"),n=e=>decodeURIComponent(e.replace(/\+/g," "));return r.forEach((e=>{if(e.trim()){const[r,o]=e.split(/=(.+)/g,2);r&&o&&(t[n(r)]=n(o))}})),t}static trimArrayEntries(e){return e.map((e=>e.trim()))}static removeEmptyStringsFromArray(e){return e.filter((e=>!!e))}static jsonParseHelper(e){try{return JSON.parse(e)}catch(t){return null}}static matchPattern(e,t){return new RegExp(e.replace(/\\/g,"\\\\").replace(/\*/g,"[^ ]*").replace(/\?/g,"\\?")).test(t)}}class ScopeSet{constructor(e){const t=e?StringUtils.trimArrayEntries([...e]):[],r=t?StringUtils.removeEmptyStringsFromArray(t):[];this.validateInputScopes(r),this.scopes=new Set,r.forEach((e=>this.scopes.add(e)))}static fromString(e){const t=(e||Constants.EMPTY_STRING).split(" ");return new ScopeSet(t)}static createSearchScopes(e){const t=new ScopeSet(e);return t.containsOnlyOIDCScopes()?t.removeScope(Constants.OFFLINE_ACCESS_SCOPE):t.removeOIDCScopes(),t}validateInputScopes(e){if(!e||e.length<1)throw createClientConfigurationError(emptyInputScopesError)}containsScope(e){const t=this.printScopesLowerCase().split(" "),r=new ScopeSet(t);return!!e&&r.scopes.has(e.toLowerCase())}containsScopeSet(e){return!(!e||e.scopes.size<=0)&&(this.scopes.size>=e.scopes.size&&e.asArray().every((e=>this.containsScope(e))))}containsOnlyOIDCScopes(){let e=0;return OIDC_SCOPES.forEach((t=>{this.containsScope(t)&&(e+=1)})),this.scopes.size===e}appendScope(e){e&&this.scopes.add(e.trim())}appendScopes(e){try{e.forEach((e=>this.appendScope(e)))}catch(t){throw createClientAuthError(cannotAppendScopeSet)}}removeScope(e){if(!e)throw createClientAuthError(cannotRemoveEmptyScope);this.scopes.delete(e.trim())}removeOIDCScopes(){OIDC_SCOPES.forEach((e=>{this.scopes.delete(e)}))}unionScopeSets(e){if(!e)throw createClientAuthError(emptyInputScopeSet);const t=new Set;return e.scopes.forEach((e=>t.add(e.toLowerCase()))),this.scopes.forEach((e=>t.add(e.toLowerCase()))),t}intersectingScopeSets(e){if(!e)throw createClientAuthError(emptyInputScopeSet);e.containsOnlyOIDCScopes()||e.removeOIDCScopes();const t=this.unionScopeSets(e),r=e.getScopeCount(),n=this.getScopeCount();return t.size<n+r}getScopeCount(){return this.scopes.size}asArray(){const e=[];return this.scopes.forEach((t=>e.push(t))),e}printScopes(){if(this.scopes){return this.asArray().join(" ")}return Constants.EMPTY_STRING}printScopesLowerCase(){return this.printScopes().toLowerCase()}}function buildClientInfo(e,t){if(!e)throw createClientAuthError(clientInfoEmptyError);try{const r=t(e);return JSON.parse(r)}catch(r){throw createClientAuthError(clientInfoDecodingError)}}function buildClientInfoFromHomeAccountId(e){if(!e)throw createClientAuthError(clientInfoDecodingError);const t=e.split(Separators.CLIENT_INFO_SEPARATOR,2);return{uid:t[0],utid:t.length<2?Constants.EMPTY_STRING:t[1]}}function tenantIdMatchesHomeTenant(e,t){return!!e&&!!t&&e===t.split(".")[1]}function buildTenantProfile(e,t,r,n){if(n){const{oid:t,sub:r,tid:o,name:i,tfp:a,acr:s}=n,c=o||a||s||"";return{tenantId:c,localAccountId:t||r||"",name:i,isHomeTenant:tenantIdMatchesHomeTenant(c,e)}}return{tenantId:r,localAccountId:t,isHomeTenant:tenantIdMatchesHomeTenant(r,e)}}function updateAccountTenantProfileData(e,t,r,n){let o=e;if(t){const{isHomeTenant:r,...n}=t;o={...e,...n}}if(r){const{isHomeTenant:t,...i}=buildTenantProfile(e.homeAccountId,e.localAccountId,e.tenantId,r);return o={...o,...i,idTokenClaims:r,idToken:n},o}return o}const AuthorityType={Default:0,Adfs:1,Dsts:2,Ciam:3};function getTenantIdFromIdTokenClaims(e){if(e){return e.tid||e.tfp||e.acr||null}return null}const ProtocolMode={AAD:"AAD",OIDC:"OIDC"};class AccountEntity{generateAccountId(){return[this.homeAccountId,this.environment].join(Separators.CACHE_KEY_SEPARATOR).toLowerCase()}generateAccountKey(){return AccountEntity.generateAccountCacheKey({homeAccountId:this.homeAccountId,environment:this.environment,tenantId:this.realm,username:this.username,localAccountId:this.localAccountId})}getAccountInfo(){return{homeAccountId:this.homeAccountId,environment:this.environment,tenantId:this.realm,username:this.username,localAccountId:this.localAccountId,name:this.name,nativeAccountId:this.nativeAccountId,authorityType:this.authorityType,tenantProfiles:new Map((this.tenantProfiles||[]).map((e=>[e.tenantId,e])))}}isSingleTenant(){return!this.tenantProfiles}static generateAccountCacheKey(e){const t=e.homeAccountId.split(".")[1];return[e.homeAccountId,e.environment||"",t||e.tenantId||""].join(Separators.CACHE_KEY_SEPARATOR).toLowerCase()}static createAccount(e,t,r){const n=new AccountEntity;let o;t.authorityType===AuthorityType.Adfs?n.authorityType=CacheAccountType.ADFS_ACCOUNT_TYPE:t.protocolMode===ProtocolMode.AAD?n.authorityType=CacheAccountType.MSSTS_ACCOUNT_TYPE:n.authorityType=CacheAccountType.GENERIC_ACCOUNT_TYPE,e.clientInfo&&r&&(o=buildClientInfo(e.clientInfo,r)),n.clientInfo=e.clientInfo,n.homeAccountId=e.homeAccountId,n.nativeAccountId=e.nativeAccountId;const i=e.environment||t&&t.getPreferredCache();if(!i)throw createClientAuthError(invalidCacheEnvironment);n.environment=i,n.realm=o?.utid||getTenantIdFromIdTokenClaims(e.idTokenClaims)||"",n.localAccountId=o?.uid||e.idTokenClaims?.oid||e.idTokenClaims?.sub||"";const a=e.idTokenClaims?.preferred_username||e.idTokenClaims?.upn,s=e.idTokenClaims?.emails?e.idTokenClaims.emails[0]:null;if(n.username=a||s||"",n.name=e.idTokenClaims?.name||"",n.cloudGraphHostName=e.cloudGraphHostName,n.msGraphHost=e.msGraphHost,e.tenantProfiles)n.tenantProfiles=e.tenantProfiles;else{const t=buildTenantProfile(e.homeAccountId,n.localAccountId,n.realm,e.idTokenClaims);n.tenantProfiles=[t]}return n}static createFromAccountInfo(e,t,r){const n=new AccountEntity;return n.authorityType=e.authorityType||CacheAccountType.GENERIC_ACCOUNT_TYPE,n.homeAccountId=e.homeAccountId,n.localAccountId=e.localAccountId,n.nativeAccountId=e.nativeAccountId,n.realm=e.tenantId,n.environment=e.environment,n.username=e.username,n.name=e.name,n.cloudGraphHostName=t,n.msGraphHost=r,n.tenantProfiles=Array.from(e.tenantProfiles?.values()||[]),n}static generateHomeAccountId(e,t,r,n,o){if(t!==AuthorityType.Adfs&&t!==AuthorityType.Dsts){if(e)try{const t=buildClientInfo(e,n.base64Decode);if(t.uid&&t.utid)return`${t.uid}.${t.utid}`}catch(i){}r.warning("No client info in response")}return o?.sub||""}static isAccountEntity(e){return!!e&&(e.hasOwnProperty("homeAccountId")&&e.hasOwnProperty("environment")&&e.hasOwnProperty("realm")&&e.hasOwnProperty("localAccountId")&&e.hasOwnProperty("username")&&e.hasOwnProperty("authorityType"))}static accountInfoIsEqual(e,t,r){if(!e||!t)return!1;let n=!0;if(r){const r=e.idTokenClaims||{},o=t.idTokenClaims||{};n=r.iat===o.iat&&r.nonce===o.nonce}return e.homeAccountId===t.homeAccountId&&e.localAccountId===t.localAccountId&&e.username===t.username&&e.tenantId===t.tenantId&&e.environment===t.environment&&e.nativeAccountId===t.nativeAccountId&&n}}function stripLeadingHashOrQuery(e){return e.startsWith("#/")?e.substring(2):e.startsWith("#")||e.startsWith("?")?e.substring(1):e}function getDeserializedResponse(e){if(!e||e.indexOf("=")<0)return null;try{const t=stripLeadingHashOrQuery(e),r=Object.fromEntries(new URLSearchParams(t));if(r.code||r.error||r.error_description||r.state)return r}catch(t){throw createClientAuthError(hashNotDeserialized)}return null}class UrlString{get urlString(){return this._urlString}constructor(e){if(this._urlString=e,!this._urlString)throw createClientConfigurationError(urlEmptyError);e.includes("#")||(this._urlString=UrlString.canonicalizeUri(e))}static canonicalizeUri(e){if(e){let t=e.toLowerCase();return StringUtils.endsWith(t,"?")?t=t.slice(0,-1):StringUtils.endsWith(t,"?/")&&(t=t.slice(0,-2)),StringUtils.endsWith(t,"/")||(t+="/"),t}return e}validateAsUri(){let e;try{e=this.getUrlComponents()}catch(t){throw createClientConfigurationError(urlParseError)}if(!e.HostNameAndPort||!e.PathSegments)throw createClientConfigurationError(urlParseError);if(!e.Protocol||"https:"!==e.Protocol.toLowerCase())throw createClientConfigurationError(authorityUriInsecure)}static appendQueryString(e,t){return t?e.indexOf("?")<0?`${e}?${t}`:`${e}&${t}`:e}static removeHashFromUrl(e){return UrlString.canonicalizeUri(e.split("#")[0])}replaceTenantPath(e){const t=this.getUrlComponents(),r=t.PathSegments;return!e||0===r.length||r[0]!==AADAuthorityConstants.COMMON&&r[0]!==AADAuthorityConstants.ORGANIZATIONS||(r[0]=e),UrlString.constructAuthorityUriFromObject(t)}getUrlComponents(){const e=RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?"),t=this.urlString.match(e);if(!t)throw createClientConfigurationError(urlParseError);const r={Protocol:t[1],HostNameAndPort:t[4],AbsolutePath:t[5],QueryString:t[7]};let n=r.AbsolutePath.split("/");return n=n.filter((e=>e&&e.length>0)),r.PathSegments=n,r.QueryString&&r.QueryString.endsWith("/")&&(r.QueryString=r.QueryString.substring(0,r.QueryString.length-1)),r}static getDomainFromUrl(e){const t=RegExp("^([^:/?#]+://)?([^/?#]*)"),r=e.match(t);if(!r)throw createClientConfigurationError(urlParseError);return r[2]}static getAbsoluteUrl(e,t){if(e[0]===Constants.FORWARD_SLASH){const r=new UrlString(t).getUrlComponents();return r.Protocol+"//"+r.HostNameAndPort+e}return e}static constructAuthorityUriFromObject(e){return new UrlString(e.Protocol+"//"+e.HostNameAndPort+"/"+e.PathSegments.join("/"))}static hashContainsKnownProperties(e){return!!getDeserializedResponse(e)}}const rawMetdataJSON={endpointMetadata:{"login.microsoftonline.com":{token_endpoint:"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token",jwks_uri:"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys",issuer:"https://login.microsoftonline.com/{tenantid}/v2.0",authorization_endpoint:"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize",end_session_endpoint:"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout"},"login.chinacloudapi.cn":{token_endpoint:"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token",jwks_uri:"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys",issuer:"https://login.partner.microsoftonline.cn/{tenantid}/v2.0",authorization_endpoint:"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize",end_session_endpoint:"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout"},"login.microsoftonline.us":{token_endpoint:"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token",jwks_uri:"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys",issuer:"https://login.microsoftonline.us/{tenantid}/v2.0",authorization_endpoint:"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize",end_session_endpoint:"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout"}},instanceDiscoveryMetadata:{tenant_discovery_endpoint:"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration",metadata:[{preferred_network:"login.microsoftonline.com",preferred_cache:"login.windows.net",aliases:["login.microsoftonline.com","login.windows.net","login.microsoft.com","sts.windows.net"]},{preferred_network:"login.partner.microsoftonline.cn",preferred_cache:"login.partner.microsoftonline.cn",aliases:["login.partner.microsoftonline.cn","login.chinacloudapi.cn"]},{preferred_network:"login.microsoftonline.de",preferred_cache:"login.microsoftonline.de",aliases:["login.microsoftonline.de"]},{preferred_network:"login.microsoftonline.us",preferred_cache:"login.microsoftonline.us",aliases:["login.microsoftonline.us","login.usgovcloudapi.net"]},{preferred_network:"login-us.microsoftonline.com",preferred_cache:"login-us.microsoftonline.com",aliases:["login-us.microsoftonline.com"]}]}},EndpointMetadata=rawMetdataJSON.endpointMetadata,InstanceDiscoveryMetadata=rawMetdataJSON.instanceDiscoveryMetadata,InstanceDiscoveryMetadataAliases=new Set;function getAliasesFromStaticSources(e,t){let r;const n=e.canonicalAuthority;if(n){const o=new UrlString(n).getUrlComponents().HostNameAndPort;r=getAliasesFromMetadata(o,e.cloudDiscoveryMetadata?.metadata,AuthorityMetadataSource.CONFIG,t)||getAliasesFromMetadata(o,InstanceDiscoveryMetadata.metadata,AuthorityMetadataSource.HARDCODED_VALUES,t)||e.knownAuthorities}return r||[]}function getAliasesFromMetadata(e,t,r,n){if(n?.trace(`getAliasesFromMetadata called with source: ${r}`),e&&t){const o=getCloudDiscoveryMetadataFromNetworkResponse(t,e);if(o)return n?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${r}, returning aliases`),o.aliases;n?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${r}`)}return null}function getCloudDiscoveryMetadataFromHardcodedValues(e){return getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata,e)}function getCloudDiscoveryMetadataFromNetworkResponse(e,t){for(let r=0;r<e.length;r++){const n=e[r];if(n.aliases.includes(t))return n}return null}InstanceDiscoveryMetadata.metadata.forEach((e=>{e.aliases.forEach((e=>{InstanceDiscoveryMetadataAliases.add(e)}))}));const cacheQuotaExceededErrorCode="cache_quota_exceeded",cacheUnknownErrorCode="cache_error_unknown",CacheErrorMessages={[cacheQuotaExceededErrorCode]:"Exceeded cache storage capacity.",[cacheUnknownErrorCode]:"Unexpected error occurred when using cache storage."};class CacheError extends Error{constructor(e,t){const r=t||(CacheErrorMessages[e]?CacheErrorMessages[e]:CacheErrorMessages.cache_error_unknown);super(`${e}: ${r}`),Object.setPrototypeOf(this,CacheError.prototype),this.name="CacheError",this.errorCode=e,this.errorMessage=r}}class CacheManager{constructor(e,t,r,n){this.clientId=e,this.cryptoImpl=t,this.commonLogger=r.clone(name$1,"14.15.0"),this.staticAuthorityOptions=n}getAllAccounts(e){return this.buildTenantProfiles(this.getAccountsFilteredBy(e||{}),e)}getAccountInfoFilteredBy(e){const t=this.getAllAccounts(e);if(t.length>1){return t.sort((e=>e.idTokenClaims?-1:1))[0]}return 1===t.length?t[0]:null}getBaseAccountInfo(e){const t=this.getAccountsFilteredBy(e);return t.length>0?t[0].getAccountInfo():null}buildTenantProfiles(e,t){return e.flatMap((e=>this.getTenantProfilesFromAccountEntity(e,t?.tenantId,t)))}getTenantedAccountInfoByFilter(e,t,r,n){let o,i=null;if(n&&!this.tenantProfileMatchesFilter(r,n))return null;const a=this.getIdToken(e,t,r.tenantId);return a&&(o=extractTokenClaims(a.secret,this.cryptoImpl.base64Decode),!this.idTokenClaimsMatchTenantProfileFilter(o,n))?null:(i=updateAccountTenantProfileData(e,r,o,a?.secret),i)}getTenantProfilesFromAccountEntity(e,t,r){const n=e.getAccountInfo();let o=n.tenantProfiles||new Map;const i=this.getTokenKeys();if(t){const e=o.get(t);if(!e)return[];o=new Map([[t,e]])}const a=[];return o.forEach((e=>{const t=this.getTenantedAccountInfoByFilter(n,i,e,r);t&&a.push(t)})),a}tenantProfileMatchesFilter(e,t){return!(t.localAccountId&&!this.matchLocalAccountIdFromTenantProfile(e,t.localAccountId))&&((!t.name||e.name===t.name)&&(void 0===t.isHomeTenant||e.isHomeTenant===t.isHomeTenant))}idTokenClaimsMatchTenantProfileFilter(e,t){if(t){if(t.localAccountId&&!this.matchLocalAccountIdFromTokenClaims(e,t.localAccountId))return!1;if(t.loginHint&&!this.matchLoginHintFromTokenClaims(e,t.loginHint))return!1;if(t.username&&!this.matchUsername(e.preferred_username,t.username))return!1;if(t.name&&!this.matchName(e,t.name))return!1;if(t.sid&&!this.matchSid(e,t.sid))return!1}return!0}async saveCacheRecord(e,t,r){if(!e)throw createClientAuthError(invalidCacheRecord);try{e.account&&this.setAccount(e.account),e.idToken&&!1!==t?.idToken&&this.setIdTokenCredential(e.idToken),e.accessToken&&!1!==t?.accessToken&&await this.saveAccessToken(e.accessToken),e.refreshToken&&!1!==t?.refreshToken&&this.setRefreshTokenCredential(e.refreshToken),e.appMetadata&&this.setAppMetadata(e.appMetadata)}catch(n){throw this.commonLogger?.error("CacheManager.saveCacheRecord: failed"),n instanceof Error?(this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${n.message}`,r),"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name||n.message.includes("exceeded the quota")?(this.commonLogger?.error("CacheManager.saveCacheRecord: exceeded storage quota",r),new CacheError("cache_quota_exceeded")):new CacheError(n.name,n.message)):(this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${n}`,r),new CacheError("cache_error_unknown"))}}async saveAccessToken(e){const t={clientId:e.clientId,credentialType:e.credentialType,environment:e.environment,homeAccountId:e.homeAccountId,realm:e.realm,tokenType:e.tokenType,requestedClaimsHash:e.requestedClaimsHash},r=this.getTokenKeys(),n=ScopeSet.fromString(e.target),o=[];r.accessToken.forEach((e=>{if(!this.accessTokenKeyMatchesFilter(e,t,!1))return;const r=this.getAccessTokenCredential(e);if(r&&this.credentialMatchesFilter(r,t)){ScopeSet.fromString(r.target).intersectingScopeSets(n)&&o.push(this.removeAccessToken(e))}})),await Promise.all(o),this.setAccessTokenCredential(e)}getAccountsFilteredBy(e){const t=this.getAccountKeys(),r=[];return t.forEach((t=>{if(!this.isAccountKey(t,e.homeAccountId))return;const n=this.getAccount(t,this.commonLogger);if(!n)return;if(e.homeAccountId&&!this.matchHomeAccountId(n,e.homeAccountId))return;if(e.username&&!this.matchUsername(n.username,e.username))return;if(e.environment&&!this.matchEnvironment(n,e.environment))return;if(e.realm&&!this.matchRealm(n,e.realm))return;if(e.nativeAccountId&&!this.matchNativeAccountId(n,e.nativeAccountId))return;if(e.authorityType&&!this.matchAuthorityType(n,e.authorityType))return;const o={localAccountId:e?.localAccountId,name:e?.name},i=n.tenantProfiles?.filter((e=>this.tenantProfileMatchesFilter(e,o)));i&&0===i.length||r.push(n)})),r}isAccountKey(e,t,r){return!(e.split(Separators.CACHE_KEY_SEPARATOR).length<3)&&(!(t&&!e.toLowerCase().includes(t.toLowerCase()))&&!(r&&!e.toLowerCase().includes(r.toLowerCase())))}isCredentialKey(e){if(e.split(Separators.CACHE_KEY_SEPARATOR).length<6)return!1;const t=e.toLowerCase();if(-1===t.indexOf(CredentialType.ID_TOKEN.toLowerCase())&&-1===t.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase())&&-1===t.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())&&-1===t.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()))return!1;if(t.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase())>-1){const e=`${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${this.clientId}${Separators.CACHE_KEY_SEPARATOR}`,r=`${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}1${Separators.CACHE_KEY_SEPARATOR}`;if(-1===t.indexOf(e.toLowerCase())&&-1===t.indexOf(r.toLowerCase()))return!1}else if(-1===t.indexOf(this.clientId.toLowerCase()))return!1;return!0}credentialMatchesFilter(e,t){if(t.clientId&&!this.matchClientId(e,t.clientId))return!1;if(t.userAssertionHash&&!this.matchUserAssertionHash(e,t.userAssertionHash))return!1;if("string"===typeof t.homeAccountId&&!this.matchHomeAccountId(e,t.homeAccountId))return!1;if(t.environment&&!this.matchEnvironment(e,t.environment))return!1;if(t.realm&&!this.matchRealm(e,t.realm))return!1;if(t.credentialType&&!this.matchCredentialType(e,t.credentialType))return!1;if(t.familyId&&!this.matchFamilyId(e,t.familyId))return!1;if(t.target&&!this.matchTarget(e,t.target))return!1;if((t.requestedClaimsHash||e.requestedClaimsHash)&&e.requestedClaimsHash!==t.requestedClaimsHash)return!1;if(e.credentialType===CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME){if(t.tokenType&&!this.matchTokenType(e,t.tokenType))return!1;if(t.tokenType===AuthenticationScheme.SSH&&t.keyId&&!this.matchKeyId(e,t.keyId))return!1}return!0}getAppMetadataFilteredBy(e){const t=this.getKeys(),r={};return t.forEach((t=>{if(!this.isAppMetadata(t))return;const n=this.getAppMetadata(t);n&&(e.environment&&!this.matchEnvironment(n,e.environment)||e.clientId&&!this.matchClientId(n,e.clientId)||(r[t]=n))})),r}getAuthorityMetadataByAlias(e){const t=this.getAuthorityMetadataKeys();let r=null;return t.forEach((t=>{if(!this.isAuthorityMetadata(t)||-1===t.indexOf(this.clientId))return;const n=this.getAuthorityMetadata(t);n&&-1!==n.aliases.indexOf(e)&&(r=n)})),r}async removeAllAccounts(){const e=this.getAccountKeys(),t=[];e.forEach((e=>{t.push(this.removeAccount(e))})),await Promise.all(t)}async removeAccount(e){const t=this.getAccount(e,this.commonLogger);t&&(await this.removeAccountContext(t),this.removeItem(e))}async removeAccountContext(e){const t=this.getTokenKeys(),r=e.generateAccountId(),n=[];t.idToken.forEach((e=>{0===e.indexOf(r)&&this.removeIdToken(e)})),t.accessToken.forEach((e=>{0===e.indexOf(r)&&n.push(this.removeAccessToken(e))})),t.refreshToken.forEach((e=>{0===e.indexOf(r)&&this.removeRefreshToken(e)})),await Promise.all(n)}updateOutdatedCachedAccount(e,t,r){if(t&&t.isSingleTenant()){this.commonLogger?.verbose("updateOutdatedCachedAccount: Found a single-tenant (outdated) account entity in the cache, migrating to multi-tenant account entity");const n=this.getAccountKeys().filter((e=>e.startsWith(t.homeAccountId))),o=[];n.forEach((e=>{const t=this.getCachedAccountEntity(e);t&&o.push(t)}));const i=o.find((e=>tenantIdMatchesHomeTenant(e.realm,e.homeAccountId)))||o[0];i.tenantProfiles=o.map((e=>({tenantId:e.realm,localAccountId:e.localAccountId,name:e.name,isHomeTenant:tenantIdMatchesHomeTenant(e.realm,e.homeAccountId)})));const a=CacheManager.toObject(new AccountEntity,{...i}),s=a.generateAccountKey();return n.forEach((t=>{t!==s&&this.removeOutdatedAccount(e)})),this.setAccount(a),r?.verbose("Updated an outdated account entity in the cache"),a}return t}async removeAccessToken(e){const t=this.getAccessTokenCredential(e);if(t){if(t.credentialType.toLowerCase()===CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()&&t.tokenType===AuthenticationScheme.POP){const e=t.keyId;if(e)try{await this.cryptoImpl.removeTokenBindingKey(e)}catch(r){throw createClientAuthError(bindingKeyNotRemoved)}}return this.removeItem(e)}}removeAppMetadata(){return this.getKeys().forEach((e=>{this.isAppMetadata(e)&&this.removeItem(e)})),!0}readAccountFromCache(e){const t=AccountEntity.generateAccountCacheKey(e);return this.getAccount(t,this.commonLogger)}getIdToken(e,t,r,n,o){this.commonLogger.trace("CacheManager - getIdToken called");const i={homeAccountId:e.homeAccountId,environment:e.environment,credentialType:CredentialType.ID_TOKEN,clientId:this.clientId,realm:r},a=this.getIdTokensByFilter(i,t),s=a.size;if(s<1)return this.commonLogger.info("CacheManager:getIdToken - No token found"),null;if(s>1){let t=a;if(!r){const r=new Map;a.forEach(((t,n)=>{t.realm===e.tenantId&&r.set(n,t)}));const n=r.size;if(n<1)return this.commonLogger.info("CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result"),a.values().next().value;if(1===n)return this.commonLogger.info("CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile"),r.values().next().value;t=r}return this.commonLogger.info("CacheManager:getIdToken - Multiple matching ID tokens found, clearing them"),t.forEach(((e,t)=>{this.removeIdToken(t)})),n&&o&&n.addFields({multiMatchedID:a.size},o),null}return this.commonLogger.info("CacheManager:getIdToken - Returning ID token"),a.values().next().value}getIdTokensByFilter(e,t){const r=t&&t.idToken||this.getTokenKeys().idToken,n=new Map;return r.forEach((t=>{if(!this.idTokenKeyMatchesFilter(t,{clientId:this.clientId,...e}))return;const r=this.getIdTokenCredential(t);r&&this.credentialMatchesFilter(r,e)&&n.set(t,r)})),n}idTokenKeyMatchesFilter(e,t){const r=e.toLowerCase();return(!t.clientId||-1!==r.indexOf(t.clientId.toLowerCase()))&&(!t.homeAccountId||-1!==r.indexOf(t.homeAccountId.toLowerCase()))}removeIdToken(e){this.removeItem(e)}removeRefreshToken(e){this.removeItem(e)}getAccessToken(e,t,r,n,o,i){this.commonLogger.trace("CacheManager - getAccessToken called");const a=ScopeSet.createSearchScopes(t.scopes),s=t.authenticationScheme||AuthenticationScheme.BEARER,c=s&&s.toLowerCase()!==AuthenticationScheme.BEARER.toLowerCase()?CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:CredentialType.ACCESS_TOKEN,l={homeAccountId:e.homeAccountId,environment:e.environment,credentialType:c,clientId:this.clientId,realm:n||e.tenantId,target:a,tokenType:s,keyId:t.sshKid,requestedClaimsHash:t.requestedClaimsHash},d=r&&r.accessToken||this.getTokenKeys().accessToken,u=[];d.forEach((e=>{if(this.accessTokenKeyMatchesFilter(e,l,!0)){const t=this.getAccessTokenCredential(e);t&&this.credentialMatchesFilter(t,l)&&u.push(t)}}));const h=u.length;return h<1?(this.commonLogger.info("CacheManager:getAccessToken - No token found"),null):h>1?(this.commonLogger.info("CacheManager:getAccessToken - Multiple access tokens found, clearing them"),u.forEach((e=>{this.removeAccessToken(generateCredentialKey(e))})),o&&i&&o.addFields({multiMatchedAT:u.length},i),null):(this.commonLogger.info("CacheManager:getAccessToken - Returning access token"),u[0])}accessTokenKeyMatchesFilter(e,t,r){const n=e.toLowerCase();if(t.clientId&&-1===n.indexOf(t.clientId.toLowerCase()))return!1;if(t.homeAccountId&&-1===n.indexOf(t.homeAccountId.toLowerCase()))return!1;if(t.realm&&-1===n.indexOf(t.realm.toLowerCase()))return!1;if(t.requestedClaimsHash&&-1===n.indexOf(t.requestedClaimsHash.toLowerCase()))return!1;if(t.target){const e=t.target.asArray();for(let t=0;t<e.length;t++){if(r&&!n.includes(e[t].toLowerCase()))return!1;if(!r&&n.includes(e[t].toLowerCase()))return!0}}return!0}getAccessTokensByFilter(e){const t=this.getTokenKeys(),r=[];return t.accessToken.forEach((t=>{if(!this.accessTokenKeyMatchesFilter(t,e,!0))return;const n=this.getAccessTokenCredential(t);n&&this.credentialMatchesFilter(n,e)&&r.push(n)})),r}getRefreshToken(e,t,r,n,o){this.commonLogger.trace("CacheManager - getRefreshToken called");const i=t?"1":void 0,a={homeAccountId:e.homeAccountId,environment:e.environment,credentialType:CredentialType.REFRESH_TOKEN,clientId:this.clientId,familyId:i},s=r&&r.refreshToken||this.getTokenKeys().refreshToken,c=[];s.forEach((e=>{if(this.refreshTokenKeyMatchesFilter(e,a)){const t=this.getRefreshTokenCredential(e);t&&this.credentialMatchesFilter(t,a)&&c.push(t)}}));const l=c.length;return l<1?(this.commonLogger.info("CacheManager:getRefreshToken - No refresh token found."),null):(l>1&&n&&o&&n.addFields({multiMatchedRT:l},o),this.commonLogger.info("CacheManager:getRefreshToken - returning refresh token"),c[0])}refreshTokenKeyMatchesFilter(e,t){const r=e.toLowerCase();return(!t.familyId||-1!==r.indexOf(t.familyId.toLowerCase()))&&(!(!t.familyId&&t.clientId&&-1===r.indexOf(t.clientId.toLowerCase()))&&(!t.homeAccountId||-1!==r.indexOf(t.homeAccountId.toLowerCase())))}readAppMetadataFromCache(e){const t={environment:e,clientId:this.clientId},r=this.getAppMetadataFilteredBy(t),n=Object.keys(r).map((e=>r[e])),o=n.length;if(o<1)return null;if(o>1)throw createClientAuthError(multipleMatchingAppMetadata);return n[0]}isAppMetadataFOCI(e){const t=this.readAppMetadataFromCache(e);return!(!t||"1"!==t.familyId)}matchHomeAccountId(e,t){return!("string"!==typeof e.homeAccountId||t!==e.homeAccountId)}matchLocalAccountIdFromTokenClaims(e,t){return t===(e.oid||e.sub)}matchLocalAccountIdFromTenantProfile(e,t){return e.localAccountId===t}matchName(e,t){return!(t.toLowerCase()!==e.name?.toLowerCase())}matchUsername(e,t){return!(!e||"string"!==typeof e||t?.toLowerCase()!==e.toLowerCase())}matchUserAssertionHash(e,t){return!(!e.userAssertionHash||t!==e.userAssertionHash)}matchEnvironment(e,t){if(this.staticAuthorityOptions){const r=getAliasesFromStaticSources(this.staticAuthorityOptions,this.commonLogger);if(r.includes(t)&&r.includes(e.environment))return!0}const r=this.getAuthorityMetadataByAlias(t);return!!(r&&r.aliases.indexOf(e.environment)>-1)}matchCredentialType(e,t){return e.credentialType&&t.toLowerCase()===e.credentialType.toLowerCase()}matchClientId(e,t){return!(!e.clientId||t!==e.clientId)}matchFamilyId(e,t){return!(!e.familyId||t!==e.familyId)}matchRealm(e,t){return!(e.realm?.toLowerCase()!==t.toLowerCase())}matchNativeAccountId(e,t){return!(!e.nativeAccountId||t!==e.nativeAccountId)}matchLoginHintFromTokenClaims(e,t){return e.login_hint===t||(e.preferred_username===t||e.upn===t)}matchSid(e,t){return e.sid===t}matchAuthorityType(e,t){return!(!e.authorityType||t.toLowerCase()!==e.authorityType.toLowerCase())}matchTarget(e,t){if(e.credentialType!==CredentialType.ACCESS_TOKEN&&e.credentialType!==CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME||!e.target)return!1;return ScopeSet.fromString(e.target).containsScopeSet(t)}matchTokenType(e,t){return!(!e.tokenType||e.tokenType!==t)}matchKeyId(e,t){return!(!e.keyId||e.keyId!==t)}isAppMetadata(e){return-1!==e.indexOf(APP_METADATA)}isAuthorityMetadata(e){return-1!==e.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY)}generateAuthorityMetadataCacheKey(e){return`${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${e}`}static toObject(e,t){for(const r in t)e[r]=t[r];return e}}class DefaultStorageClass extends CacheManager{setAccount(){throw createClientAuthError(methodNotImplemented)}getAccount(){throw createClientAuthError(methodNotImplemented)}getCachedAccountEntity(){throw createClientAuthError(methodNotImplemented)}setIdTokenCredential(){throw createClientAuthError(methodNotImplemented)}getIdTokenCredential(){throw createClientAuthError(methodNotImplemented)}setAccessTokenCredential(){throw createClientAuthError(methodNotImplemented)}getAccessTokenCredential(){throw createClientAuthError(methodNotImplemented)}setRefreshTokenCredential(){throw createClientAuthError(methodNotImplemented)}getRefreshTokenCredential(){throw createClientAuthError(methodNotImplemented)}setAppMetadata(){throw createClientAuthError(methodNotImplemented)}getAppMetadata(){throw createClientAuthError(methodNotImplemented)}setServerTelemetry(){throw createClientAuthError(methodNotImplemented)}getServerTelemetry(){throw createClientAuthError(methodNotImplemented)}setAuthorityMetadata(){throw createClientAuthError(methodNotImplemented)}getAuthorityMetadata(){throw createClientAuthError(methodNotImplemented)}getAuthorityMetadataKeys(){throw createClientAuthError(methodNotImplemented)}setThrottlingCache(){throw createClientAuthError(methodNotImplemented)}getThrottlingCache(){throw createClientAuthError(methodNotImplemented)}removeItem(){throw createClientAuthError(methodNotImplemented)}getKeys(){throw createClientAuthError(methodNotImplemented)}getAccountKeys(){throw createClientAuthError(methodNotImplemented)}getTokenKeys(){throw createClientAuthError(methodNotImplemented)}async clear(){throw createClientAuthError(methodNotImplemented)}updateCredentialCacheKey(){throw createClientAuthError(methodNotImplemented)}removeOutdatedAccount(){throw createClientAuthError(methodNotImplemented)}}const DEFAULT_SYSTEM_OPTIONS={tokenRenewalOffsetSeconds:300,preventCorsPreflight:!1},DEFAULT_LOGGER_IMPLEMENTATION={loggerCallback:()=>{},piiLoggingEnabled:!1,logLevel:exports.LogLevel.Info,correlationId:Constants.EMPTY_STRING},DEFAULT_CACHE_OPTIONS={claimsBasedCachingEnabled:!1},DEFAULT_NETWORK_IMPLEMENTATION={async sendGetRequestAsync(){throw createClientAuthError(methodNotImplemented)},async sendPostRequestAsync(){throw createClientAuthError(methodNotImplemented)}},DEFAULT_LIBRARY_INFO={sku:Constants.SKU,version:"14.15.0",cpu:Constants.EMPTY_STRING,os:Constants.EMPTY_STRING},DEFAULT_CLIENT_CREDENTIALS={clientSecret:Constants.EMPTY_STRING,clientAssertion:void 0},DEFAULT_AZURE_CLOUD_OPTIONS={azureCloudInstance:AzureCloudInstance.None,tenant:`${Constants.DEFAULT_COMMON_TENANT}`},DEFAULT_TELEMETRY_OPTIONS={application:{appName:"",appVersion:""}};function buildClientConfiguration({authOptions:e,systemOptions:t,loggerOptions:r,cacheOptions:n,storageInterface:o,networkInterface:i,cryptoInterface:a,clientCredentials:s,libraryInfo:c,telemetry:l,serverTelemetryManager:d,persistencePlugin:u,serializableCache:h}){const g={...DEFAULT_LOGGER_IMPLEMENTATION,...r};return{authOptions:buildAuthOptions(e),systemOptions:{...DEFAULT_SYSTEM_OPTIONS,...t},loggerOptions:g,cacheOptions:{...DEFAULT_CACHE_OPTIONS,...n},storageInterface:o||new DefaultStorageClass(e.clientId,DEFAULT_CRYPTO_IMPLEMENTATION,new Logger(g)),networkInterface:i||DEFAULT_NETWORK_IMPLEMENTATION,cryptoInterface:a||DEFAULT_CRYPTO_IMPLEMENTATION,clientCredentials:s||DEFAULT_CLIENT_CREDENTIALS,libraryInfo:{...DEFAULT_LIBRARY_INFO,...c},telemetry:{...DEFAULT_TELEMETRY_OPTIONS,...l},serverTelemetryManager:d||null,persistencePlugin:u||null,serializableCache:h||null}}function buildAuthOptions(e){return{clientCapabilities:[],azureCloudOptions:DEFAULT_AZURE_CLOUD_OPTIONS,skipAuthorityMetadataCache:!1,instanceAware:!1,...e}}function isOidcProtocolMode(e){return e.authOptions.authority.options.protocolMode===ProtocolMode.OIDC}class ServerError extends AuthError{constructor(e,t,r,n,o){super(e,t,r),this.name="ServerError",this.errorNo=n,this.status=o,Object.setPrototypeOf(this,ServerError.prototype)}}class ThrottlingUtils{static generateThrottlingStorageKey(e){return`${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(e)}`}static preProcess(e,t){const r=ThrottlingUtils.generateThrottlingStorageKey(t),n=e.getThrottlingCache(r);if(n){if(n.throttleTime<Date.now())return void e.removeItem(r);throw new ServerError(n.errorCodes?.join(" ")||Constants.EMPTY_STRING,n.errorMessage,n.subError)}}static postProcess(e,t,r){if(ThrottlingUtils.checkResponseStatus(r)||ThrottlingUtils.checkResponseForRetryAfter(r)){const n={throttleTime:ThrottlingUtils.calculateThrottleTime(parseInt(r.headers[HeaderNames.RETRY_AFTER])),error:r.body.error,errorCodes:r.body.error_codes,errorMessage:r.body.error_description,subError:r.body.suberror};e.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(t),n)}}static checkResponseStatus(e){return 429===e.status||e.status>=500&&e.status<600}static checkResponseForRetryAfter(e){return!!e.headers&&(e.headers.hasOwnProperty(HeaderNames.RETRY_AFTER)&&(e.status<200||e.status>=300))}static calculateThrottleTime(e){const t=e<=0?0:e,r=Date.now()/1e3;return Math.floor(1e3*Math.min(r+(t||ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),r+ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS))}static removeThrottle(e,t,r,n){const o={clientId:t,authority:r.authority,scopes:r.scopes,homeAccountIdentifier:n,claims:r.claims,authenticationScheme:r.authenticationScheme,resourceRequestMethod:r.resourceRequestMethod,resourceRequestUri:r.resourceRequestUri,shrClaims:r.shrClaims,sshKid:r.sshKid},i=this.generateThrottlingStorageKey(o);e.removeItem(i)}}class NetworkManager{constructor(e,t){this.networkClient=e,this.cacheManager=t}async sendPostRequest(e,t,r){let n;ThrottlingUtils.preProcess(this.cacheManager,e);try{n=await this.networkClient.sendPostRequestAsync(t,r)}catch(o){throw o instanceof AuthError?o:createClientAuthError(networkError)}return ThrottlingUtils.postProcess(this.cacheManager,e,n),n}}const CcsCredentialType={HOME_ACCOUNT_ID:"home_account_id",UPN:"UPN"},CLIENT_ID="client_id",REDIRECT_URI="redirect_uri",RESPONSE_TYPE="response_type",RESPONSE_MODE="response_mode",GRANT_TYPE="grant_type",CLAIMS="claims",SCOPE="scope",REFRESH_TOKEN="refresh_token",STATE="state",NONCE="nonce",PROMPT="prompt",CODE="code",CODE_CHALLENGE="code_challenge",CODE_CHALLENGE_METHOD="code_challenge_method",CODE_VERIFIER="code_verifier",CLIENT_REQUEST_ID="client-request-id",X_CLIENT_SKU="x-client-SKU",X_CLIENT_VER="x-client-VER",X_CLIENT_OS="x-client-OS",X_CLIENT_CPU="x-client-CPU",X_CLIENT_CURR_TELEM="x-client-current-telemetry",X_CLIENT_LAST_TELEM="x-client-last-telemetry",X_MS_LIB_CAPABILITY="x-ms-lib-capability",X_APP_NAME="x-app-name",X_APP_VER="x-app-ver",POST_LOGOUT_URI="post_logout_redirect_uri",ID_TOKEN_HINT="id_token_hint",DEVICE_CODE="device_code",CLIENT_SECRET="client_secret",CLIENT_ASSERTION="client_assertion",CLIENT_ASSERTION_TYPE="client_assertion_type",TOKEN_TYPE="token_type",REQ_CNF="req_cnf",OBO_ASSERTION="assertion",REQUESTED_TOKEN_USE="requested_token_use",RETURN_SPA_CODE="return_spa_code",NATIVE_BROKER="nativebroker",LOGOUT_HINT="logout_hint",SID="sid",LOGIN_HINT="login_hint",DOMAIN_HINT="domain_hint",X_CLIENT_EXTRA_SKU="x-client-xtra-sku";class RequestValidator{static validateRedirectUri(e){if(!e)throw createClientConfigurationError(redirectUriEmpty)}static validatePrompt(e){const t=[];for(const r in PromptValue)t.push(PromptValue[r]);if(t.indexOf(e)<0)throw createClientConfigurationError(invalidPromptValue)}static validateClaims(e){try{JSON.parse(e)}catch(t){throw createClientConfigurationError(invalidClaims)}}static validateCodeChallengeParams(e,t){if(!e||!t)throw createClientConfigurationError(pkceParamsMissing);this.validateCodeChallengeMethod(t)}static validateCodeChallengeMethod(e){if([CodeChallengeMethodValues.PLAIN,CodeChallengeMethodValues.S256].indexOf(e)<0)throw createClientConfigurationError(invalidCodeChallengeMethod)}}class RequestParameterBuilder{constructor(){this.parameters=new Map}addResponseTypeCode(){this.parameters.set(RESPONSE_TYPE,encodeURIComponent(Constants.CODE_RESPONSE_TYPE))}addResponseTypeForTokenAndIdToken(){this.parameters.set(RESPONSE_TYPE,encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`))}addResponseMode(e){this.parameters.set(RESPONSE_MODE,encodeURIComponent(e||ResponseMode.QUERY))}addNativeBroker(){this.parameters.set(NATIVE_BROKER,encodeURIComponent("1"))}addScopes(e,t=!0,r=OIDC_DEFAULT_SCOPES){!t||r.includes("openid")||e.includes("openid")||r.push("openid");const n=t?[...e||[],...r]:e||[],o=new ScopeSet(n);this.parameters.set(SCOPE,encodeURIComponent(o.printScopes()))}addClientId(e){this.parameters.set(CLIENT_ID,encodeURIComponent(e))}addRedirectUri(e){RequestValidator.validateRedirectUri(e),this.parameters.set(REDIRECT_URI,encodeURIComponent(e))}addPostLogoutRedirectUri(e){RequestValidator.validateRedirectUri(e),this.parameters.set(POST_LOGOUT_URI,encodeURIComponent(e))}addIdTokenHint(e){this.parameters.set(ID_TOKEN_HINT,encodeURIComponent(e))}addDomainHint(e){this.parameters.set(DOMAIN_HINT,encodeURIComponent(e))}addLoginHint(e){this.parameters.set(LOGIN_HINT,encodeURIComponent(e))}addCcsUpn(e){this.parameters.set(HeaderNames.CCS_HEADER,encodeURIComponent(`UPN:${e}`))}addCcsOid(e){this.parameters.set(HeaderNames.CCS_HEADER,encodeURIComponent(`Oid:${e.uid}@${e.utid}`))}addSid(e){this.parameters.set(SID,encodeURIComponent(e))}addClaims(e,t){const r=this.addClientCapabilitiesToClaims(e,t);RequestValidator.validateClaims(r),this.parameters.set(CLAIMS,encodeURIComponent(r))}addCorrelationId(e){this.parameters.set(CLIENT_REQUEST_ID,encodeURIComponent(e))}addLibraryInfo(e){this.parameters.set(X_CLIENT_SKU,e.sku),this.parameters.set(X_CLIENT_VER,e.version),e.os&&this.parameters.set(X_CLIENT_OS,e.os),e.cpu&&this.parameters.set(X_CLIENT_CPU,e.cpu)}addApplicationTelemetry(e){e?.appName&&this.parameters.set(X_APP_NAME,e.appName),e?.appVersion&&this.parameters.set(X_APP_VER,e.appVersion)}addPrompt(e){RequestValidator.validatePrompt(e),this.parameters.set(`${PROMPT}`,encodeURIComponent(e))}addState(e){e&&this.parameters.set(STATE,encodeURIComponent(e))}addNonce(e){this.parameters.set(NONCE,encodeURIComponent(e))}addCodeChallengeParams(e,t){if(RequestValidator.validateCodeChallengeParams(e,t),!e||!t)throw createClientConfigurationError(pkceParamsMissing);this.parameters.set(CODE_CHALLENGE,encodeURIComponent(e)),this.parameters.set(CODE_CHALLENGE_METHOD,encodeURIComponent(t))}addAuthorizationCode(e){this.parameters.set(CODE,encodeURIComponent(e))}addDeviceCode(e){this.parameters.set(DEVICE_CODE,encodeURIComponent(e))}addRefreshToken(e){this.parameters.set(REFRESH_TOKEN,encodeURIComponent(e))}addCodeVerifier(e){this.parameters.set(CODE_VERIFIER,encodeURIComponent(e))}addClientSecret(e){this.parameters.set(CLIENT_SECRET,encodeURIComponent(e))}addClientAssertion(e){e&&this.parameters.set(CLIENT_ASSERTION,encodeURIComponent(e))}addClientAssertionType(e){e&&this.parameters.set(CLIENT_ASSERTION_TYPE,encodeURIComponent(e))}addOboAssertion(e){this.parameters.set("assertion",encodeURIComponent(e))}addRequestTokenUse(e){this.parameters.set(REQUESTED_TOKEN_USE,encodeURIComponent(e))}addGrantType(e){this.parameters.set(GRANT_TYPE,encodeURIComponent(e))}addClientInfo(){this.parameters.set(CLIENT_INFO,"1")}addExtraQueryParameters(e){Object.entries(e).forEach((([e,t])=>{!this.parameters.has(e)&&t&&this.parameters.set(e,t)}))}addClientCapabilitiesToClaims(e,t){let r;if(e)try{r=JSON.parse(e)}catch(n){throw createClientConfigurationError(invalidClaims)}else r={};return t&&t.length>0&&(r.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)||(r[ClaimsRequestKeys.ACCESS_TOKEN]={}),r[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC]={values:t}),JSON.stringify(r)}addUsername(e){this.parameters.set(PasswordGrantConstants.username,encodeURIComponent(e))}addPassword(e){this.parameters.set(PasswordGrantConstants.password,encodeURIComponent(e))}addPopToken(e){e&&(this.parameters.set(TOKEN_TYPE,AuthenticationScheme.POP),this.parameters.set(REQ_CNF,encodeURIComponent(e)))}addSshJwk(e){e&&(this.parameters.set(TOKEN_TYPE,AuthenticationScheme.SSH),this.parameters.set(REQ_CNF,encodeURIComponent(e)))}addServerTelemetry(e){this.parameters.set(X_CLIENT_CURR_TELEM,e.generateCurrentRequestHeaderValue()),this.parameters.set(X_CLIENT_LAST_TELEM,e.generateLastRequestHeaderValue())}addThrottling(){this.parameters.set(X_MS_LIB_CAPABILITY,ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE)}addLogoutHint(e){this.parameters.set(LOGOUT_HINT,encodeURIComponent(e))}createQueryString(){const e=new Array;return this.parameters.forEach(((t,r)=>{e.push(`${r}=${t}`)})),e.join("&")}}function isOpenIdConfigResponse(e){return e.hasOwnProperty("authorization_endpoint")&&e.hasOwnProperty("token_endpoint")&&e.hasOwnProperty("issuer")&&e.hasOwnProperty("jwks_uri")}function isCloudInstanceDiscoveryResponse(e){return e.hasOwnProperty("tenant_discovery_endpoint")&&e.hasOwnProperty("metadata")}function isCloudInstanceDiscoveryErrorResponse(e){return e.hasOwnProperty("error")&&e.hasOwnProperty("error_description")}const PerformanceEvents={AcquireTokenByCode:"acquireTokenByCode",AcquireTokenByRefreshToken:"acquireTokenByRefreshToken",AcquireTokenSilent:"acquireTokenSilent",AcquireTokenSilentAsync:"acquireTokenSilentAsync",AcquireTokenPopup:"acquireTokenPopup",AcquireTokenPreRedirect:"acquireTokenPreRedirect",AcquireTokenRedirect:"acquireTokenRedirect",CryptoOptsGetPublicKeyThumbprint:"cryptoOptsGetPublicKeyThumbprint",CryptoOptsSignJwt:"cryptoOptsSignJwt",SilentCacheClientAcquireToken:"silentCacheClientAcquireToken",SilentIframeClientAcquireToken:"silentIframeClientAcquireToken",AwaitConcurrentIframe:"awaitConcurrentIframe",SilentRefreshClientAcquireToken:"silentRefreshClientAcquireToken",SsoSilent:"ssoSilent",StandardInteractionClientGetDiscoveredAuthority:"standardInteractionClientGetDiscoveredAuthority",FetchAccountIdWithNativeBroker:"fetchAccountIdWithNativeBroker",NativeInteractionClientAcquireToken:"nativeInteractionClientAcquireToken",BaseClientCreateTokenRequestHeaders:"baseClientCreateTokenRequestHeaders",RefreshTokenClientExecutePostToTokenEndpoint:"refreshTokenClientExecutePostToTokenEndpoint",AuthorizationCodeClientExecutePostToTokenEndpoint:"authorizationCodeClientExecutePostToTokenEndpoint",BrokerHandhshake:"brokerHandshake",AcquireTokenByRefreshTokenInBroker:"acquireTokenByRefreshTokenInBroker",AcquireTokenByBroker:"acquireTokenByBroker",RefreshTokenClientExecuteTokenRequest:"refreshTokenClientExecuteTokenRequest",RefreshTokenClientAcquireToken:"refreshTokenClientAcquireToken",RefreshTokenClientAcquireTokenWithCachedRefreshToken:"refreshTokenClientAcquireTokenWithCachedRefreshToken",RefreshTokenClientAcquireTokenByRefreshToken:"refreshTokenClientAcquireTokenByRefreshToken",RefreshTokenClientCreateTokenRequestBody:"refreshTokenClientCreateTokenRequestBody",AcquireTokenFromCache:"acquireTokenFromCache",SilentFlowClientAcquireCachedToken:"silentFlowClientAcquireCachedToken",SilentFlowClientGenerateResultFromCacheRecord:"silentFlowClientGenerateResultFromCacheRecord",AcquireTokenBySilentIframe:"acquireTokenBySilentIframe",InitializeBaseRequest:"initializeBaseRequest",InitializeSilentRequest:"initializeSilentRequest",InitializeClientApplication:"initializeClientApplication",SilentIframeClientTokenHelper:"silentIframeClientTokenHelper",SilentHandlerInitiateAuthRequest:"silentHandlerInitiateAuthRequest",SilentHandlerMonitorIframeForHash:"silentHandlerMonitorIframeForHash",SilentHandlerLoadFrame:"silentHandlerLoadFrame",SilentHandlerLoadFrameSync:"silentHandlerLoadFrameSync",StandardInteractionClientCreateAuthCodeClient:"standardInteractionClientCreateAuthCodeClient",StandardInteractionClientGetClientConfiguration:"standardInteractionClientGetClientConfiguration",StandardInteractionClientInitializeAuthorizationRequest:"standardInteractionClientInitializeAuthorizationRequest",StandardInteractionClientInitializeAuthorizationCodeRequest:"standardInteractionClientInitializeAuthorizationCodeRequest",GetAuthCodeUrl:"getAuthCodeUrl",HandleCodeResponseFromServer:"handleCodeResponseFromServer",HandleCodeResponse:"handleCodeResponse",UpdateTokenEndpointAuthority:"updateTokenEndpointAuthority",AuthClientAcquireToken:"authClientAcquireToken",AuthClientExecuteTokenRequest:"authClientExecuteTokenRequest",AuthClientCreateTokenRequestBody:"authClientCreateTokenRequestBody",AuthClientCreateQueryString:"authClientCreateQueryString",PopTokenGenerateCnf:"popTokenGenerateCnf",PopTokenGenerateKid:"popTokenGenerateKid",HandleServerTokenResponse:"handleServerTokenResponse",DeserializeResponse:"deserializeResponse",AuthorityFactoryCreateDiscoveredInstance:"authorityFactoryCreateDiscoveredInstance",AuthorityResolveEndpointsAsync:"authorityResolveEndpointsAsync",AuthorityResolveEndpointsFromLocalSources:"authorityResolveEndpointsFromLocalSources",AuthorityGetCloudDiscoveryMetadataFromNetwork:"authorityGetCloudDiscoveryMetadataFromNetwork",AuthorityUpdateCloudDiscoveryMetadata:"authorityUpdateCloudDiscoveryMetadata",AuthorityGetEndpointMetadataFromNetwork:"authorityGetEndpointMetadataFromNetwork",AuthorityUpdateEndpointMetadata:"authorityUpdateEndpointMetadata",AuthorityUpdateMetadataWithRegionalInformation:"authorityUpdateMetadataWithRegionalInformation",RegionDiscoveryDetectRegion:"regionDiscoveryDetectRegion",RegionDiscoveryGetRegionFromIMDS:"regionDiscoveryGetRegionFromIMDS",RegionDiscoveryGetCurrentVersion:"regionDiscoveryGetCurrentVersion",AcquireTokenByCodeAsync:"acquireTokenByCodeAsync",GetEndpointMetadataFromNetwork:"getEndpointMetadataFromNetwork",GetCloudDiscoveryMetadataFromNetworkMeasurement:"getCloudDiscoveryMetadataFromNetworkMeasurement",HandleRedirectPromiseMeasurement:"handleRedirectPromise",HandleNativeRedirectPromiseMeasurement:"handleNativeRedirectPromise",UpdateCloudDiscoveryMetadataMeasurement:"updateCloudDiscoveryMetadataMeasurement",UsernamePasswordClientAcquireToken:"usernamePasswordClientAcquireToken",NativeMessageHandlerHandshake:"nativeMessageHandlerHandshake",NativeGenerateAuthResult:"nativeGenerateAuthResult",RemoveHiddenIframe:"removeHiddenIframe",ClearTokensAndKeysWithClaims:"clearTokensAndKeysWithClaims",CacheManagerGetRefreshToken:"cacheManagerGetRefreshToken",GeneratePkceCodes:"generatePkceCodes",GenerateCodeVerifier:"generateCodeVerifier",GenerateCodeChallengeFromVerifier:"generateCodeChallengeFromVerifier",Sha256Digest:"sha256Digest",GetRandomValues:"getRandomValues"},PerformanceEventAbbreviations=new Map([[PerformanceEvents.AcquireTokenByCode,"ATByCode"],[PerformanceEvents.AcquireTokenByRefreshToken,"ATByRT"],[PerformanceEvents.AcquireTokenSilent,"ATS"],[PerformanceEvents.AcquireTokenSilentAsync,"ATSAsync"],[PerformanceEvents.AcquireTokenPopup,"ATPopup"],[PerformanceEvents.AcquireTokenRedirect,"ATRedirect"],[PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,"CryptoGetPKThumb"],[PerformanceEvents.CryptoOptsSignJwt,"CryptoSignJwt"],[PerformanceEvents.SilentCacheClientAcquireToken,"SltCacheClientAT"],[PerformanceEvents.SilentIframeClientAcquireToken,"SltIframeClientAT"],[PerformanceEvents.SilentRefreshClientAcquireToken,"SltRClientAT"],[PerformanceEvents.SsoSilent,"SsoSlt"],[PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,"StdIntClientGetDiscAuth"],[PerformanceEvents.FetchAccountIdWithNativeBroker,"FetchAccIdWithNtvBroker"],[PerformanceEvents.NativeInteractionClientAcquireToken,"NtvIntClientAT"],[PerformanceEvents.BaseClientCreateTokenRequestHeaders,"BaseClientCreateTReqHead"],[PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,"RTClientExecPost"],[PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,"AuthCodeClientExecPost"],[PerformanceEvents.BrokerHandhshake,"BrokerHandshake"],[PerformanceEvents.AcquireTokenByRefreshTokenInBroker,"ATByRTInBroker"],[PerformanceEvents.AcquireTokenByBroker,"ATByBroker"],[PerformanceEvents.RefreshTokenClientExecuteTokenRequest,"RTClientExecTReq"],[PerformanceEvents.RefreshTokenClientAcquireToken,"RTClientAT"],[PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,"RTClientATWithCachedRT"],[PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,"RTClientATByRT"],[PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,"RTClientCreateTReqBody"],[PerformanceEvents.AcquireTokenFromCache,"ATFromCache"],[PerformanceEvents.SilentFlowClientAcquireCachedToken,"SltFlowClientATCached"],[PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,"SltFlowClientGenResFromCache"],[PerformanceEvents.AcquireTokenBySilentIframe,"ATBySltIframe"],[PerformanceEvents.InitializeBaseRequest,"InitBaseReq"],[PerformanceEvents.InitializeSilentRequest,"InitSltReq"],[PerformanceEvents.InitializeClientApplication,"InitClientApplication"],[PerformanceEvents.SilentIframeClientTokenHelper,"SIClientTHelper"],[PerformanceEvents.SilentHandlerInitiateAuthRequest,"SHandlerInitAuthReq"],[PerformanceEvents.SilentHandlerMonitorIframeForHash,"SltHandlerMonitorIframeForHash"],[PerformanceEvents.SilentHandlerLoadFrame,"SHandlerLoadFrame"],[PerformanceEvents.SilentHandlerLoadFrameSync,"SHandlerLoadFrameSync"],[PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,"StdIntClientCreateAuthCodeClient"],[PerformanceEvents.StandardInteractionClientGetClientConfiguration,"StdIntClientGetClientConf"],[PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,"StdIntClientInitAuthReq"],[PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,"StdIntClientInitAuthCodeReq"],[PerformanceEvents.GetAuthCodeUrl,"GetAuthCodeUrl"],[PerformanceEvents.HandleCodeResponseFromServer,"HandleCodeResFromServer"],[PerformanceEvents.HandleCodeResponse,"HandleCodeResp"],[PerformanceEvents.UpdateTokenEndpointAuthority,"UpdTEndpointAuth"],[PerformanceEvents.AuthClientAcquireToken,"AuthClientAT"],[PerformanceEvents.AuthClientExecuteTokenRequest,"AuthClientExecTReq"],[PerformanceEvents.AuthClientCreateTokenRequestBody,"AuthClientCreateTReqBody"],[PerformanceEvents.AuthClientCreateQueryString,"AuthClientCreateQueryStr"],[PerformanceEvents.PopTokenGenerateCnf,"PopTGenCnf"],[PerformanceEvents.PopTokenGenerateKid,"PopTGenKid"],[PerformanceEvents.HandleServerTokenResponse,"HandleServerTRes"],[PerformanceEvents.DeserializeResponse,"DeserializeRes"],[PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,"AuthFactCreateDiscInst"],[PerformanceEvents.AuthorityResolveEndpointsAsync,"AuthResolveEndpointsAsync"],[PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,"AuthResolveEndpointsFromLocal"],[PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,"AuthGetCDMetaFromNet"],[PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,"AuthUpdCDMeta"],[PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,"AuthUpdCDMetaFromNet"],[PerformanceEvents.AuthorityUpdateEndpointMetadata,"AuthUpdEndpointMeta"],[PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,"AuthUpdMetaWithRegInfo"],[PerformanceEvents.RegionDiscoveryDetectRegion,"RegDiscDetectReg"],[PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,"RegDiscGetRegFromIMDS"],[PerformanceEvents.RegionDiscoveryGetCurrentVersion,"RegDiscGetCurrentVer"],[PerformanceEvents.AcquireTokenByCodeAsync,"ATByCodeAsync"],[PerformanceEvents.GetEndpointMetadataFromNetwork,"GetEndpointMetaFromNet"],[PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,"GetCDMetaFromNet"],[PerformanceEvents.HandleRedirectPromiseMeasurement,"HandleRedirectPromise"],[PerformanceEvents.HandleNativeRedirectPromiseMeasurement,"HandleNtvRedirectPromise"],[PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,"UpdateCDMeta"],[PerformanceEvents.UsernamePasswordClientAcquireToken,"UserPassClientAT"],[PerformanceEvents.NativeMessageHandlerHandshake,"NtvMsgHandlerHandshake"],[PerformanceEvents.NativeGenerateAuthResult,"NtvGenAuthRes"],[PerformanceEvents.RemoveHiddenIframe,"RemoveHiddenIframe"],[PerformanceEvents.ClearTokensAndKeysWithClaims,"ClearTAndKeysWithClaims"],[PerformanceEvents.CacheManagerGetRefreshToken,"CacheManagerGetRT"],[PerformanceEvents.GeneratePkceCodes,"GenPkceCodes"],[PerformanceEvents.GenerateCodeVerifier,"GenCodeVerifier"],[PerformanceEvents.GenerateCodeChallengeFromVerifier,"GenCodeChallengeFromVerifier"],[PerformanceEvents.Sha256Digest,"Sha256Digest"],[PerformanceEvents.GetRandomValues,"GetRandomValues"]]),PerformanceEventStatus={NotStarted:0,InProgress:1,Completed:2},IntFields=new Set(["accessTokenSize","durationMs","idTokenSize","matsSilentStatus","matsHttpStatus","refreshTokenSize","queuedTimeMs","startTimeMs","status","multiMatchedAT","multiMatchedID","multiMatchedRT"]),invoke=(e,t,r,n,o)=>(...i)=>{r.trace(`Executing function ${t}`);const a=n?.startMeasurement(t,o);if(o){const e=t+"CallCount";n?.incrementFields({[e]:1},o)}try{const n=e(...i);return a?.end({success:!0}),r.trace(`Returning result from ${t}`),n}catch(s){r.trace(`Error occurred in ${t}`);try{r.trace(JSON.stringify(s))}catch(s){r.trace("Unable to print error message.")}throw a?.end({success:!1},s),s}},invokeAsync=(e,t,r,n,o)=>(...i)=>{r.trace(`Executing function ${t}`);const a=n?.startMeasurement(t,o);if(o){const e=t+"CallCount";n?.incrementFields({[e]:1},o)}return n?.setPreQueueTime(t,o),e(...i).then((e=>(r.trace(`Returning result from ${t}`),a?.end({success:!0}),e))).catch((e=>{r.trace(`Error occurred in ${t}`);try{r.trace(JSON.stringify(e))}catch(e){r.trace("Unable to print error message.")}throw a?.end({success:!1},e),e}))};class RegionDiscovery{constructor(e,t,r,n){this.networkInterface=e,this.logger=t,this.performanceClient=r,this.correlationId=n}async detectRegion(e,t){this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion,this.correlationId);let r=e;if(r)t.region_source=RegionDiscoverySources.ENVIRONMENT_VARIABLE;else{const e=RegionDiscovery.IMDS_OPTIONS;try{const n=await invokeAsync(this.getRegionFromIMDS.bind(this),PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,this.logger,this.performanceClient,this.correlationId)(Constants.IMDS_VERSION,e);if(n.status===ResponseCodes.httpSuccess&&(r=n.body,t.region_source=RegionDiscoverySources.IMDS),n.status===ResponseCodes.httpBadRequest){const n=await invokeAsync(this.getCurrentVersion.bind(this),PerformanceEvents.RegionDiscoveryGetCurrentVersion,this.logger,this.performanceClient,this.correlationId)(e);if(!n)return t.region_source=RegionDiscoverySources.FAILED_AUTO_DETECTION,null;const o=await invokeAsync(this.getRegionFromIMDS.bind(this),PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,this.logger,this.performanceClient,this.correlationId)(n,e);o.status===ResponseCodes.httpSuccess&&(r=o.body,t.region_source=RegionDiscoverySources.IMDS)}}catch(n){return t.region_source=RegionDiscoverySources.FAILED_AUTO_DETECTION,null}}return r||(t.region_source=RegionDiscoverySources.FAILED_AUTO_DETECTION),r||null}async getRegionFromIMDS(e,t){return this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,this.correlationId),this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?api-version=${e}&format=text`,t,Constants.IMDS_TIMEOUT)}async getCurrentVersion(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion,this.correlationId);try{const t=await this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?format=json`,e);return t.status===ResponseCodes.httpBadRequest&&t.body&&t.body["newest-versions"]&&t.body["newest-versions"].length>0?t.body["newest-versions"][0]:null}catch(t){return null}}}RegionDiscovery.IMDS_OPTIONS={headers:{Metadata:"true"}};class Authority{constructor(e,t,r,n,o,i,a,s){this.canonicalAuthority=e,this._canonicalAuthority.validateAsUri(),this.networkInterface=t,this.cacheManager=r,this.authorityOptions=n,this.regionDiscoveryMetadata={region_used:void 0,region_source:void 0,region_outcome:void 0},this.logger=o,this.performanceClient=a,this.correlationId=i,this.managedIdentity=s||!1,this.regionDiscovery=new RegionDiscovery(t,this.logger,this.performanceClient,this.correlationId)}getAuthorityType(e){if(e.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL))return AuthorityType.Ciam;const t=e.PathSegments;if(t.length)switch(t[0].toLowerCase()){case Constants.ADFS:return AuthorityType.Adfs;case Constants.DSTS:return AuthorityType.Dsts}return AuthorityType.Default}get authorityType(){return this.getAuthorityType(this.canonicalAuthorityUrlComponents)}get protocolMode(){return this.authorityOptions.protocolMode}get options(){return this.authorityOptions}get canonicalAuthority(){return this._canonicalAuthority.urlString}set canonicalAuthority(e){this._canonicalAuthority=new UrlString(e),this._canonicalAuthority.validateAsUri(),this._canonicalAuthorityUrlComponents=null}get canonicalAuthorityUrlComponents(){return this._canonicalAuthorityUrlComponents||(this._canonicalAuthorityUrlComponents=this._canonicalAuthority.getUrlComponents()),this._canonicalAuthorityUrlComponents}get hostnameAndPort(){return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase()}get tenant(){return this.canonicalAuthorityUrlComponents.PathSegments[0]}get authorizationEndpoint(){if(this.discoveryComplete())return this.replacePath(this.metadata.authorization_endpoint);throw createClientAuthError(endpointResolutionError)}get tokenEndpoint(){if(this.discoveryComplete())return this.replacePath(this.metadata.token_endpoint);throw createClientAuthError(endpointResolutionError)}get deviceCodeEndpoint(){if(this.discoveryComplete())return this.replacePath(this.metadata.token_endpoint.replace("/token","/devicecode"));throw createClientAuthError(endpointResolutionError)}get endSessionEndpoint(){if(this.discoveryComplete()){if(!this.metadata.end_session_endpoint)throw createClientAuthError(endSessionEndpointNotSupported);return this.replacePath(this.metadata.end_session_endpoint)}throw createClientAuthError(endpointResolutionError)}get selfSignedJwtAudience(){if(this.discoveryComplete())return this.replacePath(this.metadata.issuer);throw createClientAuthError(endpointResolutionError)}get jwksUri(){if(this.discoveryComplete())return this.replacePath(this.metadata.jwks_uri);throw createClientAuthError(endpointResolutionError)}canReplaceTenant(e){return 1===e.PathSegments.length&&!Authority.reservedTenantDomains.has(e.PathSegments[0])&&this.getAuthorityType(e)===AuthorityType.Default&&this.protocolMode===ProtocolMode.AAD}replaceTenant(e){return e.replace(/{tenant}|{tenantid}/g,this.tenant)}replacePath(e){let t=e;const r=new UrlString(this.metadata.canonical_authority).getUrlComponents(),n=r.PathSegments;return this.canonicalAuthorityUrlComponents.PathSegments.forEach(((e,o)=>{let i=n[o];if(0===o&&this.canReplaceTenant(r)){const e=new UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];i!==e&&(this.logger.verbose(`Replacing tenant domain name ${i} with id ${e}`),i=e)}e!==i&&(t=t.replace(`/${i}/`,`/${e}/`))})),this.replaceTenant(t)}get defaultOpenIdConfigurationEndpoint(){const e=this.hostnameAndPort;return this.canonicalAuthority.endsWith("v2.0/")||this.authorityType===AuthorityType.Adfs||this.protocolMode!==ProtocolMode.AAD&&!this.isAliasOfKnownMicrosoftAuthority(e)?`${this.canonicalAuthority}.well-known/openid-configuration`:`${this.canonicalAuthority}v2.0/.well-known/openid-configuration`}discoveryComplete(){return!!this.metadata}async resolveEndpointsAsync(){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync,this.correlationId);const e=this.getCurrentMetadataEntity(),t=await invokeAsync(this.updateCloudDiscoveryMetadata.bind(this),PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,this.logger,this.performanceClient,this.correlationId)(e);this.canonicalAuthority=this.canonicalAuthority.replace(this.hostnameAndPort,e.preferred_network);const r=await invokeAsync(this.updateEndpointMetadata.bind(this),PerformanceEvents.AuthorityUpdateEndpointMetadata,this.logger,this.performanceClient,this.correlationId)(e);this.updateCachedMetadata(e,t,{source:r}),this.performanceClient?.addFields({cloudDiscoverySource:t,authorityEndpointSource:r},this.correlationId)}getCurrentMetadataEntity(){let e=this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);return e||(e={aliases:[],preferred_cache:this.hostnameAndPort,preferred_network:this.hostnameAndPort,canonical_authority:this.canonicalAuthority,authorization_endpoint:"",token_endpoint:"",end_session_endpoint:"",issuer:"",aliasesFromNetwork:!1,endpointsFromNetwork:!1,expiresAt:generateAuthorityMetadataExpiresAt(),jwks_uri:""}),e}updateCachedMetadata(e,t,r){t!==AuthorityMetadataSource.CACHE&&r?.source!==AuthorityMetadataSource.CACHE&&(e.expiresAt=generateAuthorityMetadataExpiresAt(),e.canonical_authority=this.canonicalAuthority);const n=this.cacheManager.generateAuthorityMetadataCacheKey(e.preferred_cache);this.cacheManager.setAuthorityMetadata(n,e),this.metadata=e}async updateEndpointMetadata(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata,this.correlationId);const t=this.updateEndpointMetadataFromLocalSources(e);if(t){if(t.source===AuthorityMetadataSource.HARDCODED_VALUES&&this.authorityOptions.azureRegionConfiguration?.azureRegion&&t.metadata){updateAuthorityEndpointMetadata(e,await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this),PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,this.logger,this.performanceClient,this.correlationId)(t.metadata),!1),e.canonical_authority=this.canonicalAuthority}return t.source}let r=await invokeAsync(this.getEndpointMetadataFromNetwork.bind(this),PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,this.logger,this.performanceClient,this.correlationId)();if(r)return this.authorityOptions.azureRegionConfiguration?.azureRegion&&(r=await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this),PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,this.logger,this.performanceClient,this.correlationId)(r)),updateAuthorityEndpointMetadata(e,r,!0),AuthorityMetadataSource.NETWORK;throw createClientAuthError(openIdConfigError,this.defaultOpenIdConfigurationEndpoint)}updateEndpointMetadataFromLocalSources(e){this.logger.verbose("Attempting to get endpoint metadata from authority configuration");const t=this.getEndpointMetadataFromConfig();if(t)return this.logger.verbose("Found endpoint metadata in authority configuration"),updateAuthorityEndpointMetadata(e,t,!1),{source:AuthorityMetadataSource.CONFIG};if(this.logger.verbose("Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values."),this.authorityOptions.skipAuthorityMetadataCache)this.logger.verbose("Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.");else{const t=this.getEndpointMetadataFromHardcodedValues();if(t)return updateAuthorityEndpointMetadata(e,t,!1),{source:AuthorityMetadataSource.HARDCODED_VALUES,metadata:t};this.logger.verbose("Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.")}const r=isAuthorityMetadataExpired(e);return this.isAuthoritySameType(e)&&e.endpointsFromNetwork&&!r?(this.logger.verbose("Found endpoint metadata in the cache."),{source:AuthorityMetadataSource.CACHE}):(r&&this.logger.verbose("The metadata entity is expired."),null)}isAuthoritySameType(e){return new UrlString(e.canonical_authority).getUrlComponents().PathSegments.length===this.canonicalAuthorityUrlComponents.PathSegments.length}getEndpointMetadataFromConfig(){if(this.authorityOptions.authorityMetadata)try{return JSON.parse(this.authorityOptions.authorityMetadata)}catch(e){throw createClientConfigurationError(invalidAuthorityMetadata)}return null}async getEndpointMetadataFromNetwork(){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,this.correlationId);const e={},t=this.defaultOpenIdConfigurationEndpoint;this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${t}`);try{const r=await this.networkInterface.sendGetRequestAsync(t,e);return isOpenIdConfigResponse(r.body)?r.body:(this.logger.verbose("Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration"),null)}catch(r){return this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${r}`),null}}getEndpointMetadataFromHardcodedValues(){return this.hostnameAndPort in EndpointMetadata?EndpointMetadata[this.hostnameAndPort]:null}async updateMetadataWithRegionalInformation(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,this.correlationId);const t=this.authorityOptions.azureRegionConfiguration?.azureRegion;if(t){if(t!==Constants.AZURE_REGION_AUTO_DISCOVER_FLAG)return this.regionDiscoveryMetadata.region_outcome=RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION,this.regionDiscoveryMetadata.region_used=t,Authority.replaceWithRegionalInformation(e,t);const r=await invokeAsync(this.regionDiscovery.detectRegion.bind(this.regionDiscovery),PerformanceEvents.RegionDiscoveryDetectRegion,this.logger,this.performanceClient,this.correlationId)(this.authorityOptions.azureRegionConfiguration?.environmentRegion,this.regionDiscoveryMetadata);if(r)return this.regionDiscoveryMetadata.region_outcome=RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL,this.regionDiscoveryMetadata.region_used=r,Authority.replaceWithRegionalInformation(e,r);this.regionDiscoveryMetadata.region_outcome=RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED}return e}async updateCloudDiscoveryMetadata(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,this.correlationId);const t=this.updateCloudDiscoveryMetadataFromLocalSources(e);if(t)return t;const r=await invokeAsync(this.getCloudDiscoveryMetadataFromNetwork.bind(this),PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,this.logger,this.performanceClient,this.correlationId)();if(r)return updateCloudDiscoveryMetadata(e,r,!0),AuthorityMetadataSource.NETWORK;throw createClientConfigurationError(untrustedAuthority)}updateCloudDiscoveryMetadataFromLocalSources(e){this.logger.verbose("Attempting to get cloud discovery metadata  from authority configuration"),this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities||Constants.NOT_APPLICABLE}`),this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata||Constants.NOT_APPLICABLE}`),this.logger.verbosePii(`Canonical Authority: ${e.canonical_authority||Constants.NOT_APPLICABLE}`);const t=this.getCloudDiscoveryMetadataFromConfig();if(t)return this.logger.verbose("Found cloud discovery metadata in authority configuration"),updateCloudDiscoveryMetadata(e,t,!1),AuthorityMetadataSource.CONFIG;if(this.logger.verbose("Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values."),this.options.skipAuthorityMetadataCache)this.logger.verbose("Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.");else{const t=getCloudDiscoveryMetadataFromHardcodedValues(this.hostnameAndPort);if(t)return this.logger.verbose("Found cloud discovery metadata from hardcoded values."),updateCloudDiscoveryMetadata(e,t,!1),AuthorityMetadataSource.HARDCODED_VALUES;this.logger.verbose("Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.")}const r=isAuthorityMetadataExpired(e);return this.isAuthoritySameType(e)&&e.aliasesFromNetwork&&!r?(this.logger.verbose("Found cloud discovery metadata in the cache."),AuthorityMetadataSource.CACHE):(r&&this.logger.verbose("The metadata entity is expired."),null)}getCloudDiscoveryMetadataFromConfig(){if(this.authorityType===AuthorityType.Ciam)return this.logger.verbose("CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host."),Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);if(this.authorityOptions.cloudDiscoveryMetadata){this.logger.verbose("The cloud discovery metadata has been provided as a network response, in the config.");try{this.logger.verbose("Attempting to parse the cloud discovery metadata.");const e=getCloudDiscoveryMetadataFromNetworkResponse(JSON.parse(this.authorityOptions.cloudDiscoveryMetadata).metadata,this.hostnameAndPort);if(this.logger.verbose("Parsed the cloud discovery metadata."),e)return this.logger.verbose("There is returnable metadata attached to the parsed cloud discovery metadata."),e;this.logger.verbose("There is no metadata attached to the parsed cloud discovery metadata.")}catch(e){throw this.logger.verbose("Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error."),createClientConfigurationError(invalidCloudDiscoveryMetadata)}}return this.isInKnownAuthorities()?(this.logger.verbose("The host is included in knownAuthorities. Creating new cloud discovery metadata from the host."),Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort)):null}async getCloudDiscoveryMetadataFromNetwork(){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,this.correlationId);const e=`${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`,t={};let r=null;try{const n=await this.networkInterface.sendGetRequestAsync(e,t);let o,i;if(isCloudInstanceDiscoveryResponse(n.body))o=n.body,i=o.metadata,this.logger.verbosePii(`tenant_discovery_endpoint is: ${o.tenant_discovery_endpoint}`);else{if(!isCloudInstanceDiscoveryErrorResponse(n.body))return this.logger.error("AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse"),null;if(this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${n.status}`),o=n.body,o.error===Constants.INVALID_INSTANCE)return this.logger.error("The CloudInstanceDiscoveryErrorResponse error is invalid_instance."),null;this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${o.error}`),this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${o.error_description}`),this.logger.warning("Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []"),i=[]}this.logger.verbose("Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request."),r=getCloudDiscoveryMetadataFromNetworkResponse(i,this.hostnameAndPort)}catch(n){if(n instanceof AuthError)this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\nError: ${n.errorCode}\nError Description: ${n.errorMessage}`);else{const e=n;this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\nError: ${e.name}\nError Description: ${e.message}`)}return null}return r||(this.logger.warning("The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request."),this.logger.verbose("Creating custom Authority for custom domain scenario."),r=Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort)),r}isInKnownAuthorities(){return this.authorityOptions.knownAuthorities.filter((e=>e&&UrlString.getDomainFromUrl(e).toLowerCase()===this.hostnameAndPort)).length>0}static generateAuthority(e,t){let r;if(t&&t.azureCloudInstance!==AzureCloudInstance.None){const e=t.tenant?t.tenant:Constants.DEFAULT_COMMON_TENANT;r=`${t.azureCloudInstance}/${e}/`}return r||e}static createCloudDiscoveryMetadataFromHost(e){return{preferred_network:e,preferred_cache:e,aliases:[e]}}getPreferredCache(){if(this.managedIdentity)return Constants.DEFAULT_AUTHORITY_HOST;if(this.discoveryComplete())return this.metadata.preferred_cache;throw createClientAuthError(endpointResolutionError)}isAlias(e){return this.metadata.aliases.indexOf(e)>-1}isAliasOfKnownMicrosoftAuthority(e){return InstanceDiscoveryMetadataAliases.has(e)}static isPublicCloudAuthority(e){return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(e)>=0}static buildRegionalAuthorityString(e,t,r){const n=new UrlString(e);n.validateAsUri();const o=n.getUrlComponents();let i=`${t}.${o.HostNameAndPort}`;this.isPublicCloudAuthority(o.HostNameAndPort)&&(i=`${t}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`);const a=UrlString.constructAuthorityUriFromObject({...n.getUrlComponents(),HostNameAndPort:i}).urlString;return r?`${a}?${r}`:a}static replaceWithRegionalInformation(e,t){const r={...e};return r.authorization_endpoint=Authority.buildRegionalAuthorityString(r.authorization_endpoint,t),r.token_endpoint=Authority.buildRegionalAuthorityString(r.token_endpoint,t),r.end_session_endpoint&&(r.end_session_endpoint=Authority.buildRegionalAuthorityString(r.end_session_endpoint,t)),r}static transformCIAMAuthority(e){let t=e;const r=new UrlString(e).getUrlComponents();if(0===r.PathSegments.length&&r.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)){t=`${t}${r.HostNameAndPort.split(".")[0]}${Constants.AAD_TENANT_DOMAIN_SUFFIX}`}return t}}function getTenantFromAuthorityString(e){const t=new UrlString(e).getUrlComponents(),r=t.PathSegments.slice(-1)[0]?.toLowerCase();switch(r){case AADAuthorityConstants.COMMON:case AADAuthorityConstants.ORGANIZATIONS:case AADAuthorityConstants.CONSUMERS:return;default:return r}}function formatAuthorityUri(e){return e.endsWith(Constants.FORWARD_SLASH)?e:`${e}${Constants.FORWARD_SLASH}`}function buildStaticAuthorityOptions(e){const t=e.cloudDiscoveryMetadata;let r;if(t)try{r=JSON.parse(t)}catch(n){throw createClientConfigurationError(invalidCloudDiscoveryMetadata)}return{canonicalAuthority:e.authority?formatAuthorityUri(e.authority):void 0,knownAuthorities:e.knownAuthorities,cloudDiscoveryMetadata:r}}async function createDiscoveredInstance(e,t,r,n,o,i,a){a?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,i);const s=Authority.transformCIAMAuthority(formatAuthorityUri(e)),c=new Authority(s,t,r,n,o,i,a);try{return await invokeAsync(c.resolveEndpointsAsync.bind(c),PerformanceEvents.AuthorityResolveEndpointsAsync,o,a,i)(),c}catch(l){throw createClientAuthError(endpointResolutionError)}}Authority.reservedTenantDomains=new Set(["{tenant}","{tenantid}",AADAuthorityConstants.COMMON,AADAuthorityConstants.CONSUMERS,AADAuthorityConstants.ORGANIZATIONS]);class BaseClient{constructor(e,t){this.config=buildClientConfiguration(e),this.logger=new Logger(this.config.loggerOptions,name$1,"14.15.0"),this.cryptoUtils=this.config.cryptoInterface,this.cacheManager=this.config.storageInterface,this.networkClient=this.config.networkInterface,this.networkManager=new NetworkManager(this.networkClient,this.cacheManager),this.serverTelemetryManager=this.config.serverTelemetryManager,this.authority=this.config.authOptions.authority,this.performanceClient=t}createTokenRequestHeaders(e){const t={};if(t[HeaderNames.CONTENT_TYPE]=Constants.URL_FORM_CONTENT_TYPE,!this.config.systemOptions.preventCorsPreflight&&e)switch(e.type){case CcsCredentialType.HOME_ACCOUNT_ID:try{const r=buildClientInfoFromHomeAccountId(e.credential);t[HeaderNames.CCS_HEADER]=`Oid:${r.uid}@${r.utid}`}catch(r){this.logger.verbose("Could not parse home account ID for CCS Header: "+r)}break;case CcsCredentialType.UPN:t[HeaderNames.CCS_HEADER]=`UPN: ${e.credential}`}return t}async executePostToTokenEndpoint(e,t,r,n,o,i){i&&this.performanceClient?.addQueueMeasurement(i,o);const a=await this.networkManager.sendPostRequest(n,e,{body:t,headers:r});return this.performanceClient?.addFields({refreshTokenSize:a.body.refresh_token?.length||0,httpVerToken:a.headers?.[HeaderNames.X_MS_HTTP_VERSION]||""},o),this.config.serverTelemetryManager&&a.status<500&&429!==a.status&&this.config.serverTelemetryManager.clearTelemetryCache(),a}async updateAuthority(e,t){this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority,t);const r=`https://${e}/${this.authority.tenant}/`,n=await createDiscoveredInstance(r,this.networkClient,this.cacheManager,this.authority.options,this.logger,t,this.performanceClient);this.authority=n}createTokenQueryParameters(e){const t=new RequestParameterBuilder;return e.tokenQueryParameters&&t.addExtraQueryParameters(e.tokenQueryParameters),t.createQueryString()}}const noTokensFound="no_tokens_found",nativeAccountUnavailable="native_account_unavailable",refreshTokenExpired="refresh_token_expired",interactionRequired="interaction_required",consentRequired="consent_required",loginRequired="login_required",badToken="bad_token";var InteractionRequiredAuthErrorCodes=Object.freeze({__proto__:null,badToken:badToken,consentRequired:consentRequired,interactionRequired:interactionRequired,loginRequired:loginRequired,nativeAccountUnavailable:nativeAccountUnavailable,noTokensFound:noTokensFound,refreshTokenExpired:refreshTokenExpired});const InteractionRequiredServerErrorMessage=[interactionRequired,consentRequired,loginRequired,badToken],InteractionRequiredAuthSubErrorMessage=["message_only","additional_action","basic_action","user_password_expired","consent_required","bad_token"],InteractionRequiredAuthErrorMessages={[noTokensFound]:"No refresh token found in the cache. Please sign-in.",[nativeAccountUnavailable]:"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.",[refreshTokenExpired]:"Refresh token has expired.",[badToken]:"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve."},InteractionRequiredAuthErrorMessage={noTokensFoundError:{code:noTokensFound,desc:InteractionRequiredAuthErrorMessages[noTokensFound]},native_account_unavailable:{code:nativeAccountUnavailable,desc:InteractionRequiredAuthErrorMessages[nativeAccountUnavailable]},bad_token:{code:badToken,desc:InteractionRequiredAuthErrorMessages[badToken]}};class InteractionRequiredAuthError extends AuthError{constructor(e,t,r,n,o,i,a,s){super(e,t,r),Object.setPrototypeOf(this,InteractionRequiredAuthError.prototype),this.timestamp=n||Constants.EMPTY_STRING,this.traceId=o||Constants.EMPTY_STRING,this.correlationId=i||Constants.EMPTY_STRING,this.claims=a||Constants.EMPTY_STRING,this.name="InteractionRequiredAuthError",this.errorNo=s}}function isInteractionRequiredError(e,t,r){const n=!!e&&InteractionRequiredServerErrorMessage.indexOf(e)>-1,o=!!r&&InteractionRequiredAuthSubErrorMessage.indexOf(r)>-1,i=!!t&&InteractionRequiredServerErrorMessage.some((e=>t.indexOf(e)>-1));return n||i||o}function createInteractionRequiredAuthError(e){return new InteractionRequiredAuthError(e,InteractionRequiredAuthErrorMessages[e])}class ProtocolUtils{static setRequestState(e,t,r){const n=ProtocolUtils.generateLibraryState(e,r);return t?`${n}${Constants.RESOURCE_DELIM}${t}`:n}static generateLibraryState(e,t){if(!e)throw createClientAuthError(noCryptoObject);const r={id:e.createNewGuid()};t&&(r.meta=t);const n=JSON.stringify(r);return e.base64Encode(n)}static parseRequestState(e,t){if(!e)throw createClientAuthError(noCryptoObject);if(!t)throw createClientAuthError(invalidState);try{const r=t.split(Constants.RESOURCE_DELIM),n=r[0],o=r.length>1?r.slice(1).join(Constants.RESOURCE_DELIM):Constants.EMPTY_STRING,i=e.base64Decode(n),a=JSON.parse(i);return{userRequestState:o||Constants.EMPTY_STRING,libraryState:a}}catch(r){throw createClientAuthError(invalidState)}}}const KeyLocation={SW:"sw",UHW:"uhw"};class PopTokenGenerator{constructor(e,t){this.cryptoUtils=e,this.performanceClient=t}async generateCnf(e,t){this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf,e.correlationId);const r=await invokeAsync(this.generateKid.bind(this),PerformanceEvents.PopTokenGenerateCnf,t,this.performanceClient,e.correlationId)(e),n=this.cryptoUtils.base64UrlEncode(JSON.stringify(r));return{kid:r.kid,reqCnfString:n}}async generateKid(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid,e.correlationId);return{kid:await this.cryptoUtils.getPublicKeyThumbprint(e),xms_ksl:KeyLocation.SW}}async signPopToken(e,t,r){return this.signPayload(e,t,r)}async signPayload(e,t,r,n){const{resourceRequestMethod:o,resourceRequestUri:i,shrClaims:a,shrNonce:s,shrOptions:c}=r,l=i?new UrlString(i):void 0,d=l?.getUrlComponents();return this.cryptoUtils.signJwt({at:e,ts:nowSeconds(),m:o?.toUpperCase(),u:d?.HostNameAndPort,nonce:s||this.cryptoUtils.createNewGuid(),p:d?.AbsolutePath,q:d?.QueryString?[[],d.QueryString]:void 0,client_claims:a||void 0,...n},t,c,r.correlationId)}}class TokenCacheContext{constructor(e,t){this.cache=e,this.hasChanged=t}get cacheHasChanged(){return this.hasChanged}get tokenCache(){return this.cache}}function parseServerErrorNo(e){const t="code=",r=e.error_uri?.lastIndexOf(t);return r&&r>=0?e.error_uri?.substring(r+5):void 0}class ResponseHandler{constructor(e,t,r,n,o,i,a){this.clientId=e,this.cacheStorage=t,this.cryptoObj=r,this.logger=n,this.serializableCache=o,this.persistencePlugin=i,this.performanceClient=a}validateServerAuthorizationCodeResponse(e,t){if(!e.state||!t)throw e.state?createClientAuthError(stateNotFound,"Cached State"):createClientAuthError(stateNotFound,"Server State");let r,n;try{r=decodeURIComponent(e.state)}catch(o){throw createClientAuthError(invalidState,e.state)}try{n=decodeURIComponent(t)}catch(o){throw createClientAuthError(invalidState,e.state)}if(r!==n)throw createClientAuthError(stateMismatch);if(e.error||e.error_description||e.suberror){const t=parseServerErrorNo(e);if(isInteractionRequiredError(e.error,e.error_description,e.suberror))throw new InteractionRequiredAuthError(e.error||"",e.error_description,e.suberror,e.timestamp||"",e.trace_id||"",e.correlation_id||"",e.claims||"",t);throw new ServerError(e.error||"",e.error_description,e.suberror,t)}}validateTokenResponse(e,t){if(e.error||e.error_description||e.suberror){const r=`Error(s): ${e.error_codes||Constants.NOT_AVAILABLE} - Timestamp: ${e.timestamp||Constants.NOT_AVAILABLE} - Description: ${e.error_description||Constants.NOT_AVAILABLE} - Correlation ID: ${e.correlation_id||Constants.NOT_AVAILABLE} - Trace ID: ${e.trace_id||Constants.NOT_AVAILABLE}`,n=e.error_codes?.length?e.error_codes[0]:void 0,o=new ServerError(e.error,r,e.suberror,n,e.status);if(t&&e.status&&e.status>=HttpStatus.SERVER_ERROR_RANGE_START&&e.status<=HttpStatus.SERVER_ERROR_RANGE_END)return void this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\n${o}`);if(t&&e.status&&e.status>=HttpStatus.CLIENT_ERROR_RANGE_START&&e.status<=HttpStatus.CLIENT_ERROR_RANGE_END)return void this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\n${o}`);if(isInteractionRequiredError(e.error,e.error_description,e.suberror))throw new InteractionRequiredAuthError(e.error,e.error_description,e.suberror,e.timestamp||Constants.EMPTY_STRING,e.trace_id||Constants.EMPTY_STRING,e.correlation_id||Constants.EMPTY_STRING,e.claims||Constants.EMPTY_STRING,n);throw o}}async handleServerTokenResponse(e,t,r,n,o,i,a,s,c){let l,d;if(this.performanceClient?.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse,e.correlation_id),e.id_token){if(l=extractTokenClaims(e.id_token||Constants.EMPTY_STRING,this.cryptoObj.base64Decode),o&&o.nonce&&l.nonce!==o.nonce)throw createClientAuthError(nonceMismatch);if(n.maxAge||0===n.maxAge){const e=l.auth_time;if(!e)throw createClientAuthError(authTimeNotFound);checkMaxAge(e,n.maxAge)}}this.homeAccountIdentifier=AccountEntity.generateHomeAccountId(e.client_info||Constants.EMPTY_STRING,t.authorityType,this.logger,this.cryptoObj,l),o&&o.state&&(d=ProtocolUtils.parseRequestState(this.cryptoObj,o.state)),e.key_id=e.key_id||n.sshKid||void 0;const u=this.generateCacheRecord(e,t,r,n,l,i,o);let h;try{if(this.persistencePlugin&&this.serializableCache&&(this.logger.verbose("Persistence enabled, calling beforeCacheAccess"),h=new TokenCacheContext(this.serializableCache,!0),await this.persistencePlugin.beforeCacheAccess(h)),a&&!s&&u.account){const e=u.account.generateAccountKey();if(!this.cacheStorage.getAccount(e,this.logger))return this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache"),await ResponseHandler.generateAuthenticationResult(this.cryptoObj,t,u,!1,n,l,d,void 0,c)}await this.cacheStorage.saveCacheRecord(u,n.storeInCache,n.correlationId)}finally{this.persistencePlugin&&this.serializableCache&&h&&(this.logger.verbose("Persistence enabled, calling afterCacheAccess"),await this.persistencePlugin.afterCacheAccess(h))}return ResponseHandler.generateAuthenticationResult(this.cryptoObj,t,u,!1,n,l,d,e,c)}generateCacheRecord(e,t,r,n,o,i,a){const s=t.getPreferredCache();if(!s)throw createClientAuthError(invalidCacheEnvironment);const c=getTenantIdFromIdTokenClaims(o);let l,d;e.id_token&&o&&(l=createIdTokenEntity(this.homeAccountIdentifier,s,e.id_token,this.clientId,c||""),d=buildAccountToCache(this.cacheStorage,t,this.homeAccountIdentifier,this.cryptoObj.base64Decode,o,e.client_info,s,c,a,void 0,this.logger));let u=null;if(e.access_token){const o=e.scope?ScopeSet.fromString(e.scope):new ScopeSet(n.scopes||[]),a=("string"===typeof e.expires_in?parseInt(e.expires_in,10):e.expires_in)||0,l=("string"===typeof e.ext_expires_in?parseInt(e.ext_expires_in,10):e.ext_expires_in)||0,d=("string"===typeof e.refresh_in?parseInt(e.refresh_in,10):e.refresh_in)||void 0,h=r+a,g=h+l,p=d&&d>0?r+d:void 0;u=createAccessTokenEntity(this.homeAccountIdentifier,s,e.access_token,this.clientId,c||t.tenant||"",o.printScopes(),h,g,this.cryptoObj.base64Decode,p,e.token_type,i,e.key_id,n.claims,n.requestedClaimsHash)}let h=null;if(e.refresh_token){let t;if(e.refresh_token_expires_in){t=r+("string"===typeof e.refresh_token_expires_in?parseInt(e.refresh_token_expires_in,10):e.refresh_token_expires_in)}h=createRefreshTokenEntity(this.homeAccountIdentifier,s,e.refresh_token,this.clientId,e.foci,i,t)}let g=null;return e.foci&&(g={clientId:this.clientId,environment:s,familyId:e.foci}),{account:d,idToken:l,accessToken:u,refreshToken:h,appMetadata:g}}static async generateAuthenticationResult(e,t,r,n,o,i,a,s,c){let l,d,u=Constants.EMPTY_STRING,h=[],g=null,p=Constants.EMPTY_STRING;if(r.accessToken){if(r.accessToken.tokenType!==AuthenticationScheme.POP||o.popKid)u=r.accessToken.secret;else{const t=new PopTokenGenerator(e),{secret:n,keyId:i}=r.accessToken;if(!i)throw createClientAuthError(keyIdMissing);u=await t.signPopToken(n,i,o)}h=ScopeSet.fromString(r.accessToken.target).asArray(),g=new Date(1e3*Number(r.accessToken.expiresOn)),l=new Date(1e3*Number(r.accessToken.extendedExpiresOn)),r.accessToken.refreshOn&&(d=new Date(1e3*Number(r.accessToken.refreshOn)))}r.appMetadata&&(p="1"===r.appMetadata.familyId?"1":"");const m=i?.oid||i?.sub||"",C=i?.tid||"";s?.spa_accountid&&r.account&&(r.account.nativeAccountId=s?.spa_accountid);const E=r.account?updateAccountTenantProfileData(r.account.getAccountInfo(),void 0,i,r.idToken?.secret):null;return{authority:t.canonicalAuthority,uniqueId:m,tenantId:C,scopes:h,account:E,idToken:r?.idToken?.secret||"",idTokenClaims:i||{},accessToken:u,fromCache:n,expiresOn:g,extExpiresOn:l,refreshOn:d,correlationId:o.correlationId,requestId:c||Constants.EMPTY_STRING,familyId:p,tokenType:r.accessToken?.tokenType||Constants.EMPTY_STRING,state:a?a.userRequestState:Constants.EMPTY_STRING,cloudGraphHostName:r.account?.cloudGraphHostName||Constants.EMPTY_STRING,msGraphHost:r.account?.msGraphHost||Constants.EMPTY_STRING,code:s?.spa_code,fromNativeBroker:!1}}}function buildAccountToCache(e,t,r,n,o,i,a,s,c,l,d){d?.verbose("setCachedAccount called");const u=e.getAccountKeys().find((e=>e.startsWith(r)));let h=null;u&&(h=e.getAccount(u,d));const g=h||AccountEntity.createAccount({homeAccountId:r,idTokenClaims:o,clientInfo:i,environment:a,cloudGraphHostName:c?.cloud_graph_host_name,msGraphHost:c?.msgraph_host,nativeAccountId:l},t,n),p=g.tenantProfiles||[],m=s||g.realm;if(m&&!p.find((e=>e.tenantId===m))){const e=buildTenantProfile(r,g.localAccountId,m,o);p.push(e)}return g.tenantProfiles=p,g}async function getClientAssertion(e,t,r){if("string"===typeof e)return e;return e({clientId:t,tokenEndpoint:r})}class AuthorizationCodeClient extends BaseClient{constructor(e,t){super(e,t),this.includeRedirectUri=!0,this.oidcDefaultScopes=this.config.authOptions.authority.options.OIDCOptions?.defaultScopes}async getAuthCodeUrl(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl,e.correlationId);const t=await invokeAsync(this.createAuthCodeUrlQueryString.bind(this),PerformanceEvents.AuthClientCreateQueryString,this.logger,this.performanceClient,e.correlationId)(e);return UrlString.appendQueryString(this.authority.authorizationEndpoint,t)}async acquireToken(e,t){if(this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken,e.correlationId),!e.code)throw createClientAuthError(requestCannotBeMade);const r=nowSeconds(),n=await invokeAsync(this.executeTokenRequest.bind(this),PerformanceEvents.AuthClientExecuteTokenRequest,this.logger,this.performanceClient,e.correlationId)(this.authority,e),o=n.headers?.[HeaderNames.X_MS_REQUEST_ID],i=new ResponseHandler(this.config.authOptions.clientId,this.cacheManager,this.cryptoUtils,this.logger,this.config.serializableCache,this.config.persistencePlugin,this.performanceClient);return i.validateTokenResponse(n.body),invokeAsync(i.handleServerTokenResponse.bind(i),PerformanceEvents.HandleServerTokenResponse,this.logger,this.performanceClient,e.correlationId)(n.body,this.authority,r,e,t,void 0,void 0,void 0,o)}handleFragmentResponse(e,t){if(new ResponseHandler(this.config.authOptions.clientId,this.cacheManager,this.cryptoUtils,this.logger,null,null).validateServerAuthorizationCodeResponse(e,t),!e.code)throw createClientAuthError(authorizationCodeMissingFromServerResponse);return e}getLogoutUri(e){if(!e)throw createClientConfigurationError(logoutRequestEmpty);const t=this.createLogoutUrlQueryString(e);return UrlString.appendQueryString(this.authority.endSessionEndpoint,t)}async executeTokenRequest(e,t){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest,t.correlationId);const r=this.createTokenQueryParameters(t),n=UrlString.appendQueryString(e.tokenEndpoint,r),o=await invokeAsync(this.createTokenRequestBody.bind(this),PerformanceEvents.AuthClientCreateTokenRequestBody,this.logger,this.performanceClient,t.correlationId)(t);let i;if(t.clientInfo)try{const e=buildClientInfo(t.clientInfo,this.cryptoUtils.base64Decode);i={credential:`${e.uid}${Separators.CLIENT_INFO_SEPARATOR}${e.utid}`,type:CcsCredentialType.HOME_ACCOUNT_ID}}catch(c){this.logger.verbose("Could not parse client info for CCS Header: "+c)}const a=this.createTokenRequestHeaders(i||t.ccsCredential),s={clientId:t.tokenBodyParameters?.clientId||this.config.authOptions.clientId,authority:e.canonicalAuthority,scopes:t.scopes,claims:t.claims,authenticationScheme:t.authenticationScheme,resourceRequestMethod:t.resourceRequestMethod,resourceRequestUri:t.resourceRequestUri,shrClaims:t.shrClaims,sshKid:t.sshKid};return invokeAsync(this.executePostToTokenEndpoint.bind(this),PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,this.logger,this.performanceClient,t.correlationId)(n,o,a,s,t.correlationId,PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint)}async createTokenRequestBody(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody,e.correlationId);const t=new RequestParameterBuilder;if(t.addClientId(e.tokenBodyParameters?.[CLIENT_ID]||this.config.authOptions.clientId),this.includeRedirectUri?t.addRedirectUri(e.redirectUri):RequestValidator.validateRedirectUri(e.redirectUri),t.addScopes(e.scopes,!0,this.oidcDefaultScopes),t.addAuthorizationCode(e.code),t.addLibraryInfo(this.config.libraryInfo),t.addApplicationTelemetry(this.config.telemetry.application),t.addThrottling(),this.serverTelemetryManager&&!isOidcProtocolMode(this.config)&&t.addServerTelemetry(this.serverTelemetryManager),e.codeVerifier&&t.addCodeVerifier(e.codeVerifier),this.config.clientCredentials.clientSecret&&t.addClientSecret(this.config.clientCredentials.clientSecret),this.config.clientCredentials.clientAssertion){const r=this.config.clientCredentials.clientAssertion;t.addClientAssertion(await getClientAssertion(r.assertion,this.config.authOptions.clientId,e.resourceRequestUri)),t.addClientAssertionType(r.assertionType)}if(t.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT),t.addClientInfo(),e.authenticationScheme===AuthenticationScheme.POP){const r=new PopTokenGenerator(this.cryptoUtils,this.performanceClient);let n;if(e.popKid)n=this.cryptoUtils.encodeKid(e.popKid);else{n=(await invokeAsync(r.generateCnf.bind(r),PerformanceEvents.PopTokenGenerateCnf,this.logger,this.performanceClient,e.correlationId)(e,this.logger)).reqCnfString}t.addPopToken(n)}else if(e.authenticationScheme===AuthenticationScheme.SSH){if(!e.sshJwk)throw createClientConfigurationError(missingSshJwk);t.addSshJwk(e.sshJwk)}const r=e.correlationId||this.config.cryptoInterface.createNewGuid();let n;if(t.addCorrelationId(r),(!StringUtils.isEmptyObj(e.claims)||this.config.authOptions.clientCapabilities&&this.config.authOptions.clientCapabilities.length>0)&&t.addClaims(e.claims,this.config.authOptions.clientCapabilities),e.clientInfo)try{const t=buildClientInfo(e.clientInfo,this.cryptoUtils.base64Decode);n={credential:`${t.uid}${Separators.CLIENT_INFO_SEPARATOR}${t.utid}`,type:CcsCredentialType.HOME_ACCOUNT_ID}}catch(o){this.logger.verbose("Could not parse client info for CCS Header: "+o)}else n=e.ccsCredential;if(this.config.systemOptions.preventCorsPreflight&&n)switch(n.type){case CcsCredentialType.HOME_ACCOUNT_ID:try{const e=buildClientInfoFromHomeAccountId(n.credential);t.addCcsOid(e)}catch(o){this.logger.verbose("Could not parse home account ID for CCS Header: "+o)}break;case CcsCredentialType.UPN:t.addCcsUpn(n.credential)}return e.tokenBodyParameters&&t.addExtraQueryParameters(e.tokenBodyParameters),!e.enableSpaAuthorizationCode||e.tokenBodyParameters&&e.tokenBodyParameters[RETURN_SPA_CODE]||t.addExtraQueryParameters({[RETURN_SPA_CODE]:"1"}),t.createQueryString()}async createAuthCodeUrlQueryString(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString,e.correlationId);const t=new RequestParameterBuilder;t.addClientId(e.extraQueryParameters?.[CLIENT_ID]||this.config.authOptions.clientId);const r=[...e.scopes||[],...e.extraScopesToConsent||[]];t.addScopes(r,!0,this.oidcDefaultScopes),t.addRedirectUri(e.redirectUri);const n=e.correlationId||this.config.cryptoInterface.createNewGuid();if(t.addCorrelationId(n),t.addResponseMode(e.responseMode),t.addResponseTypeCode(),t.addLibraryInfo(this.config.libraryInfo),isOidcProtocolMode(this.config)||t.addApplicationTelemetry(this.config.telemetry.application),t.addClientInfo(),e.codeChallenge&&e.codeChallengeMethod&&t.addCodeChallengeParams(e.codeChallenge,e.codeChallengeMethod),e.prompt&&t.addPrompt(e.prompt),e.domainHint&&t.addDomainHint(e.domainHint),e.prompt!==PromptValue.SELECT_ACCOUNT)if(e.sid&&e.prompt===PromptValue.NONE)this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request"),t.addSid(e.sid);else if(e.account){const r=this.extractAccountSid(e.account);let n=this.extractLoginHint(e.account);if(n&&e.domainHint&&(this.logger.warning('AuthorizationCodeClient.createAuthCodeUrlQueryString: "domainHint" param is set, skipping opaque "login_hint" claim. Please consider not passing domainHint'),n=null),n){this.logger.verbose("createAuthCodeUrlQueryString: login_hint claim present on account"),t.addLoginHint(n);try{const r=buildClientInfoFromHomeAccountId(e.account.homeAccountId);t.addCcsOid(r)}catch(o){this.logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header")}}else if(r&&e.prompt===PromptValue.NONE){this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account"),t.addSid(r);try{const r=buildClientInfoFromHomeAccountId(e.account.homeAccountId);t.addCcsOid(r)}catch(o){this.logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header")}}else if(e.loginHint)this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request"),t.addLoginHint(e.loginHint),t.addCcsUpn(e.loginHint);else if(e.account.username){this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account"),t.addLoginHint(e.account.username);try{const r=buildClientInfoFromHomeAccountId(e.account.homeAccountId);t.addCcsOid(r)}catch(o){this.logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header")}}}else e.loginHint&&(this.logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request"),t.addLoginHint(e.loginHint),t.addCcsUpn(e.loginHint));else this.logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");if(e.nonce&&t.addNonce(e.nonce),e.state&&t.addState(e.state),(e.claims||this.config.authOptions.clientCapabilities&&this.config.authOptions.clientCapabilities.length>0)&&t.addClaims(e.claims,this.config.authOptions.clientCapabilities),this.addExtraQueryParams(e,t),e.nativeBroker&&(t.addNativeBroker(),e.authenticationScheme===AuthenticationScheme.POP)){const r=new PopTokenGenerator(this.cryptoUtils);let n;if(e.popKid)n=this.cryptoUtils.encodeKid(e.popKid);else{n=(await invokeAsync(r.generateCnf.bind(r),PerformanceEvents.PopTokenGenerateCnf,this.logger,this.performanceClient,e.correlationId)(e,this.logger)).reqCnfString}t.addPopToken(n)}return t.createQueryString()}createLogoutUrlQueryString(e){const t=new RequestParameterBuilder;return e.postLogoutRedirectUri&&t.addPostLogoutRedirectUri(e.postLogoutRedirectUri),e.correlationId&&t.addCorrelationId(e.correlationId),e.idTokenHint&&t.addIdTokenHint(e.idTokenHint),e.state&&t.addState(e.state),e.logoutHint&&t.addLogoutHint(e.logoutHint),this.addExtraQueryParams(e,t),t.createQueryString()}addExtraQueryParams(e,t){!(e.extraQueryParameters&&e.extraQueryParameters.hasOwnProperty("instance_aware"))&&this.config.authOptions.instanceAware&&(e.extraQueryParameters=e.extraQueryParameters||{},e.extraQueryParameters.instance_aware="true"),e.extraQueryParameters&&t.addExtraQueryParameters(e.extraQueryParameters)}extractAccountSid(e){return e.idTokenClaims?.sid||null}extractLoginHint(e){return e.idTokenClaims?.login_hint||null}}const DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS=300;class RefreshTokenClient extends BaseClient{constructor(e,t){super(e,t)}async acquireToken(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken,e.correlationId);const t=nowSeconds(),r=await invokeAsync(this.executeTokenRequest.bind(this),PerformanceEvents.RefreshTokenClientExecuteTokenRequest,this.logger,this.performanceClient,e.correlationId)(e,this.authority),n=r.headers?.[HeaderNames.X_MS_REQUEST_ID],o=new ResponseHandler(this.config.authOptions.clientId,this.cacheManager,this.cryptoUtils,this.logger,this.config.serializableCache,this.config.persistencePlugin);return o.validateTokenResponse(r.body),invokeAsync(o.handleServerTokenResponse.bind(o),PerformanceEvents.HandleServerTokenResponse,this.logger,this.performanceClient,e.correlationId)(r.body,this.authority,t,e,void 0,void 0,!0,e.forceCache,n)}async acquireTokenByRefreshToken(e){if(!e)throw createClientConfigurationError(tokenRequestEmpty);if(this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,e.correlationId),!e.account)throw createClientAuthError(noAccountInSilentRequest);if(this.cacheManager.isAppMetadataFOCI(e.account.environment))try{return await invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this),PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,this.logger,this.performanceClient,e.correlationId)(e,!0)}catch(t){const r=t instanceof InteractionRequiredAuthError&&t.errorCode===noTokensFound,n=t instanceof ServerError&&t.errorCode===Errors.INVALID_GRANT_ERROR&&t.subError===Errors.CLIENT_MISMATCH_ERROR;if(r||n)return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this),PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,this.logger,this.performanceClient,e.correlationId)(e,!1);throw t}return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this),PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,this.logger,this.performanceClient,e.correlationId)(e,!1)}async acquireTokenWithCachedRefreshToken(e,t){this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,e.correlationId);const r=invoke(this.cacheManager.getRefreshToken.bind(this.cacheManager),PerformanceEvents.CacheManagerGetRefreshToken,this.logger,this.performanceClient,e.correlationId)(e.account,t,void 0,this.performanceClient,e.correlationId);if(!r)throw createInteractionRequiredAuthError(noTokensFound);if(r.expiresOn&&isTokenExpired(r.expiresOn,e.refreshTokenExpirationOffsetSeconds||300))throw createInteractionRequiredAuthError(refreshTokenExpired);const n={...e,refreshToken:r.secret,authenticationScheme:e.authenticationScheme||AuthenticationScheme.BEARER,ccsCredential:{credential:e.account.homeAccountId,type:CcsCredentialType.HOME_ACCOUNT_ID}};try{return await invokeAsync(this.acquireToken.bind(this),PerformanceEvents.RefreshTokenClientAcquireToken,this.logger,this.performanceClient,e.correlationId)(n)}catch(o){if(o instanceof InteractionRequiredAuthError&&o.subError===badToken){this.logger.verbose("acquireTokenWithRefreshToken: bad refresh token, removing from cache");const e=generateCredentialKey(r);this.cacheManager.removeRefreshToken(e)}throw o}}async executeTokenRequest(e,t){this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest,e.correlationId);const r=this.createTokenQueryParameters(e),n=UrlString.appendQueryString(t.tokenEndpoint,r),o=await invokeAsync(this.createTokenRequestBody.bind(this),PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,this.logger,this.performanceClient,e.correlationId)(e),i=this.createTokenRequestHeaders(e.ccsCredential),a={clientId:e.tokenBodyParameters?.clientId||this.config.authOptions.clientId,authority:t.canonicalAuthority,scopes:e.scopes,claims:e.claims,authenticationScheme:e.authenticationScheme,resourceRequestMethod:e.resourceRequestMethod,resourceRequestUri:e.resourceRequestUri,shrClaims:e.shrClaims,sshKid:e.sshKid};return invokeAsync(this.executePostToTokenEndpoint.bind(this),PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,this.logger,this.performanceClient,e.correlationId)(n,o,i,a,e.correlationId,PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint)}async createTokenRequestBody(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,e.correlationId);const t=e.correlationId,r=new RequestParameterBuilder;if(r.addClientId(e.tokenBodyParameters?.[CLIENT_ID]||this.config.authOptions.clientId),e.redirectUri&&r.addRedirectUri(e.redirectUri),r.addScopes(e.scopes,!0,this.config.authOptions.authority.options.OIDCOptions?.defaultScopes),r.addGrantType(GrantType.REFRESH_TOKEN_GRANT),r.addClientInfo(),r.addLibraryInfo(this.config.libraryInfo),r.addApplicationTelemetry(this.config.telemetry.application),r.addThrottling(),this.serverTelemetryManager&&!isOidcProtocolMode(this.config)&&r.addServerTelemetry(this.serverTelemetryManager),r.addCorrelationId(t),r.addRefreshToken(e.refreshToken),this.config.clientCredentials.clientSecret&&r.addClientSecret(this.config.clientCredentials.clientSecret),this.config.clientCredentials.clientAssertion){const t=this.config.clientCredentials.clientAssertion;r.addClientAssertion(await getClientAssertion(t.assertion,this.config.authOptions.clientId,e.resourceRequestUri)),r.addClientAssertionType(t.assertionType)}if(e.authenticationScheme===AuthenticationScheme.POP){const t=new PopTokenGenerator(this.cryptoUtils,this.performanceClient);let n;if(e.popKid)n=this.cryptoUtils.encodeKid(e.popKid);else{n=(await invokeAsync(t.generateCnf.bind(t),PerformanceEvents.PopTokenGenerateCnf,this.logger,this.performanceClient,e.correlationId)(e,this.logger)).reqCnfString}r.addPopToken(n)}else if(e.authenticationScheme===AuthenticationScheme.SSH){if(!e.sshJwk)throw createClientConfigurationError(missingSshJwk);r.addSshJwk(e.sshJwk)}if((!StringUtils.isEmptyObj(e.claims)||this.config.authOptions.clientCapabilities&&this.config.authOptions.clientCapabilities.length>0)&&r.addClaims(e.claims,this.config.authOptions.clientCapabilities),this.config.systemOptions.preventCorsPreflight&&e.ccsCredential)switch(e.ccsCredential.type){case CcsCredentialType.HOME_ACCOUNT_ID:try{const t=buildClientInfoFromHomeAccountId(e.ccsCredential.credential);r.addCcsOid(t)}catch(n){this.logger.verbose("Could not parse home account ID for CCS Header: "+n)}break;case CcsCredentialType.UPN:r.addCcsUpn(e.ccsCredential.credential)}return e.tokenBodyParameters&&r.addExtraQueryParameters(e.tokenBodyParameters),r.createQueryString()}}class SilentFlowClient extends BaseClient{constructor(e,t){super(e,t)}async acquireToken(e){try{const[t,r]=await this.acquireCachedToken({...e,scopes:e.scopes?.length?e.scopes:[...OIDC_DEFAULT_SCOPES]});if(r===CacheOutcome.PROACTIVELY_REFRESHED){this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.");new RefreshTokenClient(this.config,this.performanceClient).acquireTokenByRefreshToken(e).catch((()=>{}))}return t}catch(t){if(t instanceof ClientAuthError&&t.errorCode===tokenRefreshRequired){return new RefreshTokenClient(this.config,this.performanceClient).acquireTokenByRefreshToken(e)}throw t}}async acquireCachedToken(e){this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientAcquireCachedToken,e.correlationId);let t=CacheOutcome.NOT_APPLICABLE;if(e.forceRefresh||!this.config.cacheOptions.claimsBasedCachingEnabled&&!StringUtils.isEmptyObj(e.claims))throw this.setCacheOutcome(CacheOutcome.FORCE_REFRESH_OR_CLAIMS,e.correlationId),createClientAuthError(tokenRefreshRequired);if(!e.account)throw createClientAuthError(noAccountInSilentRequest);const r=e.account.tenantId||getTenantFromAuthorityString(e.authority),n=this.cacheManager.getTokenKeys(),o=this.cacheManager.getAccessToken(e.account,e,n,r,this.performanceClient,e.correlationId);if(!o)throw this.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN,e.correlationId),createClientAuthError(tokenRefreshRequired);if(wasClockTurnedBack(o.cachedAt)||isTokenExpired(o.expiresOn,this.config.systemOptions.tokenRenewalOffsetSeconds))throw this.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED,e.correlationId),createClientAuthError(tokenRefreshRequired);o.refreshOn&&isTokenExpired(o.refreshOn,0)&&(t=CacheOutcome.PROACTIVELY_REFRESHED);const i=e.authority||this.authority.getPreferredCache(),a={account:this.cacheManager.readAccountFromCache(e.account),accessToken:o,idToken:this.cacheManager.getIdToken(e.account,n,r,this.performanceClient,e.correlationId),refreshToken:null,appMetadata:this.cacheManager.readAppMetadataFromCache(i)};return this.setCacheOutcome(t,e.correlationId),this.config.serverTelemetryManager&&this.config.serverTelemetryManager.incrementCacheHits(),[await invokeAsync(this.generateResultFromCacheRecord.bind(this),PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,this.logger,this.performanceClient,e.correlationId)(a,e),t]}setCacheOutcome(e,t){this.serverTelemetryManager?.setCacheOutcome(e),this.performanceClient?.addFields({cacheOutcome:e},t),e!==CacheOutcome.NOT_APPLICABLE&&this.logger.info(`Token refresh is required due to cache outcome: ${e}`)}async generateResultFromCacheRecord(e,t){let r;if(this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,t.correlationId),e.idToken&&(r=extractTokenClaims(e.idToken.secret,this.config.cryptoInterface.base64Decode)),t.maxAge||0===t.maxAge){const e=r?.auth_time;if(!e)throw createClientAuthError(authTimeNotFound);checkMaxAge(e,t.maxAge)}return ResponseHandler.generateAuthenticationResult(this.cryptoUtils,this.authority,e,!0,t,r)}}const StubbedNetworkModule={sendGetRequestAsync:()=>Promise.reject(createClientAuthError(methodNotImplemented)),sendPostRequestAsync:()=>Promise.reject(createClientAuthError(methodNotImplemented))};class AuthenticationHeaderParser{constructor(e){this.headers=e}getShrNonce(){const e=this.headers[HeaderNames.AuthenticationInfo];if(e){const t=this.parseChallenges(e);if(t.nextnonce)return t.nextnonce;throw createClientConfigurationError(invalidAuthenticationHeader)}const t=this.headers[HeaderNames.WWWAuthenticate];if(t){const e=this.parseChallenges(t);if(e.nonce)return e.nonce;throw createClientConfigurationError(invalidAuthenticationHeader)}throw createClientConfigurationError(missingNonceAuthenticationHeader)}parseChallenges(e){const t=e.indexOf(" "),r=e.substr(t+1).split(","),n={};return r.forEach((e=>{const[t,r]=e.split("=");n[t]=unescape(r.replace(/['"]+/g,Constants.EMPTY_STRING))})),n}}const skuGroupSeparator=",",skuValueSeparator="|";function makeExtraSkuString(e){const{skus:t,libraryName:r,libraryVersion:n,extensionName:o,extensionVersion:i}=e,a=new Map([[0,[r,n]],[2,[o,i]]]);let s=[];if(t?.length){if(s=t.split(","),s.length<4)return t}else s=Array.from({length:4},(()=>"|"));return a.forEach(((e,t)=>{2===e.length&&e[0]?.length&&e[1]?.length&&setSku({skuArr:s,index:t,skuName:e[0],skuVersion:e[1]})})),s.join(",")}function setSku(e){const{skuArr:t,index:r,skuName:n,skuVersion:o}=e;r>=t.length||(t[r]=[n,o].join("|"))}class ServerTelemetryManager{constructor(e,t){this.cacheOutcome=CacheOutcome.NOT_APPLICABLE,this.cacheManager=t,this.apiId=e.apiId,this.correlationId=e.correlationId,this.wrapperSKU=e.wrapperSKU||Constants.EMPTY_STRING,this.wrapperVer=e.wrapperVer||Constants.EMPTY_STRING,this.telemetryCacheKey=SERVER_TELEM_CONSTANTS.CACHE_KEY+Separators.CACHE_KEY_SEPARATOR+e.clientId}generateCurrentRequestHeaderValue(){const e=`${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`,t=[this.wrapperSKU,this.wrapperVer],r=this.getNativeBrokerErrorCode();r?.length&&t.push(`broker_error=${r}`);const n=t.join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR),o=[e,this.getRegionDiscoveryFields()].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);return[SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,o,n].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR)}generateLastRequestHeaderValue(){const e=this.getLastRequests(),t=ServerTelemetryManager.maxErrorsToSend(e),r=e.failedRequests.slice(0,2*t).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR),n=e.errors.slice(0,t).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR),o=e.errors.length,i=[o,t<o?SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE:SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);return[SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,e.cacheHits,r,n,i].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR)}cacheFailedRequest(e){const t=this.getLastRequests();t.errors.length>=SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS&&(t.failedRequests.shift(),t.failedRequests.shift(),t.errors.shift()),t.failedRequests.push(this.apiId,this.correlationId),e instanceof Error&&e&&e.toString()?e instanceof AuthError?e.subError?t.errors.push(e.subError):e.errorCode?t.errors.push(e.errorCode):t.errors.push(e.toString()):t.errors.push(e.toString()):t.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR),this.cacheManager.setServerTelemetry(this.telemetryCacheKey,t)}incrementCacheHits(){const e=this.getLastRequests();return e.cacheHits+=1,this.cacheManager.setServerTelemetry(this.telemetryCacheKey,e),e.cacheHits}getLastRequests(){return this.cacheManager.getServerTelemetry(this.telemetryCacheKey)||{failedRequests:[],errors:[],cacheHits:0}}clearTelemetryCache(){const e=this.getLastRequests(),t=ServerTelemetryManager.maxErrorsToSend(e);if(t===e.errors.length)this.cacheManager.removeItem(this.telemetryCacheKey);else{const r={failedRequests:e.failedRequests.slice(2*t),errors:e.errors.slice(t),cacheHits:0};this.cacheManager.setServerTelemetry(this.telemetryCacheKey,r)}}static maxErrorsToSend(e){let t,r=0,n=0;const o=e.errors.length;for(t=0;t<o;t++){const o=e.failedRequests[2*t]||Constants.EMPTY_STRING,i=e.failedRequests[2*t+1]||Constants.EMPTY_STRING,a=e.errors[t]||Constants.EMPTY_STRING;if(n+=o.toString().length+i.toString().length+a.length+3,!(n<SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES))break;r+=1}return r}getRegionDiscoveryFields(){const e=[];return e.push(this.regionUsed||Constants.EMPTY_STRING),e.push(this.regionSource||Constants.EMPTY_STRING),e.push(this.regionOutcome||Constants.EMPTY_STRING),e.join(",")}updateRegionDiscoveryMetadata(e){this.regionUsed=e.region_used,this.regionSource=e.region_source,this.regionOutcome=e.region_outcome}setCacheOutcome(e){this.cacheOutcome=e}setNativeBrokerErrorCode(e){const t=this.getLastRequests();t.nativeBrokerErrorCode=e,this.cacheManager.setServerTelemetry(this.telemetryCacheKey,t)}getNativeBrokerErrorCode(){return this.getLastRequests().nativeBrokerErrorCode}clearNativeBrokerErrorCode(){const e=this.getLastRequests();delete e.nativeBrokerErrorCode,this.cacheManager.setServerTelemetry(this.telemetryCacheKey,e)}static makeExtraSkuString(e){return makeExtraSkuString(e)}}const missingKidError="missing_kid_error",missingAlgError="missing_alg_error",JoseHeaderErrorMessages={[missingKidError]:"The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.",[missingAlgError]:"The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided."};class JoseHeaderError extends AuthError{constructor(e,t){super(e,t),this.name="JoseHeaderError",Object.setPrototypeOf(this,JoseHeaderError.prototype)}}function createJoseHeaderError(e){return new JoseHeaderError(e,JoseHeaderErrorMessages[e])}class JoseHeader{constructor(e){this.typ=e.typ,this.alg=e.alg,this.kid=e.kid}static getShrHeaderString(e){if(!e.kid)throw createJoseHeaderError(missingKidError);if(!e.alg)throw createJoseHeaderError(missingAlgError);const t=new JoseHeader({typ:e.typ||JsonWebTokenTypes.Pop,kid:e.kid,alg:e.alg});return JSON.stringify(t)}}class StubPerformanceMeasurement{startMeasurement(){}endMeasurement(){}flushMeasurement(){return null}}class StubPerformanceClient{generateId(){return"callback-id"}startMeasurement(e,t){return{end:()=>null,discard:()=>{},add:()=>{},increment:()=>{},event:{eventId:this.generateId(),status:PerformanceEventStatus.InProgress,authority:"",libraryName:"",libraryVersion:"",clientId:"",name:e,startTimeMs:Date.now(),correlationId:t||""},measurement:new StubPerformanceMeasurement}}startPerformanceMeasurement(){return new StubPerformanceMeasurement}calculateQueuedTime(){return 0}addQueueMeasurement(){}setPreQueueTime(){}endMeasurement(){return null}discardMeasurements(){}removePerformanceCallback(){return!0}addPerformanceCallback(){return""}emitEvents(){}addFields(){}incrementFields(){}cacheEventByCorrelationId(){}}function startContext(e,t,r){r&&r.push({name:t.get(e.name)||e.name})}function endContext(e,t,r,n){if(!r?.length)return;const o=e=>e.length?e[e.length-1]:void 0,i=t.get(e.name)||e.name,a=o(r);if(a?.name!==i)return;const s=r?.pop();if(!s)return;const c=n instanceof AuthError?n.errorCode:n instanceof Error?n.name:void 0,l=n instanceof AuthError?n.subError:void 0;c&&s.childErr!==c&&(s.err=c,l&&(s.subErr=l)),delete s.name,delete s.childErr;const d={...s,dur:e.durationMs};e.success||(d.fail=1);const u=o(r);if(!u)return{[i]:d};let h;if(c&&(u.childErr=c),u[i]){const e=Object.keys(u).filter((e=>e.startsWith(i))).length;h=`${i}_${e+1}`}else h=i;return u[h]=d,u}function addError(e,t,r,n=5){if(e instanceof Error)return e instanceof AuthError?(r.errorCode=e.errorCode,r.subErrorCode=e.subError,void((e instanceof ServerError||e instanceof InteractionRequiredAuthError)&&(r.serverErrorNo=e.errorNo))):void(e instanceof CacheError?r.errorCode=e.errorCode:r.errorStack?.length?t.trace("PerformanceClient.addErrorStack: Stack already exist",r.correlationId):e.stack?.length?(e.stack&&(r.errorStack=compactStack(e.stack,n)),r.errorName=e.name):t.trace("PerformanceClient.addErrorStack: Input stack is empty",r.correlationId));t.trace("PerformanceClient.addErrorStack: Input error is not instance of Error",r.correlationId)}function compactStack(e,t){if(t<0)return[];const r=e.split("\n")||[];if(r.length<2)return[];const n=[];for(let o=Math.max(r.length-t-1,1);o<r.length;o++){const e=r[o];if(n.length>=t)break;n.push(compactStackLine(e))}return n}function compactStackLine(e){const t=e.lastIndexOf(" ")+1;if(t<1)return e;const r=e.substring(t);let n=r.lastIndexOf("/");return n=n<0?r.lastIndexOf("\\"):n,n>=0?(e.substring(0,t)+"("+r.substring(n+1)+(")"===r.charAt(r.length-1)?"":")")).trimStart():e.trimStart()}class PerformanceClient{constructor(e,t,r,n,o,i,a,s){this.authority=t,this.libraryName=n,this.libraryVersion=o,this.applicationTelemetry=i,this.clientId=e,this.logger=r,this.callbacks=new Map,this.eventsByCorrelationId=new Map,this.eventStack=new Map,this.queueMeasurements=new Map,this.preQueueTimeByCorrelationId=new Map,this.intFields=a||new Set;for(const c of IntFields)this.intFields.add(c);this.abbreviations=s||new Map;for(const[c,l]of PerformanceEventAbbreviations)this.abbreviations.set(c,l)}startPerformanceMeasurement(e,t){return{}}getPreQueueTime(e,t){const r=this.preQueueTimeByCorrelationId.get(t);if(r){if(r.name===e)return r.time;this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${e}, unable to add queue measurement`)}else this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${t}, unable to add queue measurement`)}calculateQueuedTime(e,t){return e<1?(this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${e}`),0):t<1?(this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${t}`),0):t<e?(this.logger.trace("PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved"),0):t-e}addQueueMeasurement(e,t,r,n){if(!t)return void this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${e}, cannot add queue measurement`);if(0===r)this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${e} is ${r}`);else if(!r)return void this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${e}`);const o={eventName:e,queueTime:n?0:r,manuallyCompleted:n},i=this.queueMeasurements.get(t);if(i)i.push(o),this.queueMeasurements.set(t,i);else{this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${t} to queue measurements`);const e=[o];this.queueMeasurements.set(t,e)}this.preQueueTimeByCorrelationId.delete(t)}startMeasurement(e,t){const r=t||this.generateId();t||this.logger.info(`PerformanceClient: No correlation id provided for ${e}, generating`,r),this.logger.trace(`PerformanceClient: Performance measurement started for ${e}`,r);const n={eventId:this.generateId(),status:PerformanceEventStatus.InProgress,authority:this.authority,libraryName:this.libraryName,libraryVersion:this.libraryVersion,clientId:this.clientId,name:e,startTimeMs:Date.now(),correlationId:r,appName:this.applicationTelemetry?.appName,appVersion:this.applicationTelemetry?.appVersion};return this.cacheEventByCorrelationId(n),startContext(n,this.abbreviations,this.eventStack.get(r)),{end:(e,t)=>this.endMeasurement({...n,...e},t),discard:()=>this.discardMeasurements(n.correlationId),add:e=>this.addFields(e,n.correlationId),increment:e=>this.incrementFields(e,n.correlationId),event:n,measurement:new StubPerformanceMeasurement}}endMeasurement(e,t){const r=this.eventsByCorrelationId.get(e.correlationId);if(!r)return this.logger.trace(`PerformanceClient: Measurement not found for ${e.eventId}`,e.correlationId),null;const n=e.eventId===r.eventId;let o={totalQueueTime:0,totalQueueCount:0,manuallyCompletedCount:0};e.durationMs=Math.round(e.durationMs||this.getDurationMs(e.startTimeMs));const i=JSON.stringify(endContext(e,this.abbreviations,this.eventStack.get(r.correlationId),t));if(n?(o=this.getQueueInfo(e.correlationId),this.discardMeasurements(r.correlationId)):r.incompleteSubMeasurements?.delete(e.eventId),this.logger.trace(`PerformanceClient: Performance measurement ended for ${e.name}: ${e.durationMs} ms`,e.correlationId),!n)return r[e.name+"DurationMs"]=Math.floor(e.durationMs),{...r};t&&addError(t,this.logger,r);let a={...r,...e},s=0;return a.incompleteSubMeasurements?.forEach((t=>{this.logger.trace(`PerformanceClient: Incomplete submeasurement ${t.name} found for ${e.name}`,a.correlationId),s++})),a.incompleteSubMeasurements=void 0,a={...a,queuedTimeMs:o.totalQueueTime,queuedCount:o.totalQueueCount,queuedManuallyCompletedCount:o.manuallyCompletedCount,status:PerformanceEventStatus.Completed,incompleteSubsCount:s,context:i},this.truncateIntegralFields(a),this.emitEvents([a],e.correlationId),a}addFields(e,t){this.logger.trace("PerformanceClient: Updating static fields");const r=this.eventsByCorrelationId.get(t);r?this.eventsByCorrelationId.set(t,{...r,...e}):this.logger.trace("PerformanceClient: Event not found for",t)}incrementFields(e,t){this.logger.trace("PerformanceClient: Updating counters");const r=this.eventsByCorrelationId.get(t);if(r)for(const n in e){if(r.hasOwnProperty(n)){if(isNaN(Number(r[n])))return}else r[n]=0;r[n]+=e[n]}else this.logger.trace("PerformanceClient: Event not found for",t)}cacheEventByCorrelationId(e){const t=this.eventsByCorrelationId.get(e.correlationId);t?(this.logger.trace(`PerformanceClient: Performance measurement for ${e.name} added/updated`,e.correlationId),t.incompleteSubMeasurements=t.incompleteSubMeasurements||new Map,t.incompleteSubMeasurements.set(e.eventId,{name:e.name,startTimeMs:e.startTimeMs})):(this.logger.trace(`PerformanceClient: Performance measurement for ${e.name} started`,e.correlationId),this.eventsByCorrelationId.set(e.correlationId,{...e}),this.eventStack.set(e.correlationId,[]))}getQueueInfo(e){const t=this.queueMeasurements.get(e);t||this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${e}`);let r=0,n=0,o=0;return t?.forEach((e=>{r+=e.queueTime,n++,o+=e.manuallyCompleted?1:0})),{totalQueueTime:r,totalQueueCount:n,manuallyCompletedCount:o}}discardMeasurements(e){this.logger.trace("PerformanceClient: Performance measurements discarded",e),this.eventsByCorrelationId.delete(e),this.logger.trace("PerformanceClient: QueueMeasurements discarded",e),this.queueMeasurements.delete(e),this.logger.trace("PerformanceClient: Pre-queue times discarded",e),this.preQueueTimeByCorrelationId.delete(e),this.logger.trace("PerformanceClient: Event stack discarded",e),this.eventStack.delete(e)}addPerformanceCallback(e){for(const[r,n]of this.callbacks)if(n.toString()===e.toString())return this.logger.warning(`PerformanceClient: Performance callback is already registered with id: ${r}`),r;const t=this.generateId();return this.callbacks.set(t,e),this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${t}`),t}removePerformanceCallback(e){const t=this.callbacks.delete(e);return t?this.logger.verbose(`PerformanceClient: Performance callback ${e} removed.`):this.logger.verbose(`PerformanceClient: Performance callback ${e} not removed.`),t}emitEvents(e,t){this.logger.verbose("PerformanceClient: Emitting performance events",t),this.callbacks.forEach(((r,n)=>{this.logger.trace(`PerformanceClient: Emitting event to callback ${n}`,t),r.apply(null,[e])}))}truncateIntegralFields(e){this.intFields.forEach((t=>{t in e&&"number"===typeof e[t]&&(e[t]=Math.floor(e[t]))}))}getDurationMs(e){const t=Date.now()-e;return t<0?t:0}}const pkceNotCreated="pkce_not_created",cryptoNonExistent="crypto_nonexistent",emptyNavigateUri="empty_navigate_uri",hashEmptyError="hash_empty_error",noStateInHash="no_state_in_hash",hashDoesNotContainKnownProperties="hash_does_not_contain_known_properties",unableToParseState="unable_to_parse_state",stateInteractionTypeMismatch="state_interaction_type_mismatch",interactionInProgress="interaction_in_progress",popupWindowError="popup_window_error",emptyWindowError="empty_window_error",userCancelled="user_cancelled",monitorPopupTimeout="monitor_popup_timeout",monitorWindowTimeout="monitor_window_timeout",redirectInIframe="redirect_in_iframe",blockIframeReload="block_iframe_reload",blockNestedPopups="block_nested_popups",iframeClosedPrematurely="iframe_closed_prematurely",silentLogoutUnsupported="silent_logout_unsupported",noAccountError="no_account_error",silentPromptValueError="silent_prompt_value_error",noTokenRequestCacheError="no_token_request_cache_error",unableToParseTokenRequestCacheError="unable_to_parse_token_request_cache_error",noCachedAuthorityError="no_cached_authority_error",authRequestNotSetError="auth_request_not_set_error",invalidCacheType="invalid_cache_type",nonBrowserEnvironment="non_browser_environment",databaseNotOpen="database_not_open",noNetworkConnectivity="no_network_connectivity",postRequestFailed="post_request_failed",getRequestFailed="get_request_failed",failedToParseResponse="failed_to_parse_response",unableToLoadToken="unable_to_load_token",cryptoKeyNotFound="crypto_key_not_found",authCodeRequired="auth_code_required",authCodeOrNativeAccountIdRequired="auth_code_or_nativeAccountId_required",spaCodeAndNativeAccountIdPresent="spa_code_and_nativeAccountId_present",databaseUnavailable="database_unavailable",unableToAcquireTokenFromNativePlatform="unable_to_acquire_token_from_native_platform",nativeHandshakeTimeout="native_handshake_timeout",nativeExtensionNotInstalled="native_extension_not_installed",nativeConnectionNotEstablished="native_connection_not_established",uninitializedPublicClientApplication="uninitialized_public_client_application",nativePromptNotSupported="native_prompt_not_supported",invalidBase64String="invalid_base64_string",invalidPopTokenRequest="invalid_pop_token_request";var BrowserAuthErrorCodes=Object.freeze({__proto__:null,authCodeOrNativeAccountIdRequired:authCodeOrNativeAccountIdRequired,authCodeRequired:authCodeRequired,authRequestNotSetError:authRequestNotSetError,blockIframeReload:blockIframeReload,blockNestedPopups:blockNestedPopups,cryptoKeyNotFound:cryptoKeyNotFound,cryptoNonExistent:cryptoNonExistent,databaseNotOpen:databaseNotOpen,databaseUnavailable:databaseUnavailable,emptyNavigateUri:emptyNavigateUri,emptyWindowError:emptyWindowError,failedToParseResponse:failedToParseResponse,getRequestFailed:getRequestFailed,hashDoesNotContainKnownProperties:hashDoesNotContainKnownProperties,hashEmptyError:hashEmptyError,iframeClosedPrematurely:iframeClosedPrematurely,interactionInProgress:interactionInProgress,invalidBase64String:invalidBase64String,invalidCacheType:invalidCacheType,invalidPopTokenRequest:invalidPopTokenRequest,monitorPopupTimeout:monitorPopupTimeout,monitorWindowTimeout:monitorWindowTimeout,nativeConnectionNotEstablished:nativeConnectionNotEstablished,nativeExtensionNotInstalled:nativeExtensionNotInstalled,nativeHandshakeTimeout:nativeHandshakeTimeout,nativePromptNotSupported:nativePromptNotSupported,noAccountError:noAccountError,noCachedAuthorityError:noCachedAuthorityError,noNetworkConnectivity:noNetworkConnectivity,noStateInHash:noStateInHash,noTokenRequestCacheError:noTokenRequestCacheError,nonBrowserEnvironment:nonBrowserEnvironment,pkceNotCreated:pkceNotCreated,popupWindowError:popupWindowError,postRequestFailed:postRequestFailed,redirectInIframe:redirectInIframe,silentLogoutUnsupported:silentLogoutUnsupported,silentPromptValueError:silentPromptValueError,spaCodeAndNativeAccountIdPresent:spaCodeAndNativeAccountIdPresent,stateInteractionTypeMismatch:stateInteractionTypeMismatch,unableToAcquireTokenFromNativePlatform:unableToAcquireTokenFromNativePlatform,unableToLoadToken:unableToLoadToken,unableToParseState:unableToParseState,unableToParseTokenRequestCacheError:unableToParseTokenRequestCacheError,uninitializedPublicClientApplication:uninitializedPublicClientApplication,userCancelled:userCancelled});const ErrorLink="For more visit: aka.ms/msaljs/browser-errors",BrowserAuthErrorMessages={[pkceNotCreated]:"The PKCE code challenge and verifier could not be generated.",[cryptoNonExistent]:"The crypto object or function is not available.",[emptyNavigateUri]:"Navigation URI is empty. Please check stack trace for more info.",[hashEmptyError]:`Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,[noStateInHash]:"Hash does not contain state. Please verify that the request originated from msal.",[hashDoesNotContainKnownProperties]:`Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,[unableToParseState]:"Unable to parse state. Please verify that the request originated from msal.",[stateInteractionTypeMismatch]:"Hash contains state but the interaction type does not match the caller.",[interactionInProgress]:`Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,[popupWindowError]:"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.",[emptyWindowError]:"window.open returned null or undefined window object.",[userCancelled]:"User cancelled the flow.",[monitorPopupTimeout]:`Token acquisition in popup failed due to timeout.  ${ErrorLink}`,[monitorWindowTimeout]:`Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,[redirectInIframe]:"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.",[blockIframeReload]:`Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,[blockNestedPopups]:"Request was blocked inside a popup because MSAL detected it was running in a popup.",[iframeClosedPrematurely]:"The iframe being monitored was closed prematurely.",[silentLogoutUnsupported]:"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.",[noAccountError]:"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.",[silentPromptValueError]:"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.",[noTokenRequestCacheError]:"No token request found in cache.",[unableToParseTokenRequestCacheError]:"The cached token request could not be parsed.",[noCachedAuthorityError]:"No cached authority found.",[authRequestNotSetError]:"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler",[invalidCacheType]:"Invalid cache type",[nonBrowserEnvironment]:"Login and token requests are not supported in non-browser environments.",[databaseNotOpen]:"Database is not open!",[noNetworkConnectivity]:"No network connectivity. Check your internet connection.",[postRequestFailed]:"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'",[getRequestFailed]:"Network request failed. Please check the network trace to determine root cause.",[failedToParseResponse]:"Failed to parse network response. Check network trace.",[unableToLoadToken]:"Error loading token to cache.",[cryptoKeyNotFound]:"Cryptographic Key or Keypair not found in browser storage.",[authCodeRequired]:"An authorization code must be provided (as the `code` property on the request) to this flow.",[authCodeOrNativeAccountIdRequired]:"An authorization code or nativeAccountId must be provided to this flow.",[spaCodeAndNativeAccountIdPresent]:"Request cannot contain both spa code and native account id.",[databaseUnavailable]:"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.",[unableToAcquireTokenFromNativePlatform]:`Unable to acquire token from native platform.  ${ErrorLink}`,[nativeHandshakeTimeout]:"Timed out while attempting to establish connection to browser extension",[nativeExtensionNotInstalled]:"Native extension is not installed. If you think this is a mistake call the initialize function.",[nativeConnectionNotEstablished]:`Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,[uninitializedPublicClientApplication]:`You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,[nativePromptNotSupported]:"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.",[invalidBase64String]:"Invalid base64 encoded string.",[invalidPopTokenRequest]:"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true."},BrowserAuthErrorMessage={pkceNotGenerated:{code:pkceNotCreated,desc:BrowserAuthErrorMessages[pkceNotCreated]},cryptoDoesNotExist:{code:cryptoNonExistent,desc:BrowserAuthErrorMessages[cryptoNonExistent]},emptyNavigateUriError:{code:emptyNavigateUri,desc:BrowserAuthErrorMessages[emptyNavigateUri]},hashEmptyError:{code:hashEmptyError,desc:BrowserAuthErrorMessages[hashEmptyError]},hashDoesNotContainStateError:{code:noStateInHash,desc:BrowserAuthErrorMessages[noStateInHash]},hashDoesNotContainKnownPropertiesError:{code:hashDoesNotContainKnownProperties,desc:BrowserAuthErrorMessages[hashDoesNotContainKnownProperties]},unableToParseStateError:{code:unableToParseState,desc:BrowserAuthErrorMessages[unableToParseState]},stateInteractionTypeMismatchError:{code:stateInteractionTypeMismatch,desc:BrowserAuthErrorMessages[stateInteractionTypeMismatch]},interactionInProgress:{code:interactionInProgress,desc:BrowserAuthErrorMessages[interactionInProgress]},popupWindowError:{code:popupWindowError,desc:BrowserAuthErrorMessages[popupWindowError]},emptyWindowError:{code:emptyWindowError,desc:BrowserAuthErrorMessages[emptyWindowError]},userCancelledError:{code:userCancelled,desc:BrowserAuthErrorMessages[userCancelled]},monitorPopupTimeoutError:{code:monitorPopupTimeout,desc:BrowserAuthErrorMessages[monitorPopupTimeout]},monitorIframeTimeoutError:{code:monitorWindowTimeout,desc:BrowserAuthErrorMessages[monitorWindowTimeout]},redirectInIframeError:{code:redirectInIframe,desc:BrowserAuthErrorMessages[redirectInIframe]},blockTokenRequestsInHiddenIframeError:{code:blockIframeReload,desc:BrowserAuthErrorMessages[blockIframeReload]},blockAcquireTokenInPopupsError:{code:blockNestedPopups,desc:BrowserAuthErrorMessages[blockNestedPopups]},iframeClosedPrematurelyError:{code:iframeClosedPrematurely,desc:BrowserAuthErrorMessages[iframeClosedPrematurely]},silentLogoutUnsupportedError:{code:silentLogoutUnsupported,desc:BrowserAuthErrorMessages[silentLogoutUnsupported]},noAccountError:{code:noAccountError,desc:BrowserAuthErrorMessages[noAccountError]},silentPromptValueError:{code:silentPromptValueError,desc:BrowserAuthErrorMessages[silentPromptValueError]},noTokenRequestCacheError:{code:noTokenRequestCacheError,desc:BrowserAuthErrorMessages[noTokenRequestCacheError]},unableToParseTokenRequestCacheError:{code:unableToParseTokenRequestCacheError,desc:BrowserAuthErrorMessages[unableToParseTokenRequestCacheError]},noCachedAuthorityError:{code:noCachedAuthorityError,desc:BrowserAuthErrorMessages[noCachedAuthorityError]},authRequestNotSet:{code:authRequestNotSetError,desc:BrowserAuthErrorMessages[authRequestNotSetError]},invalidCacheType:{code:invalidCacheType,desc:BrowserAuthErrorMessages[invalidCacheType]},notInBrowserEnvironment:{code:nonBrowserEnvironment,desc:BrowserAuthErrorMessages[nonBrowserEnvironment]},databaseNotOpen:{code:databaseNotOpen,desc:BrowserAuthErrorMessages[databaseNotOpen]},noNetworkConnectivity:{code:noNetworkConnectivity,desc:BrowserAuthErrorMessages[noNetworkConnectivity]},postRequestFailed:{code:postRequestFailed,desc:BrowserAuthErrorMessages[postRequestFailed]},getRequestFailed:{code:getRequestFailed,desc:BrowserAuthErrorMessages[getRequestFailed]},failedToParseNetworkResponse:{code:failedToParseResponse,desc:BrowserAuthErrorMessages[failedToParseResponse]},unableToLoadTokenError:{code:unableToLoadToken,desc:BrowserAuthErrorMessages[unableToLoadToken]},signingKeyNotFoundInStorage:{code:cryptoKeyNotFound,desc:BrowserAuthErrorMessages[cryptoKeyNotFound]},authCodeRequired:{code:authCodeRequired,desc:BrowserAuthErrorMessages[authCodeRequired]},authCodeOrNativeAccountRequired:{code:authCodeOrNativeAccountIdRequired,desc:BrowserAuthErrorMessages[authCodeOrNativeAccountIdRequired]},spaCodeAndNativeAccountPresent:{code:spaCodeAndNativeAccountIdPresent,desc:BrowserAuthErrorMessages[spaCodeAndNativeAccountIdPresent]},databaseUnavailable:{code:databaseUnavailable,desc:BrowserAuthErrorMessages[databaseUnavailable]},unableToAcquireTokenFromNativePlatform:{code:unableToAcquireTokenFromNativePlatform,desc:BrowserAuthErrorMessages[unableToAcquireTokenFromNativePlatform]},nativeHandshakeTimeout:{code:nativeHandshakeTimeout,desc:BrowserAuthErrorMessages[nativeHandshakeTimeout]},nativeExtensionNotInstalled:{code:nativeExtensionNotInstalled,desc:BrowserAuthErrorMessages[nativeExtensionNotInstalled]},nativeConnectionNotEstablished:{code:nativeConnectionNotEstablished,desc:BrowserAuthErrorMessages[nativeConnectionNotEstablished]},uninitializedPublicClientApplication:{code:uninitializedPublicClientApplication,desc:BrowserAuthErrorMessages[uninitializedPublicClientApplication]},nativePromptNotSupported:{code:nativePromptNotSupported,desc:BrowserAuthErrorMessages[nativePromptNotSupported]},invalidBase64StringError:{code:invalidBase64String,desc:BrowserAuthErrorMessages[invalidBase64String]},invalidPopTokenRequest:{code:invalidPopTokenRequest,desc:BrowserAuthErrorMessages[invalidPopTokenRequest]}};class BrowserAuthError extends AuthError{constructor(e){super(e,BrowserAuthErrorMessages[e]),Object.setPrototypeOf(this,BrowserAuthError.prototype),this.name="BrowserAuthError"}}function createBrowserAuthError(e){return new BrowserAuthError(e)}const BrowserConstants={INTERACTION_IN_PROGRESS_VALUE:"interaction_in_progress",INVALID_GRANT_ERROR:"invalid_grant",POPUP_WIDTH:483,POPUP_HEIGHT:600,POPUP_NAME_PREFIX:"msal",DEFAULT_POLL_INTERVAL_MS:30,MSAL_SKU:"msal.js.browser"},NativeConstants={CHANNEL_ID:"53ee284d-920a-4b59-9d30-a60315b26836",PREFERRED_EXTENSION_ID:"ppnbnpeolgkicgegkbkbjmhlideopiji",MATS_TELEMETRY:"MATS"},NativeExtensionMethod={HandshakeRequest:"Handshake",HandshakeResponse:"HandshakeResponse",GetToken:"GetToken",Response:"Response"},BrowserCacheLocation={LocalStorage:"localStorage",SessionStorage:"sessionStorage",MemoryStorage:"memoryStorage"},HTTP_REQUEST_TYPE={GET:"GET",POST:"POST"},TemporaryCacheKeys={AUTHORITY:"authority",ACQUIRE_TOKEN_ACCOUNT:"acquireToken.account",SESSION_STATE:"session.state",REQUEST_STATE:"request.state",NONCE_IDTOKEN:"nonce.id_token",ORIGIN_URI:"request.origin",RENEW_STATUS:"token.renew.status",URL_HASH:"urlHash",REQUEST_PARAMS:"request.params",SCOPES:"scopes",INTERACTION_STATUS_KEY:"interaction.status",CCS_CREDENTIAL:"ccs.credential",CORRELATION_ID:"request.correlationId",NATIVE_REQUEST:"request.native",REDIRECT_CONTEXT:"request.redirect.context"},StaticCacheKeys={ACCOUNT_KEYS:"msal.account.keys",TOKEN_KEYS:"msal.token.keys"},InMemoryCacheKeys={WRAPPER_SKU:"wrapper.sku",WRAPPER_VER:"wrapper.version"},ApiId={acquireTokenRedirect:861,acquireTokenPopup:862,ssoSilent:863,acquireTokenSilent_authCode:864,handleRedirectPromise:865,acquireTokenByCode:866,acquireTokenSilent_silentFlow:61,logout:961,logoutPopup:962};exports.InteractionType=void 0,function(e){e.Redirect="redirect",e.Popup="popup",e.Silent="silent",e.None="none"}(exports.InteractionType||(exports.InteractionType={}));const InteractionStatus={Startup:"startup",Login:"login",Logout:"logout",AcquireToken:"acquireToken",SsoSilent:"ssoSilent",HandleRedirect:"handleRedirect",None:"none"},DEFAULT_REQUEST={scopes:OIDC_DEFAULT_SCOPES},KEY_FORMAT_JWK="jwk",WrapperSKU={React:"@azure/msal-react",Angular:"@azure/msal-angular"},DB_NAME="msal.db",DB_VERSION=1,DB_TABLE_NAME=`${DB_NAME}.keys`,CacheLookupPolicy={Default:0,AccessToken:1,AccessTokenAndRefreshToken:2,RefreshToken:3,RefreshTokenAndNetwork:4,Skip:5},iFrameRenewalPolicies=[CacheLookupPolicy.Default,CacheLookupPolicy.Skip,CacheLookupPolicy.RefreshTokenAndNetwork],LOG_LEVEL_CACHE_KEY="msal.browser.log.level",LOG_PII_CACHE_KEY="msal.browser.log.pii",BROWSER_PERF_ENABLED_KEY="msal.browser.performance.enabled";function urlEncode(e){return encodeURIComponent(base64Encode(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_"))}function urlEncodeArr(e){return base64EncArr(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function base64Encode(e){return base64EncArr((new TextEncoder).encode(e))}function base64EncArr(e){const t=Array.from(e,(e=>String.fromCodePoint(e))).join("");return btoa(t)}const PKCS1_V15_KEYGEN_ALG="RSASSA-PKCS1-v1_5",S256_HASH_ALG="SHA-256",MODULUS_LENGTH=2048,PUBLIC_EXPONENT=new Uint8Array([1,0,1]),UUID_CHARS="0123456789abcdef",UINT32_ARR=new Uint32Array(1),keygenAlgorithmOptions={name:"RSASSA-PKCS1-v1_5",hash:"SHA-256",modulusLength:2048,publicExponent:PUBLIC_EXPONENT};function validateCryptoAvailable(e){if(!("crypto"in window))throw e.error("BrowserCrypto: crypto interface is unavailable"),createBrowserAuthError(cryptoNonExistent);e.verbose("BrowserCrypto: modern crypto interface available")}async function sha256Digest(e,t,r){t?.addQueueMeasurement(PerformanceEvents.Sha256Digest,r);const n=(new TextEncoder).encode(e);return window.crypto.subtle.digest("SHA-256",n)}function getRandomValues(e){return window.crypto.getRandomValues(e)}function getRandomUint32(){return window.crypto.getRandomValues(UINT32_ARR),UINT32_ARR[0]}function createNewGuid(){const e=Date.now(),t=1024*getRandomUint32()+(1023&getRandomUint32()),r=new Uint8Array(16),n=Math.trunc(t/2**30),o=t&2**30-1,i=getRandomUint32();r[0]=e/2**40,r[1]=e/2**32,r[2]=e/2**24,r[3]=e/65536,r[4]=e/256,r[5]=e,r[6]=112|n>>>8,r[7]=n,r[8]=128|o>>>24,r[9]=o>>>16,r[10]=o>>>8,r[11]=o,r[12]=i>>>24,r[13]=i>>>16,r[14]=i>>>8,r[15]=i;let a="";for(let s=0;s<r.length;s++)a+=UUID_CHARS.charAt(r[s]>>>4),a+=UUID_CHARS.charAt(15&r[s]),3!==s&&5!==s&&7!==s&&9!==s||(a+="-");return a}async function generateKeyPair(e,t){return window.crypto.subtle.generateKey(keygenAlgorithmOptions,e,t)}async function exportJwk(e){return window.crypto.subtle.exportKey("jwk",e)}async function importJwk(e,t,r){return window.crypto.subtle.importKey("jwk",e,keygenAlgorithmOptions,t,r)}async function sign(e,t){return window.crypto.subtle.sign(keygenAlgorithmOptions,e,t)}async function hashString(e){const t=await sha256Digest(e);return urlEncodeArr(new Uint8Array(t))}const storageNotSupported="storage_not_supported",stubbedPublicClientApplicationCalled="stubbed_public_client_application_called",inMemRedirectUnavailable="in_mem_redirect_unavailable";var BrowserConfigurationAuthErrorCodes=Object.freeze({__proto__:null,inMemRedirectUnavailable:inMemRedirectUnavailable,storageNotSupported:storageNotSupported,stubbedPublicClientApplicationCalled:stubbedPublicClientApplicationCalled});const BrowserConfigurationAuthErrorMessages={[storageNotSupported]:"Given storage configuration option was not supported.",[stubbedPublicClientApplicationCalled]:"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors",[inMemRedirectUnavailable]:"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."},BrowserConfigurationAuthErrorMessage={storageNotSupportedError:{code:storageNotSupported,desc:BrowserConfigurationAuthErrorMessages[storageNotSupported]},stubPcaInstanceCalled:{code:stubbedPublicClientApplicationCalled,desc:BrowserConfigurationAuthErrorMessages[stubbedPublicClientApplicationCalled]},inMemRedirectUnavailable:{code:inMemRedirectUnavailable,desc:BrowserConfigurationAuthErrorMessages[inMemRedirectUnavailable]}};class BrowserConfigurationAuthError extends AuthError{constructor(e,t){super(e,t),this.name="BrowserConfigurationAuthError",Object.setPrototypeOf(this,BrowserConfigurationAuthError.prototype)}}function createBrowserConfigurationAuthError(e){return new BrowserConfigurationAuthError(e,BrowserConfigurationAuthErrorMessages[e])}function clearHash(e){e.location.hash="","function"===typeof e.history.replaceState&&e.history.replaceState(null,"",`${e.location.origin}${e.location.pathname}${e.location.search}`)}function replaceHash(e){const t=e.split("#");t.shift(),window.location.hash=t.length>0?t.join("#"):""}function isInIframe(){return window.parent!==window}function isInPopup(){return"undefined"!==typeof window&&!!window.opener&&window.opener!==window&&"string"===typeof window.name&&0===window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`)}function getCurrentUri(){return window.location.href.split("?")[0].split("#")[0]}function getHomepage(){const e=new UrlString(window.location.href).getUrlComponents();return`${e.Protocol}//${e.HostNameAndPort}/`}function blockReloadInHiddenIframes(){if(UrlString.hashContainsKnownProperties(window.location.hash)&&isInIframe())throw createBrowserAuthError(blockIframeReload)}function blockRedirectInIframe(e){if(isInIframe()&&!e)throw createBrowserAuthError(redirectInIframe)}function blockAcquireTokenInPopups(){if(isInPopup())throw createBrowserAuthError(blockNestedPopups)}function blockNonBrowserEnvironment(){if("undefined"===typeof window)throw createBrowserAuthError(nonBrowserEnvironment)}function blockAPICallsBeforeInitialize(e){if(!e)throw createBrowserAuthError(uninitializedPublicClientApplication)}function preflightCheck$1(e){blockNonBrowserEnvironment(),blockReloadInHiddenIframes(),blockAcquireTokenInPopups(),blockAPICallsBeforeInitialize(e)}function redirectPreflightCheck(e,t){if(preflightCheck$1(e),blockRedirectInIframe(t.system.allowRedirectInIframe),t.cache.cacheLocation===BrowserCacheLocation.MemoryStorage&&!t.cache.storeAuthStateInCookie)throw createBrowserConfigurationAuthError(inMemRedirectUnavailable)}function preconnect(e){const t=document.createElement("link");t.rel="preconnect",t.href=new URL(e).origin,t.crossOrigin="anonymous",document.head.appendChild(t),window.setTimeout((()=>{try{document.head.removeChild(t)}catch{}}),1e4)}function createGuid(){return createNewGuid()}var BrowserUtils=Object.freeze({__proto__:null,blockAPICallsBeforeInitialize:blockAPICallsBeforeInitialize,blockAcquireTokenInPopups:blockAcquireTokenInPopups,blockNonBrowserEnvironment:blockNonBrowserEnvironment,blockRedirectInIframe:blockRedirectInIframe,blockReloadInHiddenIframes:blockReloadInHiddenIframes,clearHash:clearHash,createGuid:createGuid,getCurrentUri:getCurrentUri,getHomepage:getHomepage,invoke:invoke,invokeAsync:invokeAsync,isInIframe:isInIframe,isInPopup:isInPopup,preconnect:preconnect,preflightCheck:preflightCheck$1,redirectPreflightCheck:redirectPreflightCheck,replaceHash:replaceHash});class NavigationClient{navigateInternal(e,t){return NavigationClient.defaultNavigateWindow(e,t)}navigateExternal(e,t){return NavigationClient.defaultNavigateWindow(e,t)}static defaultNavigateWindow(e,t){return t.noHistory?window.location.replace(e):window.location.assign(e),new Promise((e=>{setTimeout((()=>{e(!0)}),t.timeout)}))}}class FetchClient{async sendGetRequestAsync(e,t){let r;try{r=await fetch(e,{method:HTTP_REQUEST_TYPE.GET,headers:this.getFetchHeaders(t)})}catch(n){throw window.navigator.onLine?createBrowserAuthError(getRequestFailed):createBrowserAuthError(noNetworkConnectivity)}try{return{headers:this.getHeaderDict(r.headers),body:await r.json(),status:r.status}}catch(n){throw createBrowserAuthError(failedToParseResponse)}}async sendPostRequestAsync(e,t){const r=t&&t.body||Constants.EMPTY_STRING;let n;try{n=await fetch(e,{method:HTTP_REQUEST_TYPE.POST,headers:this.getFetchHeaders(t),body:r})}catch(o){throw window.navigator.onLine?createBrowserAuthError(postRequestFailed):createBrowserAuthError(noNetworkConnectivity)}try{return{headers:this.getHeaderDict(n.headers),body:await n.json(),status:n.status}}catch(o){throw createBrowserAuthError(failedToParseResponse)}}getFetchHeaders(e){const t=new Headers;if(!e||!e.headers)return t;const r=e.headers;return Object.keys(r).forEach((e=>{t.append(e,r[e])})),t}getHeaderDict(e){const t={};return e.forEach(((e,r)=>{t[r]=e})),t}}const DEFAULT_POPUP_TIMEOUT_MS=6e4,DEFAULT_IFRAME_TIMEOUT_MS=1e4,DEFAULT_REDIRECT_TIMEOUT_MS=3e4,DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS=2e3;function buildConfiguration({auth:e,cache:t,system:r,telemetry:n},o){const i={clientId:Constants.EMPTY_STRING,authority:`${Constants.DEFAULT_AUTHORITY}`,knownAuthorities:[],cloudDiscoveryMetadata:Constants.EMPTY_STRING,authorityMetadata:Constants.EMPTY_STRING,redirectUri:Constants.EMPTY_STRING,postLogoutRedirectUri:Constants.EMPTY_STRING,navigateToLoginRequestUrl:!0,clientCapabilities:[],protocolMode:ProtocolMode.AAD,OIDCOptions:{serverResponseType:ServerResponseType.FRAGMENT,defaultScopes:[Constants.OPENID_SCOPE,Constants.PROFILE_SCOPE,Constants.OFFLINE_ACCESS_SCOPE]},azureCloudOptions:{azureCloudInstance:AzureCloudInstance.None,tenant:Constants.EMPTY_STRING},skipAuthorityMetadataCache:!1,supportsNestedAppAuth:!1,instanceAware:!1},a={cacheLocation:BrowserCacheLocation.SessionStorage,temporaryCacheLocation:BrowserCacheLocation.SessionStorage,storeAuthStateInCookie:!1,secureCookies:!1,cacheMigrationEnabled:!(!t||t.cacheLocation!==BrowserCacheLocation.LocalStorage),claimsBasedCachingEnabled:!1},s={loggerCallback:()=>{},logLevel:exports.LogLevel.Info,piiLoggingEnabled:!1},c={...{...DEFAULT_SYSTEM_OPTIONS,loggerOptions:s,networkClient:o?new FetchClient:StubbedNetworkModule,navigationClient:new NavigationClient,loadFrameTimeout:0,windowHashTimeout:r?.loadFrameTimeout||6e4,iframeHashTimeout:r?.loadFrameTimeout||1e4,navigateFrameWait:0,redirectNavigationTimeout:3e4,asyncPopups:!1,allowRedirectInIframe:!1,allowNativeBroker:!1,nativeBrokerHandshakeTimeout:r?.nativeBrokerHandshakeTimeout||2e3,pollIntervalMilliseconds:BrowserConstants.DEFAULT_POLL_INTERVAL_MS},...r,loggerOptions:r?.loggerOptions||s},l={application:{appName:Constants.EMPTY_STRING,appVersion:Constants.EMPTY_STRING},client:new StubPerformanceClient};if(e?.protocolMode!==ProtocolMode.OIDC&&e?.OIDCOptions){new Logger(c.loggerOptions).warning(JSON.stringify(createClientConfigurationError(cannotSetOIDCOptions)))}if(e?.protocolMode&&e.protocolMode!==ProtocolMode.AAD&&c?.allowNativeBroker)throw createClientConfigurationError(cannotAllowNativeBroker);return{auth:{...i,...e,OIDCOptions:{...i.OIDCOptions,...e?.OIDCOptions}},cache:{...a,...t},system:c,telemetry:{...l,...n}}}const name="@azure/msal-browser",version="3.24.0";class BaseOperatingContext{static loggerCallback(e,t){switch(e){case exports.LogLevel.Error:return void console.error(t);case exports.LogLevel.Info:return void console.info(t);case exports.LogLevel.Verbose:return void console.debug(t);case exports.LogLevel.Warning:return void console.warn(t);default:return void console.log(t)}}constructor(e){let t;this.browserEnvironment="undefined"!==typeof window,this.config=buildConfiguration(e,this.browserEnvironment);try{t=window[BrowserCacheLocation.SessionStorage]}catch(s){}const r=t?.getItem(LOG_LEVEL_CACHE_KEY),n=t?.getItem(LOG_PII_CACHE_KEY)?.toLowerCase(),o="true"===n||"false"!==n&&void 0,i={...this.config.system.loggerOptions},a=r&&Object.keys(exports.LogLevel).includes(r)?exports.LogLevel[r]:void 0;a&&(i.loggerCallback=BaseOperatingContext.loggerCallback,i.logLevel=a),void 0!==o&&(i.piiLoggingEnabled=o),this.logger=new Logger(i,name,version),this.available=!1}getConfig(){return this.config}getLogger(){return this.logger}isAvailable(){return this.available}isBrowserEnvironment(){return this.browserEnvironment}}const BridgeStatusCode={UserInteractionRequired:"USER_INTERACTION_REQUIRED",UserCancel:"USER_CANCEL",NoNetwork:"NO_NETWORK",TransientError:"TRANSIENT_ERROR",PersistentError:"PERSISTENT_ERROR",Disabled:"DISABLED",AccountUnavailable:"ACCOUNT_UNAVAILABLE",NestedAppAuthUnavailable:"NESTED_APP_AUTH_UNAVAILABLE"};class BridgeProxy{static async initializeNestedAppAuthBridge(){if(void 0===window)throw new Error("window is undefined");if(void 0===window.nestedAppAuthBridge)throw new Error("window.nestedAppAuthBridge is undefined");try{window.nestedAppAuthBridge.addEventListener("message",(e=>{const t="string"===typeof e?e:e.data,r=JSON.parse(t),n=BridgeProxy.bridgeRequests.find((e=>e.requestId===r.requestId));void 0!==n&&(BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(n),1),r.success?n.resolve(r):n.reject(r.error))}));const e=await new Promise(((e,t)=>{const r=BridgeProxy.buildRequest("GetInitContext"),n={requestId:r.requestId,method:r.method,resolve:e,reject:t};BridgeProxy.bridgeRequests.push(n),window.nestedAppAuthBridge.postMessage(JSON.stringify(r))}));return BridgeProxy.validateBridgeResultOrThrow(e.initContext)}catch(e){throw window.console.log(e),e}}getTokenInteractive(e){return this.getToken("GetTokenPopup",e)}getTokenSilent(e){return this.getToken("GetToken",e)}async getToken(e,t){const r=await this.sendRequest(e,{tokenParams:t});return{token:BridgeProxy.validateBridgeResultOrThrow(r.token),account:BridgeProxy.validateBridgeResultOrThrow(r.account)}}getHostCapabilities(){return this.capabilities??null}getAccountContext(){return this.accountContext?this.accountContext:null}static buildRequest(e,t){return{messageType:"NestedAppAuthRequest",method:e,requestId:createNewGuid(),sendTime:Date.now(),clientLibrary:BrowserConstants.MSAL_SKU,clientLibraryVersion:version,...t}}sendRequest(e,t){const r=BridgeProxy.buildRequest(e,t);return new Promise(((e,t)=>{const n={requestId:r.requestId,method:r.method,resolve:e,reject:t};BridgeProxy.bridgeRequests.push(n),window.nestedAppAuthBridge.postMessage(JSON.stringify(r))}))}static validateBridgeResultOrThrow(e){if(void 0===e){throw{status:BridgeStatusCode.NestedAppAuthUnavailable}}return e}constructor(e,t,r,n){this.sdkName=e,this.sdkVersion=t,this.accountContext=r,this.capabilities=n}static async create(){const e=await BridgeProxy.initializeNestedAppAuthBridge();return new BridgeProxy(e.sdkName,e.sdkVersion,e.accountContext,e.capabilities)}}BridgeProxy.bridgeRequests=[];class NestedAppOperatingContext extends BaseOperatingContext{constructor(){super(...arguments),this.bridgeProxy=void 0,this.accountContext=null}getModuleName(){return NestedAppOperatingContext.MODULE_NAME}getId(){return NestedAppOperatingContext.ID}getBridgeProxy(){return this.bridgeProxy}async initialize(){try{if("undefined"!==typeof window){"function"===typeof window.__initializeNestedAppAuth&&await window.__initializeNestedAppAuth();const e=await BridgeProxy.create();this.accountContext=e.getAccountContext(),this.bridgeProxy=e,this.available=void 0!==e}}catch(e){this.logger.infoPii(`Could not initialize Nested App Auth bridge (${e})`)}return this.logger.info(`Nested App Auth Bridge available: ${this.available}`),this.available}}NestedAppOperatingContext.MODULE_NAME="",NestedAppOperatingContext.ID="NestedAppOperatingContext";class StandardOperatingContext extends BaseOperatingContext{getModuleName(){return StandardOperatingContext.MODULE_NAME}getId(){return StandardOperatingContext.ID}async initialize(){return this.available="undefined"!==typeof window,this.available}}function base64Decode(e){return(new TextDecoder).decode(base64DecToArr(e))}function base64DecToArr(e){let t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw createBrowserAuthError(invalidBase64String)}const r=atob(t);return Uint8Array.from(r,(e=>e.codePointAt(0)||0))}StandardOperatingContext.MODULE_NAME="",StandardOperatingContext.ID="StandardOperatingContext";class DatabaseStorage{constructor(){this.dbName=DB_NAME,this.version=1,this.tableName=DB_TABLE_NAME,this.dbOpen=!1}async open(){return new Promise(((e,t)=>{const r=window.indexedDB.open(this.dbName,this.version);r.addEventListener("upgradeneeded",(e=>{e.target.result.createObjectStore(this.tableName)})),r.addEventListener("success",(t=>{const r=t;this.db=r.target.result,this.dbOpen=!0,e()})),r.addEventListener("error",(()=>t(createBrowserAuthError(databaseUnavailable))))}))}closeConnection(){const e=this.db;e&&this.dbOpen&&(e.close(),this.dbOpen=!1)}async validateDbIsOpen(){if(!this.dbOpen)return this.open()}async getItem(e){return await this.validateDbIsOpen(),new Promise(((t,r)=>{if(!this.db)return r(createBrowserAuthError(databaseNotOpen));const n=this.db.transaction([this.tableName],"readonly").objectStore(this.tableName).get(e);n.addEventListener("success",(e=>{const r=e;this.closeConnection(),t(r.target.result)})),n.addEventListener("error",(e=>{this.closeConnection(),r(e)}))}))}async setItem(e,t){return await this.validateDbIsOpen(),new Promise(((r,n)=>{if(!this.db)return n(createBrowserAuthError(databaseNotOpen));const o=this.db.transaction([this.tableName],"readwrite").objectStore(this.tableName).put(t,e);o.addEventListener("success",(()=>{this.closeConnection(),r()})),o.addEventListener("error",(e=>{this.closeConnection(),n(e)}))}))}async removeItem(e){return await this.validateDbIsOpen(),new Promise(((t,r)=>{if(!this.db)return r(createBrowserAuthError(databaseNotOpen));const n=this.db.transaction([this.tableName],"readwrite").objectStore(this.tableName).delete(e);n.addEventListener("success",(()=>{this.closeConnection(),t()})),n.addEventListener("error",(e=>{this.closeConnection(),r(e)}))}))}async getKeys(){return await this.validateDbIsOpen(),new Promise(((e,t)=>{if(!this.db)return t(createBrowserAuthError(databaseNotOpen));const r=this.db.transaction([this.tableName],"readonly").objectStore(this.tableName).getAllKeys();r.addEventListener("success",(t=>{const r=t;this.closeConnection(),e(r.target.result)})),r.addEventListener("error",(e=>{this.closeConnection(),t(e)}))}))}async containsKey(e){return await this.validateDbIsOpen(),new Promise(((t,r)=>{if(!this.db)return r(createBrowserAuthError(databaseNotOpen));const n=this.db.transaction([this.tableName],"readonly").objectStore(this.tableName).count(e);n.addEventListener("success",(e=>{const r=e;this.closeConnection(),t(1===r.target.result)})),n.addEventListener("error",(e=>{this.closeConnection(),r(e)}))}))}async deleteDatabase(){return this.db&&this.dbOpen&&this.closeConnection(),new Promise(((e,t)=>{const r=window.indexedDB.deleteDatabase(DB_NAME),n=setTimeout((()=>t(!1)),200);r.addEventListener("success",(()=>(clearTimeout(n),e(!0)))),r.addEventListener("blocked",(()=>(clearTimeout(n),e(!0)))),r.addEventListener("error",(()=>(clearTimeout(n),t(!1))))}))}}class MemoryStorage{constructor(){this.cache=new Map}getItem(e){return this.cache.get(e)||null}setItem(e,t){this.cache.set(e,t)}removeItem(e){this.cache.delete(e)}getKeys(){const e=[];return this.cache.forEach(((t,r)=>{e.push(r)})),e}containsKey(e){return this.cache.has(e)}clear(){this.cache.clear()}}class AsyncMemoryStorage{constructor(e){this.inMemoryCache=new MemoryStorage,this.indexedDBCache=new DatabaseStorage,this.logger=e}handleDatabaseAccessError(e){if(!(e instanceof BrowserAuthError&&e.errorCode===databaseUnavailable))throw e;this.logger.error("Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.")}async getItem(e){const t=this.inMemoryCache.getItem(e);if(!t)try{return this.logger.verbose("Queried item not found in in-memory cache, now querying persistent storage."),await this.indexedDBCache.getItem(e)}catch(r){this.handleDatabaseAccessError(r)}return t}async setItem(e,t){this.inMemoryCache.setItem(e,t);try{await this.indexedDBCache.setItem(e,t)}catch(r){this.handleDatabaseAccessError(r)}}async removeItem(e){this.inMemoryCache.removeItem(e);try{await this.indexedDBCache.removeItem(e)}catch(t){this.handleDatabaseAccessError(t)}}async getKeys(){const e=this.inMemoryCache.getKeys();if(0===e.length)try{return this.logger.verbose("In-memory cache is empty, now querying persistent storage."),await this.indexedDBCache.getKeys()}catch(t){this.handleDatabaseAccessError(t)}return e}async containsKey(e){const t=this.inMemoryCache.containsKey(e);if(!t)try{return this.logger.verbose("Key not found in in-memory cache, now querying persistent storage."),await this.indexedDBCache.containsKey(e)}catch(r){this.handleDatabaseAccessError(r)}return t}clearInMemory(){this.logger.verbose("Deleting in-memory keystore"),this.inMemoryCache.clear(),this.logger.verbose("In-memory keystore deleted")}async clearPersistent(){try{this.logger.verbose("Deleting persistent keystore");const e=await this.indexedDBCache.deleteDatabase();return e&&this.logger.verbose("Persistent keystore deleted"),e}catch(e){return this.handleDatabaseAccessError(e),!1}}}class CryptoOps{constructor(e,t){this.logger=e,validateCryptoAvailable(e),this.cache=new AsyncMemoryStorage(this.logger),this.performanceClient=t}createNewGuid(){return createNewGuid()}base64Encode(e){return base64Encode(e)}base64Decode(e){return base64Decode(e)}base64UrlEncode(e){return urlEncode(e)}encodeKid(e){return this.base64UrlEncode(JSON.stringify({kid:e}))}async getPublicKeyThumbprint(e){const t=this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,e.correlationId),r=await generateKeyPair(CryptoOps.EXTRACTABLE,CryptoOps.POP_KEY_USAGES),n=await exportJwk(r.publicKey),o=getSortedObjectString({e:n.e,kty:n.kty,n:n.n}),i=await this.hashString(o),a=await exportJwk(r.privateKey),s=await importJwk(a,!1,["sign"]);return await this.cache.setItem(i,{privateKey:s,publicKey:r.publicKey,requestMethod:e.resourceRequestMethod,requestUri:e.resourceRequestUri}),t&&t.end({success:!0}),i}async removeTokenBindingKey(e){await this.cache.removeItem(e);return!await this.cache.containsKey(e)}async clearKeystore(){this.cache.clearInMemory();try{return await this.cache.clearPersistent(),!0}catch(e){return e instanceof Error?this.logger.error(`Clearing keystore failed with error: ${e.message}`):this.logger.error("Clearing keystore failed with unknown error"),!1}}async signJwt(e,t,r,n){const o=this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt,n),i=await this.cache.getItem(t);if(!i)throw createBrowserAuthError(cryptoKeyNotFound);const a=await exportJwk(i.publicKey),s=getSortedObjectString(a),c=urlEncode(JSON.stringify({kid:t})),l=urlEncode(JoseHeader.getShrHeaderString({...r?.header,alg:a.alg,kid:c}));e.cnf={jwk:JSON.parse(s)};const d=`${l}.${urlEncode(JSON.stringify(e))}`,u=(new TextEncoder).encode(d),h=await sign(i.privateKey,u),g=`${d}.${urlEncodeArr(new Uint8Array(h))}`;return o&&o.end({success:!0}),g}async hashString(e){return hashString(e)}}function getSortedObjectString(e){return JSON.stringify(e,Object.keys(e).sort())}CryptoOps.POP_KEY_USAGES=["sign","verify"],CryptoOps.EXTRACTABLE=!0;class BrowserStorage{constructor(e){this.validateWindowStorage(e),this.windowStorage=window[e]}validateWindowStorage(e){if(e!==BrowserCacheLocation.LocalStorage&&e!==BrowserCacheLocation.SessionStorage||!window[e])throw createBrowserConfigurationAuthError(storageNotSupported)}getItem(e){return this.windowStorage.getItem(e)}setItem(e,t){this.windowStorage.setItem(e,t)}removeItem(e){this.windowStorage.removeItem(e)}getKeys(){return Object.keys(this.windowStorage)}containsKey(e){return this.windowStorage.hasOwnProperty(e)}}function extractBrowserRequestState(e,t){if(!t)return null;try{return ProtocolUtils.parseRequestState(e,t).libraryState.meta}catch(r){throw createClientAuthError(invalidState)}}class BrowserCacheManager extends CacheManager{constructor(e,t,r,n,o,i){super(e,r,n,o),this.COOKIE_LIFE_MULTIPLIER=864e5,this.cacheConfig=t,this.logger=n,this.internalStorage=new MemoryStorage,this.browserStorage=this.setupBrowserStorage(this.cacheConfig.cacheLocation),this.temporaryCacheStorage=this.setupTemporaryCacheStorage(this.cacheConfig.temporaryCacheLocation,this.cacheConfig.cacheLocation),t.cacheMigrationEnabled&&(this.migrateCacheEntries(),this.createKeyMaps()),this.performanceClient=i}setupBrowserStorage(e){switch(e){case BrowserCacheLocation.LocalStorage:case BrowserCacheLocation.SessionStorage:try{return new BrowserStorage(e)}catch(t){this.logger.verbose(t);break}}return this.cacheConfig.cacheLocation=BrowserCacheLocation.MemoryStorage,new MemoryStorage}setupTemporaryCacheStorage(e,t){switch(t){case BrowserCacheLocation.LocalStorage:case BrowserCacheLocation.SessionStorage:try{return new BrowserStorage(e||BrowserCacheLocation.SessionStorage)}catch(r){return this.logger.verbose(r),this.internalStorage}default:return this.internalStorage}}migrateCacheEntries(){const e=`${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`,t=`${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`,r=`${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`,n=`${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`,o=[this.browserStorage.getItem(e),this.browserStorage.getItem(t),this.browserStorage.getItem(r),this.browserStorage.getItem(n)];[PersistentCacheKeys.ID_TOKEN,PersistentCacheKeys.CLIENT_INFO,PersistentCacheKeys.ERROR,PersistentCacheKeys.ERROR_DESC].forEach(((e,t)=>{const r=o[t];r&&this.setTemporaryCache(e,r,!0)}))}createKeyMaps(){this.logger.trace("BrowserCacheManager - createKeyMaps called.");const e=this.getItem(StaticCacheKeys.ACCOUNT_KEYS),t=this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);if(e&&t)return void this.logger.verbose("BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.");this.browserStorage.getKeys().forEach((e=>{if(this.isCredentialKey(e)){const t=this.getItem(e);if(t){const r=this.validateAndParseJson(t);if(r&&r.hasOwnProperty("credentialType"))switch(r.credentialType){case CredentialType.ID_TOKEN:if(isIdTokenEntity(r)){this.logger.trace("BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map"),this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${e} found, saving key to token key map`);const t=r,n=this.updateCredentialCacheKey(e,t);return void this.addTokenKey(n,CredentialType.ID_TOKEN)}this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping."),this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${e}`);break;case CredentialType.ACCESS_TOKEN:case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:if(isAccessTokenEntity(r)){this.logger.trace("BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map"),this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${e} found, saving key to token key map`);const t=r,n=this.updateCredentialCacheKey(e,t);return void this.addTokenKey(n,CredentialType.ACCESS_TOKEN)}this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping."),this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${e}`);break;case CredentialType.REFRESH_TOKEN:if(isRefreshTokenEntity(r)){this.logger.trace("BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map"),this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${e} found, saving key to token key map`);const t=r,n=this.updateCredentialCacheKey(e,t);return void this.addTokenKey(n,CredentialType.REFRESH_TOKEN)}this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping."),this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${e}`)}}}if(this.isAccountKey(e)){const t=this.getItem(e);if(t){const r=this.validateAndParseJson(t);r&&AccountEntity.isAccountEntity(r)&&(this.logger.trace("BrowserCacheManager:createKeyMaps - account found, saving key to account key map"),this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${e} found, saving key to account key map`),this.addAccountKeyToMap(e))}}}))}validateAndParseJson(e){try{const t=JSON.parse(e);return t&&"object"===typeof t?t:null}catch(t){return null}}getItem(e){return this.browserStorage.getItem(e)}setItem(e,t){this.browserStorage.setItem(e,t)}getAccount(e,t){this.logger.trace("BrowserCacheManager.getAccount called");const r=this.getCachedAccountEntity(e);return this.updateOutdatedCachedAccount(e,r,t)}getCachedAccountEntity(e){const t=this.getItem(e);if(!t)return this.removeAccountKeyFromMap(e),null;const r=this.validateAndParseJson(t);return r&&AccountEntity.isAccountEntity(r)?CacheManager.toObject(new AccountEntity,r):(this.removeAccountKeyFromMap(e),null)}setAccount(e){this.logger.trace("BrowserCacheManager.setAccount called");const t=e.generateAccountKey();this.setItem(t,JSON.stringify(e)),this.addAccountKeyToMap(t)}getAccountKeys(){this.logger.trace("BrowserCacheManager.getAccountKeys called");const e=this.getItem(StaticCacheKeys.ACCOUNT_KEYS);return e?JSON.parse(e):(this.logger.verbose("BrowserCacheManager.getAccountKeys - No account keys found"),[])}addAccountKeyToMap(e){this.logger.trace("BrowserCacheManager.addAccountKeyToMap called"),this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${e}`);const t=this.getAccountKeys();-1===t.indexOf(e)?(t.push(e),this.setItem(StaticCacheKeys.ACCOUNT_KEYS,JSON.stringify(t)),this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key added")):this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key already exists in map")}removeAccountKeyFromMap(e){this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap called"),this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${e}`);const t=this.getAccountKeys(),r=t.indexOf(e);r>-1?(t.splice(r,1),this.setItem(StaticCacheKeys.ACCOUNT_KEYS,JSON.stringify(t)),this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap account key removed")):this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap key not found in existing map")}async removeAccount(e){super.removeAccount(e),this.removeAccountKeyFromMap(e)}removeOutdatedAccount(e){this.removeItem(e),this.removeAccountKeyFromMap(e)}removeIdToken(e){super.removeIdToken(e),this.removeTokenKey(e,CredentialType.ID_TOKEN)}async removeAccessToken(e){super.removeAccessToken(e),this.removeTokenKey(e,CredentialType.ACCESS_TOKEN)}removeRefreshToken(e){super.removeRefreshToken(e),this.removeTokenKey(e,CredentialType.REFRESH_TOKEN)}getTokenKeys(){this.logger.trace("BrowserCacheManager.getTokenKeys called");const e=this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);if(e){const t=this.validateAndParseJson(e);if(t&&t.hasOwnProperty("idToken")&&t.hasOwnProperty("accessToken")&&t.hasOwnProperty("refreshToken"))return t;this.logger.error("BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.")}else this.logger.verbose("BrowserCacheManager.getTokenKeys - No token keys found");return{idToken:[],accessToken:[],refreshToken:[]}}addTokenKey(e,t){this.logger.trace("BrowserCacheManager addTokenKey called");const r=this.getTokenKeys();switch(t){case CredentialType.ID_TOKEN:-1===r.idToken.indexOf(e)&&(this.logger.info("BrowserCacheManager: addTokenKey - idToken added to map"),r.idToken.push(e));break;case CredentialType.ACCESS_TOKEN:-1===r.accessToken.indexOf(e)&&(this.logger.info("BrowserCacheManager: addTokenKey - accessToken added to map"),r.accessToken.push(e));break;case CredentialType.REFRESH_TOKEN:-1===r.refreshToken.indexOf(e)&&(this.logger.info("BrowserCacheManager: addTokenKey - refreshToken added to map"),r.refreshToken.push(e));break;default:throw this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${t}`),createClientAuthError(unexpectedCredentialType)}this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,JSON.stringify(r))}removeTokenKey(e,t){this.logger.trace("BrowserCacheManager removeTokenKey called");const r=this.getTokenKeys();switch(t){case CredentialType.ID_TOKEN:this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${e} from map`);const n=r.idToken.indexOf(e);n>-1?(this.logger.info("BrowserCacheManager: removeTokenKey - idToken removed from map"),r.idToken.splice(n,1)):this.logger.info("BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.");break;case CredentialType.ACCESS_TOKEN:this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${e} from map`);const o=r.accessToken.indexOf(e);o>-1?(this.logger.info("BrowserCacheManager: removeTokenKey - accessToken removed from map"),r.accessToken.splice(o,1)):this.logger.info("BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.");break;case CredentialType.REFRESH_TOKEN:this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${e} from map`);const i=r.refreshToken.indexOf(e);i>-1?(this.logger.info("BrowserCacheManager: removeTokenKey - refreshToken removed from map"),r.refreshToken.splice(i,1)):this.logger.info("BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.");break;default:throw this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${t}`),createClientAuthError(unexpectedCredentialType)}this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,JSON.stringify(r))}getIdTokenCredential(e){const t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit"),this.removeTokenKey(e,CredentialType.ID_TOKEN),null;const r=this.validateAndParseJson(t);return r&&isIdTokenEntity(r)?(this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit"),r):(this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit"),this.removeTokenKey(e,CredentialType.ID_TOKEN),null)}setIdTokenCredential(e){this.logger.trace("BrowserCacheManager.setIdTokenCredential called");const t=generateCredentialKey(e);this.setItem(t,JSON.stringify(e)),this.addTokenKey(t,CredentialType.ID_TOKEN)}getAccessTokenCredential(e){const t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit"),this.removeTokenKey(e,CredentialType.ACCESS_TOKEN),null;const r=this.validateAndParseJson(t);return r&&isAccessTokenEntity(r)?(this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit"),r):(this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit"),this.removeTokenKey(e,CredentialType.ACCESS_TOKEN),null)}setAccessTokenCredential(e){this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");const t=generateCredentialKey(e);this.setItem(t,JSON.stringify(e)),this.addTokenKey(t,CredentialType.ACCESS_TOKEN)}getRefreshTokenCredential(e){const t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit"),this.removeTokenKey(e,CredentialType.REFRESH_TOKEN),null;const r=this.validateAndParseJson(t);return r&&isRefreshTokenEntity(r)?(this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit"),r):(this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit"),this.removeTokenKey(e,CredentialType.REFRESH_TOKEN),null)}setRefreshTokenCredential(e){this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");const t=generateCredentialKey(e);this.setItem(t,JSON.stringify(e)),this.addTokenKey(t,CredentialType.REFRESH_TOKEN)}getAppMetadata(e){const t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit"),null;const r=this.validateAndParseJson(t);return r&&isAppMetadataEntity(e,r)?(this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit"),r):(this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit"),null)}setAppMetadata(e){this.logger.trace("BrowserCacheManager.setAppMetadata called");const t=generateAppMetadataKey(e);this.setItem(t,JSON.stringify(e))}getServerTelemetry(e){const t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit"),null;const r=this.validateAndParseJson(t);return r&&isServerTelemetryEntity(e,r)?(this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit"),r):(this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit"),null)}setServerTelemetry(e,t){this.logger.trace("BrowserCacheManager.setServerTelemetry called"),this.setItem(e,JSON.stringify(t))}getAuthorityMetadata(e){const t=this.internalStorage.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit"),null;const r=this.validateAndParseJson(t);return r&&isAuthorityMetadataEntity(e,r)?(this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit"),r):null}getAuthorityMetadataKeys(){return this.internalStorage.getKeys().filter((e=>this.isAuthorityMetadata(e)))}setWrapperMetadata(e,t){this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU,e),this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER,t)}getWrapperMetadata(){return[this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU)||Constants.EMPTY_STRING,this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER)||Constants.EMPTY_STRING]}setAuthorityMetadata(e,t){this.logger.trace("BrowserCacheManager.setAuthorityMetadata called"),this.internalStorage.setItem(e,JSON.stringify(t))}getActiveAccount(){const e=this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS),t=this.getItem(e);if(!t){this.logger.trace("BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema");const e=this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT),t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getActiveAccount: No active account found"),null;const r=this.getAccountInfoFilteredBy({localAccountId:t});return r?(this.logger.trace("BrowserCacheManager.getActiveAccount: Legacy active account cache schema found"),this.logger.trace("BrowserCacheManager.getActiveAccount: Adding active account filters cache schema"),this.setActiveAccount(r),r):null}const r=this.validateAndParseJson(t);return r?(this.logger.trace("BrowserCacheManager.getActiveAccount: Active account filters schema found"),this.getAccountInfoFilteredBy({homeAccountId:r.homeAccountId,localAccountId:r.localAccountId,tenantId:r.tenantId})):(this.logger.trace("BrowserCacheManager.getActiveAccount: No active account found"),null)}setActiveAccount(e){const t=this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS),r=this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);if(e){this.logger.verbose("setActiveAccount: Active account set");const n={homeAccountId:e.homeAccountId,localAccountId:e.localAccountId,tenantId:e.tenantId};this.browserStorage.setItem(t,JSON.stringify(n)),this.browserStorage.setItem(r,e.localAccountId)}else this.logger.verbose("setActiveAccount: No account passed, active account not set"),this.browserStorage.removeItem(t),this.browserStorage.removeItem(r)}getThrottlingCache(e){const t=this.getItem(e);if(!t)return this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit"),null;const r=this.validateAndParseJson(t);return r&&isThrottlingEntity(e,r)?(this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit"),r):(this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit"),null)}setThrottlingCache(e,t){this.logger.trace("BrowserCacheManager.setThrottlingCache called"),this.setItem(e,JSON.stringify(t))}getTemporaryCache(e,t){const r=t?this.generateCacheKey(e):e;if(this.cacheConfig.storeAuthStateInCookie){const e=this.getItemCookie(r);if(e)return this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies"),e}const n=this.temporaryCacheStorage.getItem(r);if(!n){if(this.cacheConfig.cacheLocation===BrowserCacheLocation.LocalStorage){const e=this.browserStorage.getItem(r);if(e)return this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage"),e}return this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage"),null}return this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned"),n}setTemporaryCache(e,t,r){const n=r?this.generateCacheKey(e):e;this.temporaryCacheStorage.setItem(n,t),this.cacheConfig.storeAuthStateInCookie&&(this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie"),this.setItemCookie(n,t))}removeItem(e){this.browserStorage.removeItem(e)}removeTemporaryItem(e){this.temporaryCacheStorage.removeItem(e),this.cacheConfig.storeAuthStateInCookie&&(this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie"),this.clearItemCookie(e))}getKeys(){return this.browserStorage.getKeys()}async clear(){await this.removeAllAccounts(),this.removeAppMetadata(),this.temporaryCacheStorage.getKeys().forEach((e=>{-1===e.indexOf(Constants.CACHE_PREFIX)&&-1===e.indexOf(this.clientId)||this.removeTemporaryItem(e)})),this.browserStorage.getKeys().forEach((e=>{-1===e.indexOf(Constants.CACHE_PREFIX)&&-1===e.indexOf(this.clientId)||this.browserStorage.removeItem(e)})),this.internalStorage.clear()}async clearTokensAndKeysWithClaims(e,t){e.addQueueMeasurement(PerformanceEvents.ClearTokensAndKeysWithClaims,t);const r=this.getTokenKeys(),n=[];r.accessToken.forEach((e=>{const t=this.getAccessTokenCredential(e);t?.requestedClaimsHash&&e.includes(t.requestedClaimsHash.toLowerCase())&&n.push(this.removeAccessToken(e))})),await Promise.all(n),n.length>0&&this.logger.warning(`${n.length} access tokens with claims in the cache keys have been removed from the cache.`)}setItemCookie(e,t,r){let n=`${encodeURIComponent(e)}=${encodeURIComponent(t)};path=/;SameSite=Lax;`;if(r){n+=`expires=${this.getCookieExpirationTime(r)};`}this.cacheConfig.secureCookies&&(n+="Secure;"),document.cookie=n}getItemCookie(e){const t=`${encodeURIComponent(e)}=`,r=document.cookie.split(";");for(let n=0;n<r.length;n++){let e=r[n];for(;" "===e.charAt(0);)e=e.substring(1);if(0===e.indexOf(t))return decodeURIComponent(e.substring(t.length,e.length))}return Constants.EMPTY_STRING}clearMsalCookies(){const e=`${Constants.CACHE_PREFIX}.${this.clientId}`;document.cookie.split(";").forEach((t=>{for(;" "===t.charAt(0);)t=t.substring(1);if(0===t.indexOf(e)){const e=t.split("=")[0];this.clearItemCookie(e)}}))}clearItemCookie(e){this.setItemCookie(e,Constants.EMPTY_STRING,-1)}getCookieExpirationTime(e){const t=new Date;return new Date(t.getTime()+e*this.COOKIE_LIFE_MULTIPLIER).toUTCString()}generateCacheKey(e){return this.validateAndParseJson(e)?JSON.stringify(e):StringUtils.startsWith(e,Constants.CACHE_PREFIX)||StringUtils.startsWith(e,PersistentCacheKeys.ADAL_ID_TOKEN)?e:`${Constants.CACHE_PREFIX}.${this.clientId}.${e}`}generateAuthorityKey(e){const{libraryState:{id:t}}=ProtocolUtils.parseRequestState(this.cryptoImpl,e);return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${t}`)}generateNonceKey(e){const{libraryState:{id:t}}=ProtocolUtils.parseRequestState(this.cryptoImpl,e);return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${t}`)}generateStateKey(e){const{libraryState:{id:t}}=ProtocolUtils.parseRequestState(this.cryptoImpl,e);return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${t}`)}getCachedAuthority(e){const t=this.generateStateKey(e),r=this.getTemporaryCache(t);if(!r)return null;const n=this.generateAuthorityKey(r);return this.getTemporaryCache(n)}updateCacheEntries(e,t,r,n,o){this.logger.trace("BrowserCacheManager.updateCacheEntries called");const i=this.generateStateKey(e);this.setTemporaryCache(i,e,!1);const a=this.generateNonceKey(e);this.setTemporaryCache(a,t,!1);const s=this.generateAuthorityKey(e);if(this.setTemporaryCache(s,r,!1),o){const e={credential:o.homeAccountId,type:CcsCredentialType.HOME_ACCOUNT_ID};this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL,JSON.stringify(e),!0)}else if(n){const e={credential:n,type:CcsCredentialType.UPN};this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL,JSON.stringify(e),!0)}}resetRequestCache(e){this.logger.trace("BrowserCacheManager.resetRequestCache called"),e&&(this.temporaryCacheStorage.getKeys().forEach((t=>{-1!==t.indexOf(e)&&this.removeTemporaryItem(t)})),this.removeTemporaryItem(this.generateStateKey(e)),this.removeTemporaryItem(this.generateNonceKey(e)),this.removeTemporaryItem(this.generateAuthorityKey(e))),this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)),this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI)),this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH)),this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID)),this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL)),this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST)),this.setInteractionInProgress(!1)}cleanRequestByState(e){if(this.logger.trace("BrowserCacheManager.cleanRequestByState called"),e){const t=this.generateStateKey(e),r=this.temporaryCacheStorage.getItem(t);this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${r}`),this.resetRequestCache(r||Constants.EMPTY_STRING)}this.clearMsalCookies()}cleanRequestByInteractionType(e){this.logger.trace("BrowserCacheManager.cleanRequestByInteractionType called"),this.temporaryCacheStorage.getKeys().forEach((t=>{if(-1===t.indexOf(TemporaryCacheKeys.REQUEST_STATE))return;const r=this.temporaryCacheStorage.getItem(t);if(!r)return;const n=extractBrowserRequestState(this.cryptoImpl,r);n&&n.interactionType===e&&(this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${r}`),this.resetRequestCache(r))})),this.clearMsalCookies(),this.setInteractionInProgress(!1)}cacheCodeRequest(e){this.logger.trace("BrowserCacheManager.cacheCodeRequest called");const t=base64Encode(JSON.stringify(e));this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS,t,!0)}getCachedRequest(e){this.logger.trace("BrowserCacheManager.getCachedRequest called");const t=this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS,!0);if(!t)throw createBrowserAuthError(noTokenRequestCacheError);let r;try{r=JSON.parse(base64Decode(t))}catch(n){throw this.logger.errorPii(`Attempted to parse: ${t}`),this.logger.error(`Parsing cached token request threw with error: ${n}`),createBrowserAuthError(unableToParseTokenRequestCacheError)}if(this.removeTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)),!r.authority){const t=this.generateAuthorityKey(e),n=this.getTemporaryCache(t);if(!n)throw createBrowserAuthError(noCachedAuthorityError);r.authority=n}return r}getCachedNativeRequest(){this.logger.trace("BrowserCacheManager.getCachedNativeRequest called");const e=this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST,!0);if(!e)return this.logger.trace("BrowserCacheManager.getCachedNativeRequest: No cached native request found"),null;const t=this.validateAndParseJson(e);return t||(this.logger.error("BrowserCacheManager.getCachedNativeRequest: Unable to parse native request"),null)}isInteractionInProgress(e){const t=this.getInteractionInProgress();return e?t===this.clientId:!!t}getInteractionInProgress(){const e=`${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;return this.getTemporaryCache(e,!1)}setInteractionInProgress(e){const t=`${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;if(e){if(this.getInteractionInProgress())throw createBrowserAuthError(interactionInProgress);this.setTemporaryCache(t,this.clientId,!1)}else e||this.getInteractionInProgress()!==this.clientId||this.removeTemporaryItem(t)}getLegacyLoginHint(){const e=this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);e&&(this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN),this.logger.verbose("Cached ADAL id token retrieved."));const t=this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN,!0);t&&(this.browserStorage.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN)),this.logger.verbose("Cached MSAL.js v1 id token retrieved"));const r=t||e;if(r){const e=extractTokenClaims(r,base64Decode);if(e.preferred_username)return this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint"),e.preferred_username;if(e.upn)return this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint"),e.upn;this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.")}return null}updateCredentialCacheKey(e,t){const r=generateCredentialKey(t);if(e!==r){const n=this.getItem(e);if(n)return this.browserStorage.removeItem(e),this.setItem(r,n),this.logger.verbose(`Updated an outdated ${t.credentialType} cache key`),r;this.logger.error(`Attempted to update an outdated ${t.credentialType} cache key but no item matching the outdated key was found in storage`)}return e}async hydrateCache(e,t){const r=createIdTokenEntity(e.account?.homeAccountId,e.account?.environment,e.idToken,this.clientId,e.tenantId);let n;t.claims&&(n=await this.cryptoImpl.hashString(t.claims));const o={idToken:r,accessToken:createAccessTokenEntity(e.account?.homeAccountId,e.account.environment,e.accessToken,this.clientId,e.tenantId,e.scopes.join(" "),e.expiresOn?e.expiresOn.getTime()/1e3:0,e.extExpiresOn?e.extExpiresOn.getTime()/1e3:0,base64Decode,void 0,e.tokenType,void 0,t.sshKid,t.claims,n)};return this.saveCacheRecord(o)}async saveCacheRecord(e,t,r){try{await super.saveCacheRecord(e,t,r)}catch(n){if(n instanceof CacheError&&this.performanceClient&&r)try{const e=this.getTokenKeys();this.performanceClient.addFields({cacheRtCount:e.refreshToken.length,cacheIdCount:e.idToken.length,cacheAtCount:e.accessToken.length},r)}catch(n){}throw n}}}const DEFAULT_BROWSER_CACHE_MANAGER=(e,t)=>new BrowserCacheManager(e,{cacheLocation:BrowserCacheLocation.MemoryStorage,temporaryCacheLocation:BrowserCacheLocation.MemoryStorage,storeAuthStateInCookie:!1,secureCookies:!1,cacheMigrationEnabled:!1,claimsBasedCachingEnabled:!1},DEFAULT_CRYPTO_IMPLEMENTATION,t);function getAllAccounts(e,t,r,n){return e.verbose("getAllAccounts called"),r?t.getAllAccounts(n):[]}function getAccount(e,t,r){if(t.trace("getAccount called"),0===Object.keys(e).length)return t.warning("getAccount: No accountFilter provided"),null;const n=r.getAccountInfoFilteredBy(e);return n?(t.verbose("getAccount: Account matching provided filter found, returning"),n):(t.verbose("getAccount: No matching account found, returning null"),null)}function getAccountByUsername(e,t,r){if(t.trace("getAccountByUsername called"),!e)return t.warning("getAccountByUsername: No username provided"),null;const n=r.getAccountInfoFilteredBy({username:e});return n?(t.verbose("getAccountByUsername: Account matching username found, returning"),t.verbosePii(`getAccountByUsername: Returning signed-in accounts matching username: ${e}`),n):(t.verbose("getAccountByUsername: No matching account found, returning null"),null)}function getAccountByHomeId(e,t,r){if(t.trace("getAccountByHomeId called"),!e)return t.warning("getAccountByHomeId: No homeAccountId provided"),null;const n=r.getAccountInfoFilteredBy({homeAccountId:e});return n?(t.verbose("getAccountByHomeId: Account matching homeAccountId found, returning"),t.verbosePii(`getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${e}`),n):(t.verbose("getAccountByHomeId: No matching account found, returning null"),null)}function getAccountByLocalId(e,t,r){if(t.trace("getAccountByLocalId called"),!e)return t.warning("getAccountByLocalId: No localAccountId provided"),null;const n=r.getAccountInfoFilteredBy({localAccountId:e});return n?(t.verbose("getAccountByLocalId: Account matching localAccountId found, returning"),t.verbosePii(`getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${e}`),n):(t.verbose("getAccountByLocalId: No matching account found, returning null"),null)}function setActiveAccount(e,t){t.setActiveAccount(e)}function getActiveAccount(e){return e.getActiveAccount()}const EventType={INITIALIZE_START:"msal:initializeStart",INITIALIZE_END:"msal:initializeEnd",ACCOUNT_ADDED:"msal:accountAdded",ACCOUNT_REMOVED:"msal:accountRemoved",ACTIVE_ACCOUNT_CHANGED:"msal:activeAccountChanged",LOGIN_START:"msal:loginStart",LOGIN_SUCCESS:"msal:loginSuccess",LOGIN_FAILURE:"msal:loginFailure",ACQUIRE_TOKEN_START:"msal:acquireTokenStart",ACQUIRE_TOKEN_SUCCESS:"msal:acquireTokenSuccess",ACQUIRE_TOKEN_FAILURE:"msal:acquireTokenFailure",ACQUIRE_TOKEN_NETWORK_START:"msal:acquireTokenFromNetworkStart",SSO_SILENT_START:"msal:ssoSilentStart",SSO_SILENT_SUCCESS:"msal:ssoSilentSuccess",SSO_SILENT_FAILURE:"msal:ssoSilentFailure",ACQUIRE_TOKEN_BY_CODE_START:"msal:acquireTokenByCodeStart",ACQUIRE_TOKEN_BY_CODE_SUCCESS:"msal:acquireTokenByCodeSuccess",ACQUIRE_TOKEN_BY_CODE_FAILURE:"msal:acquireTokenByCodeFailure",HANDLE_REDIRECT_START:"msal:handleRedirectStart",HANDLE_REDIRECT_END:"msal:handleRedirectEnd",POPUP_OPENED:"msal:popupOpened",LOGOUT_START:"msal:logoutStart",LOGOUT_SUCCESS:"msal:logoutSuccess",LOGOUT_FAILURE:"msal:logoutFailure",LOGOUT_END:"msal:logoutEnd",RESTORE_FROM_BFCACHE:"msal:restoreFromBFCache"};class EventHandler{constructor(e,t){this.eventCallbacks=new Map,this.logger=e,this.browserCrypto=t,this.listeningToStorageEvents=!1,this.handleAccountCacheChange=this.handleAccountCacheChange.bind(this)}addEventCallback(e){if("undefined"!==typeof window){const t=createNewGuid();return this.eventCallbacks.set(t,e),this.logger.verbose(`Event callback registered with id: ${t}`),t}return null}removeEventCallback(e){this.eventCallbacks.delete(e),this.logger.verbose(`Event callback ${e} removed.`)}enableAccountStorageEvents(){"undefined"!==typeof window&&(this.listeningToStorageEvents?this.logger.verbose("Account storage listener already registered."):(this.logger.verbose("Adding account storage listener."),this.listeningToStorageEvents=!0,window.addEventListener("storage",this.handleAccountCacheChange)))}disableAccountStorageEvents(){"undefined"!==typeof window&&(this.listeningToStorageEvents?(this.logger.verbose("Removing account storage listener."),window.removeEventListener("storage",this.handleAccountCacheChange),this.listeningToStorageEvents=!1):this.logger.verbose("No account storage listener registered."))}emitEvent(e,t,r,n){if("undefined"!==typeof window){const o={eventType:e,interactionType:t||null,payload:r||null,error:n||null,timestamp:Date.now()};this.logger.info(`Emitting event: ${e}`),this.eventCallbacks.forEach(((t,r)=>{this.logger.verbose(`Emitting event to callback ${r}: ${e}`),t.apply(null,[o])}))}}handleAccountCacheChange(e){try{e.key?.includes(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS)&&this.emitEvent(EventType.ACTIVE_ACCOUNT_CHANGED);const t=e.newValue||e.oldValue;if(!t)return;const r=JSON.parse(t);if("object"!==typeof r||!AccountEntity.isAccountEntity(r))return;const n=CacheManager.toObject(new AccountEntity,r).getAccountInfo();!e.oldValue&&e.newValue?(this.logger.info("Account was added to cache in a different window"),this.emitEvent(EventType.ACCOUNT_ADDED,void 0,n)):!e.newValue&&e.oldValue&&(this.logger.info("Account was removed from cache in a different window"),this.emitEvent(EventType.ACCOUNT_REMOVED,void 0,n))}catch(e){return}}}class BaseInteractionClient{constructor(e,t,r,n,o,i,a,s,c){this.config=e,this.browserStorage=t,this.browserCrypto=r,this.networkClient=this.config.system.networkClient,this.eventHandler=o,this.navigationClient=i,this.nativeMessageHandler=s,this.correlationId=c||createNewGuid(),this.logger=n.clone(BrowserConstants.MSAL_SKU,version,this.correlationId),this.performanceClient=a}async clearCacheOnLogout(e){if(e){AccountEntity.accountInfoIsEqual(e,this.browserStorage.getActiveAccount(),!1)&&(this.logger.verbose("Setting active account to null"),this.browserStorage.setActiveAccount(null));try{await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(e)),this.logger.verbose("Cleared cache items belonging to the account provided in the logout request.")}catch(t){this.logger.error("Account provided in logout request was not found. Local cache unchanged.")}}else try{this.logger.verbose("No account provided in logout request, clearing all cache items.",this.correlationId),await this.browserStorage.clear(),await this.browserCrypto.clearKeystore()}catch(r){this.logger.error("Attempted to clear all MSAL cache items and failed. Local cache unchanged.")}}getRedirectUri(e){this.logger.verbose("getRedirectUri called");const t=e||this.config.auth.redirectUri||getCurrentUri();return UrlString.getAbsoluteUrl(t,getCurrentUri())}initializeServerTelemetryManager(e,t){this.logger.verbose("initializeServerTelemetryManager called");const r={clientId:this.config.auth.clientId,correlationId:this.correlationId,apiId:e,forceRefresh:t||!1,wrapperSKU:this.browserStorage.getWrapperMetadata()[0],wrapperVer:this.browserStorage.getWrapperMetadata()[1]};return new ServerTelemetryManager(r,this.browserStorage)}async getDiscoveredAuthority(e){const{account:t}=e,r=e.requestExtraQueryParameters&&e.requestExtraQueryParameters.hasOwnProperty("instance_aware")?e.requestExtraQueryParameters.instance_aware:void 0;this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,this.correlationId);const n={protocolMode:this.config.auth.protocolMode,OIDCOptions:this.config.auth.OIDCOptions,knownAuthorities:this.config.auth.knownAuthorities,cloudDiscoveryMetadata:this.config.auth.cloudDiscoveryMetadata,authorityMetadata:this.config.auth.authorityMetadata,skipAuthorityMetadataCache:this.config.auth.skipAuthorityMetadataCache},o=e.requestAuthority||this.config.auth.authority,i=r?.length?"true"===r:this.config.auth.instanceAware,a=t&&i?this.config.auth.authority.replace(UrlString.getDomainFromUrl(o),t.environment):o,s=Authority.generateAuthority(a,e.requestAzureCloudOptions||this.config.auth.azureCloudOptions),c=await invokeAsync(createDiscoveredInstance,PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,this.logger,this.performanceClient,this.correlationId)(s,this.config.system.networkClient,this.browserStorage,n,this.logger,this.correlationId,this.performanceClient);if(t&&!c.isAlias(t.environment))throw createClientConfigurationError(authorityMismatch);return c}}const RANDOM_BYTE_ARR_LENGTH=32;async function generatePkceCodes(e,t,r){e.addQueueMeasurement(PerformanceEvents.GeneratePkceCodes,r);const n=invoke(generateCodeVerifier,PerformanceEvents.GenerateCodeVerifier,t,e,r)(e,t,r);return{verifier:n,challenge:await invokeAsync(generateCodeChallengeFromVerifier,PerformanceEvents.GenerateCodeChallengeFromVerifier,t,e,r)(n,e,t,r)}}function generateCodeVerifier(e,t,r){try{const n=new Uint8Array(32);invoke(getRandomValues,PerformanceEvents.GetRandomValues,t,e,r)(n);return urlEncodeArr(n)}catch(n){throw createBrowserAuthError(pkceNotCreated)}}async function generateCodeChallengeFromVerifier(e,t,r,n){t.addQueueMeasurement(PerformanceEvents.GenerateCodeChallengeFromVerifier,n);try{const o=await invokeAsync(sha256Digest,PerformanceEvents.Sha256Digest,r,t,n)(e,t,n);return urlEncodeArr(new Uint8Array(o))}catch(o){throw createBrowserAuthError(pkceNotCreated)}}async function initializeBaseRequest(e,t,r,n){r.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest,e.correlationId);const o=e.authority||t.auth.authority,i=[...e&&e.scopes||[]],a={...e,correlationId:e.correlationId,authority:o,scopes:i};if(a.authenticationScheme){if(a.authenticationScheme===AuthenticationScheme.SSH){if(!e.sshJwk)throw createClientConfigurationError(missingSshJwk);if(!e.sshKid)throw createClientConfigurationError(missingSshKid)}n.verbose(`Authentication Scheme set to "${a.authenticationScheme}" as configured in Auth request`)}else a.authenticationScheme=AuthenticationScheme.BEARER,n.verbose('Authentication Scheme wasn\'t explicitly set in request, defaulting to "Bearer" request');return t.cache.claimsBasedCachingEnabled&&e.claims&&!StringUtils.isEmptyObj(e.claims)&&(a.requestedClaimsHash=await hashString(e.claims)),a}async function initializeSilentRequest(e,t,r,n,o){n.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest,e.correlationId);const i=await invokeAsync(initializeBaseRequest,PerformanceEvents.InitializeBaseRequest,o,n,e.correlationId)(e,r,n,o);return{...e,...i,account:t,forceRefresh:e.forceRefresh||!1}}class StandardInteractionClient extends BaseInteractionClient{async initializeAuthorizationCodeRequest(e){this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,this.correlationId);const t=await invokeAsync(generatePkceCodes,PerformanceEvents.GeneratePkceCodes,this.logger,this.performanceClient,this.correlationId)(this.performanceClient,this.logger,this.correlationId),r={...e,redirectUri:e.redirectUri,code:Constants.EMPTY_STRING,codeVerifier:t.verifier};return e.codeChallenge=t.challenge,e.codeChallengeMethod=Constants.S256_CODE_CHALLENGE_METHOD,r}initializeLogoutRequest(e){this.logger.verbose("initializeLogoutRequest called",e?.correlationId);const t={correlationId:this.correlationId||createNewGuid(),...e};if(e)if(e.logoutHint)this.logger.verbose("logoutHint has already been set in logoutRequest");else if(e.account){const r=this.getLogoutHintFromIdTokenClaims(e.account);r&&(this.logger.verbose("Setting logoutHint to login_hint ID Token Claim value for the account provided"),t.logoutHint=r)}else this.logger.verbose("logoutHint was not set and account was not passed into logout request, logoutHint will not be set");else this.logger.verbose("logoutHint will not be set since no logout request was configured");return e&&null===e.postLogoutRedirectUri?this.logger.verbose("postLogoutRedirectUri passed as null, not setting post logout redirect uri",t.correlationId):e&&e.postLogoutRedirectUri?(this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request",t.correlationId),t.postLogoutRedirectUri=UrlString.getAbsoluteUrl(e.postLogoutRedirectUri,getCurrentUri())):null===this.config.auth.postLogoutRedirectUri?this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect",t.correlationId):this.config.auth.postLogoutRedirectUri?(this.logger.verbose("Setting postLogoutRedirectUri to configured uri",t.correlationId),t.postLogoutRedirectUri=UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri,getCurrentUri())):(this.logger.verbose("Setting postLogoutRedirectUri to current page",t.correlationId),t.postLogoutRedirectUri=UrlString.getAbsoluteUrl(getCurrentUri(),getCurrentUri())),t}getLogoutHintFromIdTokenClaims(e){const t=e.idTokenClaims;if(t){if(t.login_hint)return t.login_hint;this.logger.verbose("The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request")}else this.logger.verbose("The provided account does not contain ID Token Claims, logoutHint will not be added to logout request");return null}async createAuthCodeClient(e){this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,this.correlationId);const t=await invokeAsync(this.getClientConfiguration.bind(this),PerformanceEvents.StandardInteractionClientGetClientConfiguration,this.logger,this.performanceClient,this.correlationId)(e);return new AuthorizationCodeClient(t,this.performanceClient)}async getClientConfiguration(e){const{serverTelemetryManager:t,requestAuthority:r,requestAzureCloudOptions:n,requestExtraQueryParameters:o,account:i}=e;this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration,this.correlationId);const a=await invokeAsync(this.getDiscoveredAuthority.bind(this),PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,this.logger,this.performanceClient,this.correlationId)({requestAuthority:r,requestAzureCloudOptions:n,requestExtraQueryParameters:o,account:i}),s=this.config.system.loggerOptions;return{authOptions:{clientId:this.config.auth.clientId,authority:a,clientCapabilities:this.config.auth.clientCapabilities},systemOptions:{tokenRenewalOffsetSeconds:this.config.system.tokenRenewalOffsetSeconds,preventCorsPreflight:!0},loggerOptions:{loggerCallback:s.loggerCallback,piiLoggingEnabled:s.piiLoggingEnabled,logLevel:s.logLevel,correlationId:this.correlationId},cacheOptions:{claimsBasedCachingEnabled:this.config.cache.claimsBasedCachingEnabled},cryptoInterface:this.browserCrypto,networkInterface:this.networkClient,storageInterface:this.browserStorage,serverTelemetryManager:t,libraryInfo:{sku:BrowserConstants.MSAL_SKU,version:version,cpu:Constants.EMPTY_STRING,os:Constants.EMPTY_STRING},telemetry:this.config.telemetry}}async initializeAuthorizationRequest(e,t){this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,this.correlationId);const r=this.getRedirectUri(e.redirectUri),n={interactionType:t},o=ProtocolUtils.setRequestState(this.browserCrypto,e&&e.state||Constants.EMPTY_STRING,n),i={...await invokeAsync(initializeBaseRequest,PerformanceEvents.InitializeBaseRequest,this.logger,this.performanceClient,this.correlationId)({...e,correlationId:this.correlationId},this.config,this.performanceClient,this.logger),redirectUri:r,state:o,nonce:e.nonce||createNewGuid(),responseMode:this.config.auth.OIDCOptions.serverResponseType},a=e.account||this.browserStorage.getActiveAccount();if(a&&(this.logger.verbose("Setting validated request account",this.correlationId),this.logger.verbosePii(`Setting validated request account: ${a.homeAccountId}`,this.correlationId),i.account=a),!i.loginHint&&!a){const e=this.browserStorage.getLegacyLoginHint();e&&(i.loginHint=e)}return i}}const contentError="ContentError",userSwitch="user_switch",USER_INTERACTION_REQUIRED="USER_INTERACTION_REQUIRED",USER_CANCEL="USER_CANCEL",NO_NETWORK="NO_NETWORK",PERSISTENT_ERROR="PERSISTENT_ERROR",DISABLED="DISABLED",ACCOUNT_UNAVAILABLE="ACCOUNT_UNAVAILABLE",INVALID_METHOD_ERROR=-2147186943,NativeAuthErrorMessages={[userSwitch]:"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again."};class NativeAuthError extends AuthError{constructor(e,t,r){super(e,t),Object.setPrototypeOf(this,NativeAuthError.prototype),this.name="NativeAuthError",this.ext=r}}function isFatalNativeAuthError(e){return!(!e.ext||!e.ext.status||e.ext.status!==PERSISTENT_ERROR&&e.ext.status!==DISABLED)||(!(!e.ext||!e.ext.error||-2147186943!==e.ext.error)||e.errorCode===contentError)}function createNativeAuthError(e,t,r){if(r&&r.status)switch(r.status){case ACCOUNT_UNAVAILABLE:return createInteractionRequiredAuthError(nativeAccountUnavailable);case USER_INTERACTION_REQUIRED:return new InteractionRequiredAuthError(e,t);case USER_CANCEL:return createBrowserAuthError(userCancelled);case NO_NETWORK:return createBrowserAuthError(noNetworkConnectivity)}return new NativeAuthError(e,NativeAuthErrorMessages[e]||t,r)}class SilentCacheClient extends StandardInteractionClient{async acquireToken(e){this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentCacheClientAcquireToken,e.correlationId);const t=this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow),r=await invokeAsync(this.getClientConfiguration.bind(this),PerformanceEvents.StandardInteractionClientGetClientConfiguration,this.logger,this.performanceClient,this.correlationId)({serverTelemetryManager:t,requestAuthority:e.authority,requestAzureCloudOptions:e.azureCloudOptions,account:e.account}),n=new SilentFlowClient(r,this.performanceClient);this.logger.verbose("Silent auth client created");try{const t=(await invokeAsync(n.acquireCachedToken.bind(n),PerformanceEvents.SilentFlowClientAcquireCachedToken,this.logger,this.performanceClient,e.correlationId)(e))[0];return this.performanceClient.addFields({fromCache:!0},e.correlationId),t}catch(o){throw o instanceof BrowserAuthError&&o.errorCode===cryptoKeyNotFound&&this.logger.verbose("Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair."),o}}logout(e){this.logger.verbose("logoutRedirect called");const t=this.initializeLogoutRequest(e);return this.clearCacheOnLogout(t?.account)}}const BrokerServerParamKeys={BROKER_CLIENT_ID:"brk_client_id",BROKER_REDIRECT_URI:"brk_redirect_uri"};class NativeInteractionClient extends BaseInteractionClient{constructor(e,t,r,n,o,i,a,s,c,l,d,u){super(e,t,r,n,o,i,s,c,u),this.apiId=a,this.accountId=l,this.nativeMessageHandler=c,this.nativeStorageManager=d,this.silentCacheClient=new SilentCacheClient(e,this.nativeStorageManager,r,n,o,i,s,c,u),this.serverTelemetryManager=this.initializeServerTelemetryManager(this.apiId);const h=this.nativeMessageHandler.getExtensionId()===NativeConstants.PREFERRED_EXTENSION_ID?"chrome":this.nativeMessageHandler.getExtensionId()?.length?"unknown":void 0;this.skus=ServerTelemetryManager.makeExtraSkuString({libraryName:BrowserConstants.MSAL_SKU,libraryVersion:version,extensionName:h,extensionVersion:this.nativeMessageHandler.getExtensionVersion()})}addRequestSKUs(e){e.extraParameters={...e.extraParameters,[X_CLIENT_EXTRA_SKU]:this.skus}}async acquireToken(e){this.performanceClient.addQueueMeasurement(PerformanceEvents.NativeInteractionClientAcquireToken,e.correlationId),this.logger.trace("NativeInteractionClient - acquireToken called.");const t=this.performanceClient.startMeasurement(PerformanceEvents.NativeInteractionClientAcquireToken,e.correlationId),r=nowSeconds();try{const o=await this.initializeNativeRequest(e);try{const e=await this.acquireTokensFromCache(this.accountId,o);return t.end({success:!0,isNativeBroker:!1,fromCache:!0}),e}catch(n){this.logger.info("MSAL internal Cache does not contain tokens, proceed to make a native call")}const{...i}=o,a={method:NativeExtensionMethod.GetToken,request:i},s=await this.nativeMessageHandler.sendMessage(a),c=this.validateNativeResponse(s);return await this.handleNativeResponse(c,o,r).then((e=>(t.end({success:!0,isNativeBroker:!0,requestId:e.requestId}),this.serverTelemetryManager.clearNativeBrokerErrorCode(),e))).catch((e=>{throw t.end({success:!1,errorCode:e.errorCode,subErrorCode:e.subError,isNativeBroker:!0}),e}))}catch(n){throw n instanceof NativeAuthError&&this.serverTelemetryManager.setNativeBrokerErrorCode(n.errorCode),n}}createSilentCacheRequest(e,t){return{authority:e.authority,correlationId:this.correlationId,scopes:ScopeSet.fromString(e.scope).asArray(),account:t,forceRefresh:!1}}async acquireTokensFromCache(e,t){if(!e)throw this.logger.warning("NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided"),createClientAuthError(noAccountFound);const r=this.browserStorage.getBaseAccountInfo({nativeAccountId:e});if(!r)throw createClientAuthError(noAccountFound);try{const e=this.createSilentCacheRequest(t,r),n=await this.silentCacheClient.acquireToken(e),o={...r,idTokenClaims:n?.idTokenClaims,idToken:n?.idToken};return{...n,account:o}}catch(n){throw n}}async acquireTokenRedirect(e,t){this.logger.trace("NativeInteractionClient - acquireTokenRedirect called.");const{...r}=e;delete r.onRedirectNavigate;const n=await this.initializeNativeRequest(r),o={method:NativeExtensionMethod.GetToken,request:n};try{const e=await this.nativeMessageHandler.sendMessage(o);this.validateNativeResponse(e)}catch(s){if(s instanceof NativeAuthError&&(this.serverTelemetryManager.setNativeBrokerErrorCode(s.errorCode),isFatalNativeAuthError(s)))throw s}this.browserStorage.setTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST,JSON.stringify(n),!0);const i={apiId:ApiId.acquireTokenRedirect,timeout:this.config.system.redirectNavigationTimeout,noHistory:!1},a=this.config.auth.navigateToLoginRequestUrl?window.location.href:this.getRedirectUri(e.redirectUri);t.end({success:!0}),await this.navigationClient.navigateExternal(a,i)}async handleRedirectPromise(e,t){if(this.logger.trace("NativeInteractionClient - handleRedirectPromise called."),!this.browserStorage.isInteractionInProgress(!0))return this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null."),null;const r=this.browserStorage.getCachedNativeRequest();if(!r)return this.logger.verbose("NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null."),e&&t&&e?.addFields({errorCode:"no_cached_request"},t),null;const{prompt:n,...o}=r;n&&this.logger.verbose("NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window."),this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));const i={method:NativeExtensionMethod.GetToken,request:o},a=nowSeconds();try{this.logger.verbose("NativeInteractionClient - handleRedirectPromise sending message to native broker.");const e=await this.nativeMessageHandler.sendMessage(i);this.validateNativeResponse(e);const t=this.handleNativeResponse(e,o,a);this.browserStorage.setInteractionInProgress(!1);const r=await t;return this.serverTelemetryManager.clearNativeBrokerErrorCode(),r}catch(s){throw this.browserStorage.setInteractionInProgress(!1),s}}logout(){return this.logger.trace("NativeInteractionClient - logout called."),Promise.reject("Logout not implemented yet")}async handleNativeResponse(e,t,r){this.logger.trace("NativeInteractionClient - handleNativeResponse called.");const n=extractTokenClaims(e.id_token,base64Decode),o=this.createHomeAccountIdentifier(e,n),i=this.browserStorage.getAccountInfoFilteredBy({nativeAccountId:t.accountId})?.homeAccountId;if(o!==i&&e.account.id!==t.accountId)throw createNativeAuthError(userSwitch);const a=await this.getDiscoveredAuthority({requestAuthority:t.authority}),s=buildAccountToCache(this.browserStorage,a,o,base64Decode,n,e.client_info,void 0,n.tid,void 0,e.account.id,this.logger),c=await this.generateAuthenticationResult(e,t,n,s,a.canonicalAuthority,r);return this.cacheAccount(s),this.cacheNativeTokens(e,t,o,n,e.access_token,c.tenantId,r),c}createHomeAccountIdentifier(e,t){return AccountEntity.generateHomeAccountId(e.client_info||Constants.EMPTY_STRING,AuthorityType.Default,this.logger,this.browserCrypto,t)}generateScopes(e,t){return e.scope?ScopeSet.fromString(e.scope):ScopeSet.fromString(t.scope)}async generatePopAccessToken(e,t){if(t.tokenType===AuthenticationScheme.POP&&t.signPopToken){if(e.shr)return this.logger.trace("handleNativeServerResponse: SHR is enabled in native layer"),e.shr;const r=new PopTokenGenerator(this.browserCrypto),n={resourceRequestMethod:t.resourceRequestMethod,resourceRequestUri:t.resourceRequestUri,shrClaims:t.shrClaims,shrNonce:t.shrNonce};if(!t.keyId)throw createClientAuthError(keyIdMissing);return r.signPopToken(e.access_token,t.keyId,n)}return e.access_token}async generateAuthenticationResult(e,t,r,n,o,i){const a=this.addTelemetryFromNativeResponse(e),s=e.scope?ScopeSet.fromString(e.scope):ScopeSet.fromString(t.scope),c=e.account.properties||{},l=c.UID||r.oid||r.sub||Constants.EMPTY_STRING,d=c.TenantId||r.tid||Constants.EMPTY_STRING,u=updateAccountTenantProfileData(n.getAccountInfo(),void 0,r,e.id_token);u.nativeAccountId!==e.account.id&&(u.nativeAccountId=e.account.id);const h=await this.generatePopAccessToken(e,t),g=t.tokenType===AuthenticationScheme.POP?AuthenticationScheme.POP:AuthenticationScheme.BEARER;return{authority:o,uniqueId:l,tenantId:d,scopes:s.asArray(),account:u,idToken:e.id_token,idTokenClaims:r,accessToken:h,fromCache:!!a&&this.isResponseFromCache(a),expiresOn:new Date(1e3*Number(i+e.expires_in)),tokenType:g,correlationId:this.correlationId,state:e.state,fromNativeBroker:!0}}cacheAccount(e){this.browserStorage.setAccount(e),this.browserStorage.removeAccountContext(e).catch((e=>{this.logger.error(`Error occurred while removing account context from browser storage. ${e}`)}))}cacheNativeTokens(e,t,r,n,o,i,a){const s=createIdTokenEntity(r,t.authority,e.id_token||"",t.clientId,n.tid||""),c=a+(t.tokenType===AuthenticationScheme.POP?Constants.SHR_NONCE_VALIDITY:("string"===typeof e.expires_in?parseInt(e.expires_in,10):e.expires_in)||0),l=this.generateScopes(e,t),d={idToken:s,accessToken:createAccessTokenEntity(r,t.authority,o,t.clientId,n.tid||i,l.printScopes(),c,0,base64Decode,void 0,t.tokenType,void 0,t.keyId)};this.nativeStorageManager.saveCacheRecord(d,t.storeInCache)}addTelemetryFromNativeResponse(e){const t=this.getMATSFromResponse(e);return t?(this.performanceClient.addFields({extensionId:this.nativeMessageHandler.getExtensionId(),extensionVersion:this.nativeMessageHandler.getExtensionVersion(),matsBrokerVersion:t.broker_version,matsAccountJoinOnStart:t.account_join_on_start,matsAccountJoinOnEnd:t.account_join_on_end,matsDeviceJoin:t.device_join,matsPromptBehavior:t.prompt_behavior,matsApiErrorCode:t.api_error_code,matsUiVisible:t.ui_visible,matsSilentCode:t.silent_code,matsSilentBiSubCode:t.silent_bi_sub_code,matsSilentMessage:t.silent_message,matsSilentStatus:t.silent_status,matsHttpStatus:t.http_status,matsHttpEventCount:t.http_event_count},this.correlationId),t):null}validateNativeResponse(e){if(e.hasOwnProperty("access_token")&&e.hasOwnProperty("id_token")&&e.hasOwnProperty("client_info")&&e.hasOwnProperty("account")&&e.hasOwnProperty("scope")&&e.hasOwnProperty("expires_in"))return e;throw createAuthError(unexpectedError,"Response missing expected properties.")}getMATSFromResponse(e){if(e.properties.MATS)try{return JSON.parse(e.properties.MATS)}catch(t){this.logger.error("NativeInteractionClient - Error parsing MATS telemetry, returning null instead")}return null}isResponseFromCache(e){return"undefined"===typeof e.is_cached?(this.logger.verbose("NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false."),!1):!!e.is_cached}async initializeNativeRequest(e){this.logger.trace("NativeInteractionClient - initializeNativeRequest called");const t=e.authority||this.config.auth.authority;e.account&&await this.getDiscoveredAuthority({requestAuthority:t,requestAzureCloudOptions:e.azureCloudOptions,account:e.account});const r=new UrlString(t);r.validateAsUri();const{scopes:n,...o}=e,i=new ScopeSet(n||[]);i.appendScopes(OIDC_DEFAULT_SCOPES);const a={...o,accountId:this.accountId,clientId:this.config.auth.clientId,authority:r.urlString,scope:i.printScopes(),redirectUri:this.getRedirectUri(e.redirectUri),prompt:(()=>{switch(this.apiId){case ApiId.ssoSilent:case ApiId.acquireTokenSilent_silentFlow:return this.logger.trace("initializeNativeRequest: silent request sets prompt to none"),PromptValue.NONE}if(e.prompt)switch(e.prompt){case PromptValue.NONE:case PromptValue.CONSENT:case PromptValue.LOGIN:return this.logger.trace("initializeNativeRequest: prompt is compatible with native flow"),e.prompt;default:throw this.logger.trace(`initializeNativeRequest: prompt = ${e.prompt} is not compatible with native flow`),createBrowserAuthError(nativePromptNotSupported)}else this.logger.trace("initializeNativeRequest: prompt was not provided")})(),correlationId:this.correlationId,tokenType:e.authenticationScheme,windowTitleSubstring:document.title,extraParameters:{...e.extraQueryParameters,...e.tokenQueryParameters},extendedExpiryToken:!1,keyId:e.popKid};if(a.signPopToken&&e.popKid)throw createBrowserAuthError(invalidPopTokenRequest);if(this.handleExtraBrokerParams(a),a.extraParameters=a.extraParameters||{},a.extraParameters.telemetry=NativeConstants.MATS_TELEMETRY,e.authenticationScheme===AuthenticationScheme.POP){const t={resourceRequestUri:e.resourceRequestUri,resourceRequestMethod:e.resourceRequestMethod,shrClaims:e.shrClaims,shrNonce:e.shrNonce},r=new PopTokenGenerator(this.browserCrypto);let n;if(a.keyId)n=this.browserCrypto.base64UrlEncode(JSON.stringify({kid:a.keyId})),a.signPopToken=!1;else{const o=await invokeAsync(r.generateCnf.bind(r),PerformanceEvents.PopTokenGenerateCnf,this.logger,this.performanceClient,e.correlationId)(t,this.logger);n=o.reqCnfString,a.keyId=o.kid,a.signPopToken=!0}a.reqCnf=n}return this.addRequestSKUs(a),a}handleExtraBrokerParams(e){if(e.extraParameters&&e.extraParameters.hasOwnProperty(BrokerServerParamKeys.BROKER_CLIENT_ID)&&e.extraParameters.hasOwnProperty(BrokerServerParamKeys.BROKER_REDIRECT_URI)&&e.extraParameters.hasOwnProperty(CLIENT_ID)){const t=e.extraParameters[CLIENT_ID],r=e.redirectUri,n=e.extraParameters[BrokerServerParamKeys.BROKER_REDIRECT_URI];e.extraParameters={child_client_id:t,child_redirect_uri:r},e.redirectUri=n}}}class NativeMessageHandler{constructor(e,t,r,n){this.logger=e,this.handshakeTimeoutMs=t,this.extensionId=n,this.resolvers=new Map,this.handshakeResolvers=new Map,this.messageChannel=new MessageChannel,this.windowListener=this.onWindowMessage.bind(this),this.performanceClient=r,this.handshakeEvent=r.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake)}async sendMessage(e){this.logger.trace("NativeMessageHandler - sendMessage called.");const t={channel:NativeConstants.CHANNEL_ID,extensionId:this.extensionId,responseId:createNewGuid(),body:e};return this.logger.trace("NativeMessageHandler - Sending request to browser extension"),this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(t)}`),this.messageChannel.port1.postMessage(t),new Promise(((e,r)=>{this.resolvers.set(t.responseId,{resolve:e,reject:r})}))}static async createProvider(e,t,r){e.trace("NativeMessageHandler - createProvider called.");try{const n=new NativeMessageHandler(e,t,r,NativeConstants.PREFERRED_EXTENSION_ID);return await n.sendHandshakeRequest(),n}catch(n){const o=new NativeMessageHandler(e,t,r);return await o.sendHandshakeRequest(),o}}async sendHandshakeRequest(){this.logger.trace("NativeMessageHandler - sendHandshakeRequest called."),window.addEventListener("message",this.windowListener,!1);const e={channel:NativeConstants.CHANNEL_ID,extensionId:this.extensionId,responseId:createNewGuid(),body:{method:NativeExtensionMethod.HandshakeRequest}};return this.handshakeEvent.add({extensionId:this.extensionId,extensionHandshakeTimeoutMs:this.handshakeTimeoutMs}),this.messageChannel.port1.onmessage=e=>{this.onChannelMessage(e)},window.postMessage(e,window.origin,[this.messageChannel.port2]),new Promise(((t,r)=>{this.handshakeResolvers.set(e.responseId,{resolve:t,reject:r}),this.timeoutId=window.setTimeout((()=>{window.removeEventListener("message",this.windowListener,!1),this.messageChannel.port1.close(),this.messageChannel.port2.close(),this.handshakeEvent.end({extensionHandshakeTimedOut:!0,success:!1}),r(createBrowserAuthError(nativeHandshakeTimeout)),this.handshakeResolvers.delete(e.responseId)}),this.handshakeTimeoutMs)}))}onWindowMessage(e){if(this.logger.trace("NativeMessageHandler - onWindowMessage called"),e.source!==window)return;const t=e.data;if(t.channel&&t.channel===NativeConstants.CHANNEL_ID&&(!t.extensionId||t.extensionId===this.extensionId)&&t.body.method===NativeExtensionMethod.HandshakeRequest){const e=this.handshakeResolvers.get(t.responseId);if(!e)return void this.logger.trace(`NativeMessageHandler.onWindowMessage - resolver can't be found for request ${t.responseId}`);this.logger.verbose(t.extensionId?`Extension with id: ${t.extensionId} not installed`:"No extension installed"),clearTimeout(this.timeoutId),this.messageChannel.port1.close(),this.messageChannel.port2.close(),window.removeEventListener("message",this.windowListener,!1),this.handshakeEvent.end({success:!1,extensionInstalled:!1}),e.reject(createBrowserAuthError(nativeExtensionNotInstalled))}}onChannelMessage(e){this.logger.trace("NativeMessageHandler - onChannelMessage called.");const t=e.data,r=this.resolvers.get(t.responseId),n=this.handshakeResolvers.get(t.responseId);try{const e=t.body.method;if(e===NativeExtensionMethod.Response){if(!r)return;const e=t.body.response;if(this.logger.trace("NativeMessageHandler - Received response from browser extension"),this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(e)}`),"Success"!==e.status)r.reject(createNativeAuthError(e.code,e.description,e.ext));else{if(!e.result)throw createAuthError(unexpectedError,"Event does not contain result.");e.result.code&&e.result.description?r.reject(createNativeAuthError(e.result.code,e.result.description,e.result.ext)):r.resolve(e.result)}this.resolvers.delete(t.responseId)}else if(e===NativeExtensionMethod.HandshakeResponse){if(!n)return void this.logger.trace(`NativeMessageHandler.onChannelMessage - resolver can't be found for request ${t.responseId}`);clearTimeout(this.timeoutId),window.removeEventListener("message",this.windowListener,!1),this.extensionId=t.extensionId,this.extensionVersion=t.body.version,this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`),this.handshakeEvent.end({extensionInstalled:!0,success:!0}),n.resolve(),this.handshakeResolvers.delete(t.responseId)}}catch(o){this.logger.error("Error parsing response from WAM Extension"),this.logger.errorPii(`Error parsing response from WAM Extension: ${o}`),this.logger.errorPii(`Unable to parse ${e}`),r?r.reject(o):n&&n.reject(o)}}getExtensionId(){return this.extensionId}getExtensionVersion(){return this.extensionVersion}static isNativeAvailable(e,t,r,n){if(t.trace("isNativeAvailable called"),!e.system.allowNativeBroker)return t.trace("isNativeAvailable: allowNativeBroker is not enabled, returning false"),!1;if(!r)return t.trace("isNativeAvailable: WAM extension provider is not initialized, returning false"),!1;if(n)switch(n){case AuthenticationScheme.BEARER:case AuthenticationScheme.POP:return t.trace("isNativeAvailable: authenticationScheme is supported, returning true"),!0;default:return t.trace("isNativeAvailable: authenticationScheme is not supported, returning false"),!1}return!0}}class InteractionHandler{constructor(e,t,r,n,o){this.authModule=e,this.browserStorage=t,this.authCodeRequest=r,this.logger=n,this.performanceClient=o}async handleCodeResponse(e,t){let r;this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponse,t.correlationId);try{r=this.authModule.handleFragmentResponse(e,t.state)}catch(n){throw n instanceof ServerError&&n.subError===userCancelled?createBrowserAuthError(userCancelled):n}return invokeAsync(this.handleCodeResponseFromServer.bind(this),PerformanceEvents.HandleCodeResponseFromServer,this.logger,this.performanceClient,t.correlationId)(r,t)}async handleCodeResponseFromServer(e,t,r=!0){if(this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer,t.correlationId),this.logger.trace("InteractionHandler.handleCodeResponseFromServer called"),this.authCodeRequest.code=e.code,e.cloud_instance_host_name&&await invokeAsync(this.authModule.updateAuthority.bind(this.authModule),PerformanceEvents.UpdateTokenEndpointAuthority,this.logger,this.performanceClient,t.correlationId)(e.cloud_instance_host_name,t.correlationId),r&&(e.nonce=t.nonce||void 0),e.state=t.state,e.client_info)this.authCodeRequest.clientInfo=e.client_info;else{const e=this.createCcsCredentials(t);e&&(this.authCodeRequest.ccsCredential=e)}return await invokeAsync(this.authModule.acquireToken.bind(this.authModule),PerformanceEvents.AuthClientAcquireToken,this.logger,this.performanceClient,t.correlationId)(this.authCodeRequest,e)}createCcsCredentials(e){return e.account?{credential:e.account.homeAccountId,type:CcsCredentialType.HOME_ACCOUNT_ID}:e.loginHint?{credential:e.loginHint,type:CcsCredentialType.UPN}:null}}function deserializeResponse(e,t,r){const n=getDeserializedResponse(e);if(!n)throw stripLeadingHashOrQuery(e)?(r.error(`A ${t} is present in the iframe but it does not contain known properties. It's likely that the ${t} has been replaced by code running on the redirectUri page.`),r.errorPii(`The ${t} detected is: ${e}`),createBrowserAuthError(hashDoesNotContainKnownProperties)):(r.error(`The request has returned to the redirectUri but a ${t} is not present. It's likely that the ${t} has been removed or the page has been redirected by code running on the redirectUri page.`),createBrowserAuthError(hashEmptyError));return n}function validateInteractionType(e,t,r){if(!e.state)throw createBrowserAuthError(noStateInHash);const n=extractBrowserRequestState(t,e.state);if(!n)throw createBrowserAuthError(unableToParseState);if(n.interactionType!==r)throw createBrowserAuthError(stateInteractionTypeMismatch)}class PopupClient extends StandardInteractionClient{constructor(e,t,r,n,o,i,a,s,c,l){super(e,t,r,n,o,i,a,c,l),this.unloadWindow=this.unloadWindow.bind(this),this.nativeStorage=s}acquireToken(e){try{const t={popupName:this.generatePopupName(e.scopes||OIDC_DEFAULT_SCOPES,e.authority||this.config.auth.authority),popupWindowAttributes:e.popupWindowAttributes||{},popupWindowParent:e.popupWindowParent??window};return this.config.system.asyncPopups?(this.logger.verbose("asyncPopups set to true, acquiring token"),this.acquireTokenPopupAsync(e,t)):(this.logger.verbose("asyncPopup set to false, opening popup before acquiring token"),t.popup=this.openSizedPopup("about:blank",t),this.acquireTokenPopupAsync(e,t))}catch(t){return Promise.reject(t)}}logout(e){try{this.logger.verbose("logoutPopup called");const t=this.initializeLogoutRequest(e),r={popupName:this.generateLogoutPopupName(t),popupWindowAttributes:e?.popupWindowAttributes||{},popupWindowParent:e?.popupWindowParent??window},n=e&&e.authority,o=e&&e.mainWindowRedirectUri;return this.config.system.asyncPopups?(this.logger.verbose("asyncPopups set to true"),this.logoutPopupAsync(t,r,n,o)):(this.logger.verbose("asyncPopup set to false, opening popup"),r.popup=this.openSizedPopup("about:blank",r),this.logoutPopupAsync(t,r,n,o))}catch(t){return Promise.reject(t)}}async acquireTokenPopupAsync(e,t){this.logger.verbose("acquireTokenPopupAsync called");const r=this.initializeServerTelemetryManager(ApiId.acquireTokenPopup),n=await invokeAsync(this.initializeAuthorizationRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,this.logger,this.performanceClient,this.correlationId)(e,exports.InteractionType.Popup);preconnect(n.authority);try{const o=await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,this.logger,this.performanceClient,this.correlationId)(n),i=await invokeAsync(this.createAuthCodeClient.bind(this),PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,this.logger,this.performanceClient,this.correlationId)({serverTelemetryManager:r,requestAuthority:n.authority,requestAzureCloudOptions:n.azureCloudOptions,requestExtraQueryParameters:n.extraQueryParameters,account:n.account}),a=NativeMessageHandler.isNativeAvailable(this.config,this.logger,this.nativeMessageHandler,e.authenticationScheme);let s;a&&(s=this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker,e.correlationId));const c=await i.getAuthCodeUrl({...n,nativeBroker:a}),l=new InteractionHandler(i,this.browserStorage,o,this.logger,this.performanceClient),d=this.initiateAuthRequest(c,t);this.eventHandler.emitEvent(EventType.POPUP_OPENED,exports.InteractionType.Popup,{popupWindow:d},null);const u=await this.monitorPopupForHash(d,t.popupWindowParent),h=invoke(deserializeResponse,PerformanceEvents.DeserializeResponse,this.logger,this.performanceClient,this.correlationId)(u,this.config.auth.OIDCOptions.serverResponseType,this.logger);if(ThrottlingUtils.removeThrottle(this.browserStorage,this.config.auth.clientId,o),h.accountId){if(this.logger.verbose("Account id found in hash, calling WAM for token"),s&&s.end({success:!0,isNativeBroker:!0}),!this.nativeMessageHandler)throw createBrowserAuthError(nativeConnectionNotEstablished);const e=new NativeInteractionClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,ApiId.acquireTokenPopup,this.performanceClient,this.nativeMessageHandler,h.accountId,this.nativeStorage,n.correlationId),{userRequestState:t}=ProtocolUtils.parseRequestState(this.browserCrypto,n.state);return await e.acquireToken({...n,state:t,prompt:void 0})}return await l.handleCodeResponse(h,n)}catch(o){throw t.popup?.close(),o instanceof AuthError&&(o.setCorrelationId(this.correlationId),r.cacheFailedRequest(o)),o}}async logoutPopupAsync(e,t,r,n){this.logger.verbose("logoutPopupAsync called"),this.eventHandler.emitEvent(EventType.LOGOUT_START,exports.InteractionType.Popup,e);const o=this.initializeServerTelemetryManager(ApiId.logoutPopup);try{await this.clearCacheOnLogout(e.account);const i=await invokeAsync(this.createAuthCodeClient.bind(this),PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,this.logger,this.performanceClient,this.correlationId)({serverTelemetryManager:o,requestAuthority:r,account:e.account||void 0});try{i.authority.endSessionEndpoint}catch{if(e.account?.homeAccountId&&e.postLogoutRedirectUri&&i.authority.protocolMode===ProtocolMode.OIDC){if(this.browserStorage.removeAccount(e.account?.homeAccountId),this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS,exports.InteractionType.Popup,e),n){const e={apiId:ApiId.logoutPopup,timeout:this.config.system.redirectNavigationTimeout,noHistory:!1},t=UrlString.getAbsoluteUrl(n,getCurrentUri());await this.navigationClient.navigateInternal(t,e)}return void t.popup?.close()}}const a=i.getLogoutUri(e);this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS,exports.InteractionType.Popup,e);const s=this.openPopup(a,t);if(this.eventHandler.emitEvent(EventType.POPUP_OPENED,exports.InteractionType.Popup,{popupWindow:s},null),await this.monitorPopupForHash(s,t.popupWindowParent).catch((()=>{})),n){const e={apiId:ApiId.logoutPopup,timeout:this.config.system.redirectNavigationTimeout,noHistory:!1},t=UrlString.getAbsoluteUrl(n,getCurrentUri());this.logger.verbose("Redirecting main window to url specified in the request"),this.logger.verbosePii(`Redirecting main window to: ${t}`),await this.navigationClient.navigateInternal(t,e)}else this.logger.verbose("No main window navigation requested")}catch(i){throw t.popup?.close(),i instanceof AuthError&&(i.setCorrelationId(this.correlationId),o.cacheFailedRequest(i)),this.browserStorage.setInteractionInProgress(!1),this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE,exports.InteractionType.Popup,null,i),this.eventHandler.emitEvent(EventType.LOGOUT_END,exports.InteractionType.Popup),i}this.eventHandler.emitEvent(EventType.LOGOUT_END,exports.InteractionType.Popup)}initiateAuthRequest(e,t){if(e)return this.logger.infoPii(`Navigate to: ${e}`),this.openPopup(e,t);throw this.logger.error("Navigate url is empty"),createBrowserAuthError(emptyNavigateUri)}monitorPopupForHash(e,t){return new Promise(((t,r)=>{this.logger.verbose("PopupHandler.monitorPopupForHash - polling started");const n=setInterval((()=>{if(e.closed)return this.logger.error("PopupHandler.monitorPopupForHash - window closed"),clearInterval(n),void r(createBrowserAuthError(userCancelled));let o="";try{o=e.location.href}catch(s){}if(!o||"about:blank"===o)return;clearInterval(n);let i="";const a=this.config.auth.OIDCOptions.serverResponseType;e&&(i=a===ServerResponseType.QUERY?e.location.search:e.location.hash),this.logger.verbose("PopupHandler.monitorPopupForHash - popup window is on same origin as caller"),t(i)}),this.config.system.pollIntervalMilliseconds)})).finally((()=>{this.cleanPopup(e,t)}))}openPopup(e,t){try{let r;if(t.popup?(r=t.popup,this.logger.verbosePii(`Navigating popup window to: ${e}`),r.location.assign(e)):"undefined"===typeof t.popup&&(this.logger.verbosePii(`Opening popup window to: ${e}`),r=this.openSizedPopup(e,t)),!r)throw createBrowserAuthError(emptyWindowError);return r.focus&&r.focus(),this.currentWindow=r,t.popupWindowParent.addEventListener("beforeunload",this.unloadWindow),r}catch(r){throw this.logger.error("error opening popup "+r.message),this.browserStorage.setInteractionInProgress(!1),createBrowserAuthError(popupWindowError)}}openSizedPopup(e,{popupName:t,popupWindowAttributes:r,popupWindowParent:n}){const o=n.screenLeft?n.screenLeft:n.screenX,i=n.screenTop?n.screenTop:n.screenY,a=n.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,s=n.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;let c=r.popupSize?.width,l=r.popupSize?.height,d=r.popupPosition?.top,u=r.popupPosition?.left;return(!c||c<0||c>a)&&(this.logger.verbose("Default popup window width used. Window width not configured or invalid."),c=BrowserConstants.POPUP_WIDTH),(!l||l<0||l>s)&&(this.logger.verbose("Default popup window height used. Window height not configured or invalid."),l=BrowserConstants.POPUP_HEIGHT),(!d||d<0||d>s)&&(this.logger.verbose("Default popup window top position used. Window top not configured or invalid."),d=Math.max(0,s/2-BrowserConstants.POPUP_HEIGHT/2+i)),(!u||u<0||u>a)&&(this.logger.verbose("Default popup window left position used. Window left not configured or invalid."),u=Math.max(0,a/2-BrowserConstants.POPUP_WIDTH/2+o)),n.open(e,t,`width=${c}, height=${l}, top=${d}, left=${u}, scrollbars=yes`)}unloadWindow(e){this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Popup),this.currentWindow&&this.currentWindow.close(),e.preventDefault()}cleanPopup(e,t){e.close(),t.removeEventListener("beforeunload",this.unloadWindow),this.browserStorage.setInteractionInProgress(!1)}generatePopupName(e,t){return`${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${e.join("-")}.${t}.${this.correlationId}`}generateLogoutPopupName(e){const t=e.account&&e.account.homeAccountId;return`${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${t}.${this.correlationId}`}}class RedirectHandler{constructor(e,t,r,n,o){this.authModule=e,this.browserStorage=t,this.authCodeRequest=r,this.logger=n,this.performanceClient=o}async initiateAuthRequest(e,t){if(this.logger.verbose("RedirectHandler.initiateAuthRequest called"),e){t.redirectStartPage&&(this.logger.verbose("RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page"),this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI,t.redirectStartPage,!0)),this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID,this.authCodeRequest.correlationId,!0),this.browserStorage.cacheCodeRequest(this.authCodeRequest),this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${e}`);const r={apiId:ApiId.acquireTokenRedirect,timeout:t.redirectTimeout,noHistory:!1};if("function"===typeof t.onRedirectNavigate){this.logger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback");return!1!==t.onRedirectNavigate(e)?(this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating"),void await t.navigationClient.navigateExternal(e,r)):void this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation")}return this.logger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url"),void await t.navigationClient.navigateExternal(e,r)}throw this.logger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty"),createBrowserAuthError(emptyNavigateUri)}async handleCodeResponse(e,t){this.logger.verbose("RedirectHandler.handleCodeResponse called"),this.browserStorage.setInteractionInProgress(!1);const r=this.browserStorage.generateStateKey(t),n=this.browserStorage.getTemporaryCache(r);if(!n)throw createClientAuthError(stateNotFound,"Cached State");let o;try{o=this.authModule.handleFragmentResponse(e,n)}catch(c){throw c instanceof ServerError&&c.subError===userCancelled?createBrowserAuthError(userCancelled):c}const i=this.browserStorage.generateNonceKey(n),a=this.browserStorage.getTemporaryCache(i);if(this.authCodeRequest.code=o.code,o.cloud_instance_host_name&&await invokeAsync(this.authModule.updateAuthority.bind(this.authModule),PerformanceEvents.UpdateTokenEndpointAuthority,this.logger,this.performanceClient,this.authCodeRequest.correlationId)(o.cloud_instance_host_name,this.authCodeRequest.correlationId),o.nonce=a||void 0,o.state=n,o.client_info)this.authCodeRequest.clientInfo=o.client_info;else{const e=this.checkCcsCredentials();e&&(this.authCodeRequest.ccsCredential=e)}const s=await this.authModule.acquireToken(this.authCodeRequest,o);return this.browserStorage.cleanRequestByState(t),s}checkCcsCredentials(){const e=this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL,!0);if(e)try{return JSON.parse(e)}catch(t){this.authModule.logger.error("Cache credential could not be parsed"),this.authModule.logger.errorPii(`Cache credential could not be parsed: ${e}`)}return null}}class RedirectClient extends StandardInteractionClient{constructor(e,t,r,n,o,i,a,s,c,l){super(e,t,r,n,o,i,a,c,l),this.nativeStorage=s}async acquireToken(e){const t=await invokeAsync(this.initializeAuthorizationRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,this.logger,this.performanceClient,this.correlationId)(e,exports.InteractionType.Redirect);this.browserStorage.updateCacheEntries(t.state,t.nonce,t.authority,t.loginHint||"",t.account||null);const r=this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect),n=e=>{e.persisted&&(this.logger.verbose("Page was restored from back/forward cache. Clearing temporary cache."),this.browserStorage.cleanRequestByState(t.state),this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE,exports.InteractionType.Redirect))};try{const o=await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,this.logger,this.performanceClient,this.correlationId)(t),i=await invokeAsync(this.createAuthCodeClient.bind(this),PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,this.logger,this.performanceClient,this.correlationId)({serverTelemetryManager:r,requestAuthority:t.authority,requestAzureCloudOptions:t.azureCloudOptions,requestExtraQueryParameters:t.extraQueryParameters,account:t.account}),a=new RedirectHandler(i,this.browserStorage,o,this.logger,this.performanceClient),s=await i.getAuthCodeUrl({...t,nativeBroker:NativeMessageHandler.isNativeAvailable(this.config,this.logger,this.nativeMessageHandler,e.authenticationScheme)}),c=this.getRedirectStartPage(e.redirectStartPage);return this.logger.verbosePii(`Redirect start page: ${c}`),window.addEventListener("pageshow",n),await a.initiateAuthRequest(s,{navigationClient:this.navigationClient,redirectTimeout:this.config.system.redirectNavigationTimeout,redirectStartPage:c,onRedirectNavigate:e.onRedirectNavigate||this.config.auth.onRedirectNavigate})}catch(o){throw o instanceof AuthError&&(o.setCorrelationId(this.correlationId),r.cacheFailedRequest(o)),window.removeEventListener("pageshow",n),this.browserStorage.cleanRequestByState(t.state),o}}async handleRedirectPromise(e="",t){const r=this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);try{if(!this.browserStorage.isInteractionInProgress(!0))return this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null."),null;const[n,o]=this.getRedirectResponse(e||"");if(!n)return this.logger.info("handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache."),this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect),t.event.errorCode="no_server_response",null;const i=this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI,!0)||Constants.EMPTY_STRING,a=UrlString.removeHashFromUrl(i);if(a===UrlString.removeHashFromUrl(window.location.href)&&this.config.auth.navigateToLoginRequestUrl){this.logger.verbose("Current page is loginRequestUrl, handling response"),i.indexOf("#")>-1&&replaceHash(i);return await this.handleResponse(n,r)}if(!this.config.auth.navigateToLoginRequestUrl)return this.logger.verbose("NavigateToLoginRequestUrl set to false, handling response"),await this.handleResponse(n,r);if(!isInIframe()||this.config.system.allowRedirectInIframe){this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH,o,!0);const e={apiId:ApiId.handleRedirectPromise,timeout:this.config.system.redirectNavigationTimeout,noHistory:!0};let t=!0;if(i&&"null"!==i)this.logger.verbose(`Navigating to loginRequestUrl: ${i}`),t=await this.navigationClient.navigateInternal(i,e);else{const r=getHomepage();this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI,r,!0),this.logger.warning("Unable to get valid login request url from cache, redirecting to home page"),t=await this.navigationClient.navigateInternal(r,e)}if(!t)return await this.handleResponse(n,r)}return null}catch(n){throw n instanceof AuthError&&(n.setCorrelationId(this.correlationId),r.cacheFailedRequest(n)),this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect),n}}getRedirectResponse(e){this.logger.verbose("getRedirectResponseHash called");let t=e;t||(t=this.config.auth.OIDCOptions.serverResponseType===ServerResponseType.QUERY?window.location.search:window.location.hash);let r=getDeserializedResponse(t);if(r){try{validateInteractionType(r,this.browserCrypto,exports.InteractionType.Redirect)}catch(o){return o instanceof AuthError&&this.logger.error(`Interaction type validation failed due to ${o.errorCode}: ${o.errorMessage}`),[null,""]}return clearHash(window),this.logger.verbose("Hash contains known properties, returning response hash"),[r,t]}const n=this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH,!0);return this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH)),n&&(r=getDeserializedResponse(n),r)?(this.logger.verbose("Hash does not contain known properties, returning cached hash"),[r,n]):[null,""]}async handleResponse(e,t){const r=e.state;if(!r)throw createBrowserAuthError(noStateInHash);const n=this.browserStorage.getCachedRequest(r);if(this.logger.verbose("handleResponse called, retrieved cached request"),e.accountId){if(this.logger.verbose("Account id found in hash, calling WAM for token"),!this.nativeMessageHandler)throw createBrowserAuthError(nativeConnectionNotEstablished);const t=new NativeInteractionClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,ApiId.acquireTokenPopup,this.performanceClient,this.nativeMessageHandler,e.accountId,this.nativeStorage,n.correlationId),{userRequestState:o}=ProtocolUtils.parseRequestState(this.browserCrypto,r);return t.acquireToken({...n,state:o,prompt:void 0}).finally((()=>{this.browserStorage.cleanRequestByState(r)}))}const o=this.browserStorage.getCachedAuthority(r);if(!o)throw createBrowserAuthError(noCachedAuthorityError);const i=await invokeAsync(this.createAuthCodeClient.bind(this),PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,this.logger,this.performanceClient,this.correlationId)({serverTelemetryManager:t,requestAuthority:o});ThrottlingUtils.removeThrottle(this.browserStorage,this.config.auth.clientId,n);return new RedirectHandler(i,this.browserStorage,n,this.logger,this.performanceClient).handleCodeResponse(e,r)}async logout(e){this.logger.verbose("logoutRedirect called");const t=this.initializeLogoutRequest(e),r=this.initializeServerTelemetryManager(ApiId.logout);try{this.eventHandler.emitEvent(EventType.LOGOUT_START,exports.InteractionType.Redirect,e),await this.clearCacheOnLogout(t.account);const n={apiId:ApiId.logout,timeout:this.config.system.redirectNavigationTimeout,noHistory:!1},o=await invokeAsync(this.createAuthCodeClient.bind(this),PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,this.logger,this.performanceClient,this.correlationId)({serverTelemetryManager:r,requestAuthority:e&&e.authority,requestExtraQueryParameters:e?.extraQueryParameters,account:e&&e.account||void 0});if(o.authority.protocolMode===ProtocolMode.OIDC)try{o.authority.endSessionEndpoint}catch{if(t.account?.homeAccountId)return this.browserStorage.removeAccount(t.account?.homeAccountId),void this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS,exports.InteractionType.Redirect,t)}const i=o.getLogoutUri(t);if(this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS,exports.InteractionType.Redirect,t),!e||"function"!==typeof e.onRedirectNavigate)return this.browserStorage.getInteractionInProgress()||this.browserStorage.setInteractionInProgress(!0),void await this.navigationClient.navigateExternal(i,n);if(!1!==e.onRedirectNavigate(i))return this.logger.verbose("Logout onRedirectNavigate did not return false, navigating"),this.browserStorage.getInteractionInProgress()||this.browserStorage.setInteractionInProgress(!0),void await this.navigationClient.navigateExternal(i,n);this.browserStorage.setInteractionInProgress(!1),this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation")}catch(n){throw n instanceof AuthError&&(n.setCorrelationId(this.correlationId),r.cacheFailedRequest(n)),this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE,exports.InteractionType.Redirect,null,n),this.eventHandler.emitEvent(EventType.LOGOUT_END,exports.InteractionType.Redirect),n}this.eventHandler.emitEvent(EventType.LOGOUT_END,exports.InteractionType.Redirect)}getRedirectStartPage(e){const t=e||window.location.href;return UrlString.getAbsoluteUrl(t,getCurrentUri())}}async function initiateAuthRequest(e,t,r,n,o){if(t.addQueueMeasurement(PerformanceEvents.SilentHandlerInitiateAuthRequest,n),!e)throw r.info("Navigate url is empty"),createBrowserAuthError(emptyNavigateUri);return o?invokeAsync(loadFrame,PerformanceEvents.SilentHandlerLoadFrame,r,t,n)(e,o,t,n):invoke(loadFrameSync,PerformanceEvents.SilentHandlerLoadFrameSync,r,t,n)(e)}async function monitorIframeForHash(e,t,r,n,o,i,a){return n.addQueueMeasurement(PerformanceEvents.SilentHandlerMonitorIframeForHash,i),new Promise(((n,i)=>{t<1e4&&o.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${t}ms) than the default (10000ms). This may result in timeouts.`);const s=window.setTimeout((()=>{window.clearInterval(c),i(createBrowserAuthError(monitorWindowTimeout))}),t),c=window.setInterval((()=>{let t="";const r=e.contentWindow;try{t=r?r.location.href:""}catch(i){}if(!t||"about:blank"===t)return;let o="";r&&(o=a===ServerResponseType.QUERY?r.location.search:r.location.hash),window.clearTimeout(s),window.clearInterval(c),n(o)}),r)})).finally((()=>{invoke(removeHiddenIframe,PerformanceEvents.RemoveHiddenIframe,o,n,i)(e)}))}function loadFrame(e,t,r,n){return r.addQueueMeasurement(PerformanceEvents.SilentHandlerLoadFrame,n),new Promise(((r,n)=>{const o=createHiddenIframe();window.setTimeout((()=>{o?(o.src=e,r(o)):n("Unable to load iframe")}),t)}))}function loadFrameSync(e){const t=createHiddenIframe();return t.src=e,t}function createHiddenIframe(){const e=document.createElement("iframe");return e.className="msalSilentIframe",e.style.visibility="hidden",e.style.position="absolute",e.style.width=e.style.height="0",e.style.border="0",e.setAttribute("sandbox","allow-scripts allow-same-origin allow-forms"),document.body.appendChild(e),e}function removeHiddenIframe(e){document.body===e.parentNode&&document.body.removeChild(e)}class SilentIframeClient extends StandardInteractionClient{constructor(e,t,r,n,o,i,a,s,c,l,d){super(e,t,r,n,o,i,s,l,d),this.apiId=a,this.nativeStorage=c}async acquireToken(e){this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken,e.correlationId),e.loginHint||e.sid||e.account&&e.account.username||this.logger.warning("No user hint provided. The authorization server may need more information to complete this request.");const t={...e};t.prompt?t.prompt!==PromptValue.NONE&&t.prompt!==PromptValue.NO_SESSION&&(this.logger.warning(`SilentIframeClient. Replacing invalid prompt ${t.prompt} with ${PromptValue.NONE}`),t.prompt=PromptValue.NONE):t.prompt=PromptValue.NONE;const r=await invokeAsync(this.initializeAuthorizationRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,this.logger,this.performanceClient,e.correlationId)(t,exports.InteractionType.Silent);preconnect(r.authority);const n=this.initializeServerTelemetryManager(this.apiId);let o;try{return o=await invokeAsync(this.createAuthCodeClient.bind(this),PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,this.logger,this.performanceClient,e.correlationId)({serverTelemetryManager:n,requestAuthority:r.authority,requestAzureCloudOptions:r.azureCloudOptions,requestExtraQueryParameters:r.extraQueryParameters,account:r.account}),await invokeAsync(this.silentTokenHelper.bind(this),PerformanceEvents.SilentIframeClientTokenHelper,this.logger,this.performanceClient,e.correlationId)(o,r)}catch(i){if(i instanceof AuthError&&(i.setCorrelationId(this.correlationId),n.cacheFailedRequest(i)),!o||!(i instanceof AuthError)||i.errorCode!==BrowserConstants.INVALID_GRANT_ERROR)throw i;this.performanceClient.addFields({retryError:i.errorCode},this.correlationId);const r=await invokeAsync(this.initializeAuthorizationRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,this.logger,this.performanceClient,e.correlationId)(t,exports.InteractionType.Silent);return await invokeAsync(this.silentTokenHelper.bind(this),PerformanceEvents.SilentIframeClientTokenHelper,this.logger,this.performanceClient,this.correlationId)(o,r)}}logout(){return Promise.reject(createBrowserAuthError(silentLogoutUnsupported))}async silentTokenHelper(e,t){const r=t.correlationId;this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper,r);const n=await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,this.logger,this.performanceClient,r)(t),o=await invokeAsync(e.getAuthCodeUrl.bind(e),PerformanceEvents.GetAuthCodeUrl,this.logger,this.performanceClient,r)({...t,nativeBroker:NativeMessageHandler.isNativeAvailable(this.config,this.logger,this.nativeMessageHandler,t.authenticationScheme)}),i=new InteractionHandler(e,this.browserStorage,n,this.logger,this.performanceClient),a=await invokeAsync(initiateAuthRequest,PerformanceEvents.SilentHandlerInitiateAuthRequest,this.logger,this.performanceClient,r)(o,this.performanceClient,this.logger,r,this.config.system.navigateFrameWait),s=this.config.auth.OIDCOptions.serverResponseType,c=await invokeAsync(monitorIframeForHash,PerformanceEvents.SilentHandlerMonitorIframeForHash,this.logger,this.performanceClient,r)(a,this.config.system.iframeHashTimeout,this.config.system.pollIntervalMilliseconds,this.performanceClient,this.logger,r,s),l=invoke(deserializeResponse,PerformanceEvents.DeserializeResponse,this.logger,this.performanceClient,this.correlationId)(c,s,this.logger);if(l.accountId){if(this.logger.verbose("Account id found in hash, calling WAM for token"),!this.nativeMessageHandler)throw createBrowserAuthError(nativeConnectionNotEstablished);const e=new NativeInteractionClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,this.apiId,this.performanceClient,this.nativeMessageHandler,l.accountId,this.browserStorage,r),{userRequestState:n}=ProtocolUtils.parseRequestState(this.browserCrypto,t.state);return invokeAsync(e.acquireToken.bind(e),PerformanceEvents.NativeInteractionClientAcquireToken,this.logger,this.performanceClient,r)({...t,state:n,prompt:t.prompt||PromptValue.NONE})}return invokeAsync(i.handleCodeResponse.bind(i),PerformanceEvents.HandleCodeResponse,this.logger,this.performanceClient,r)(l,t)}}class SilentRefreshClient extends StandardInteractionClient{async acquireToken(e){this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken,e.correlationId);const t=await invokeAsync(initializeBaseRequest,PerformanceEvents.InitializeBaseRequest,this.logger,this.performanceClient,e.correlationId)(e,this.config,this.performanceClient,this.logger),r={...e,...t};e.redirectUri&&(r.redirectUri=this.getRedirectUri(e.redirectUri));const n=this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow),o=await this.createRefreshTokenClient({serverTelemetryManager:n,authorityUrl:r.authority,azureCloudOptions:r.azureCloudOptions,account:r.account});return invokeAsync(o.acquireTokenByRefreshToken.bind(o),PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,this.logger,this.performanceClient,e.correlationId)(r).catch((e=>{throw e.setCorrelationId(this.correlationId),n.cacheFailedRequest(e),e}))}logout(){return Promise.reject(createBrowserAuthError(silentLogoutUnsupported))}async createRefreshTokenClient(e){const t=await invokeAsync(this.getClientConfiguration.bind(this),PerformanceEvents.StandardInteractionClientGetClientConfiguration,this.logger,this.performanceClient,this.correlationId)({serverTelemetryManager:e.serverTelemetryManager,requestAuthority:e.authorityUrl,requestAzureCloudOptions:e.azureCloudOptions,requestExtraQueryParameters:e.extraQueryParameters,account:e.account});return new RefreshTokenClient(t,this.performanceClient)}}class TokenCache{constructor(e,t,r,n){this.isBrowserEnvironment="undefined"!==typeof window,this.config=e,this.storage=t,this.logger=r,this.cryptoObj=n}loadExternalTokens(e,t,r){if(!this.isBrowserEnvironment)throw createBrowserAuthError(nonBrowserEnvironment);const n=t.id_token?extractTokenClaims(t.id_token,base64Decode):void 0,o={protocolMode:this.config.auth.protocolMode,knownAuthorities:this.config.auth.knownAuthorities,cloudDiscoveryMetadata:this.config.auth.cloudDiscoveryMetadata,authorityMetadata:this.config.auth.authorityMetadata,skipAuthorityMetadataCache:this.config.auth.skipAuthorityMetadataCache},i=e.authority?new Authority(Authority.generateAuthority(e.authority,e.azureCloudOptions),this.config.system.networkClient,this.storage,o,this.logger,e.correlationId||createNewGuid()):void 0,a=this.loadAccount(e,r.clientInfo||t.client_info||"",n,i),s=this.loadIdToken(t,a.homeAccountId,a.environment,a.realm),c=this.loadAccessToken(e,t,a.homeAccountId,a.environment,a.realm,r),l=this.loadRefreshToken(t,a.homeAccountId,a.environment);return this.generateAuthenticationResult(e,{account:a,idToken:s,accessToken:c,refreshToken:l},n,i)}loadAccount(e,t,r,n){if(this.logger.verbose("TokenCache - loading account"),e.account){const t=AccountEntity.createFromAccountInfo(e.account);return this.storage.setAccount(t),t}if(!n||!t&&!r)throw this.logger.error("TokenCache - if an account is not provided on the request, authority and either clientInfo or idToken must be provided instead."),createBrowserAuthError(unableToLoadToken);const o=AccountEntity.generateHomeAccountId(t,n.authorityType,this.logger,this.cryptoObj,r),i=r?.tid,a=buildAccountToCache(this.storage,n,o,base64Decode,r,t,n.hostnameAndPort,i,void 0,void 0,this.logger);return this.storage.setAccount(a),a}loadIdToken(e,t,r,n){if(!e.id_token)return this.logger.verbose("TokenCache - no id token found in response"),null;this.logger.verbose("TokenCache - loading id token");const o=createIdTokenEntity(t,r,e.id_token,this.config.auth.clientId,n);return this.storage.setIdTokenCredential(o),o}loadAccessToken(e,t,r,n,o,i){if(!t.access_token)return this.logger.verbose("TokenCache - no access token found in response"),null;if(!t.expires_in)return this.logger.error("TokenCache - no expiration set on the access token. Cannot add it to the cache."),null;if(!t.scope&&(!e.scopes||!e.scopes.length))return this.logger.error("TokenCache - scopes not specified in the request or response. Cannot add token to the cache."),null;this.logger.verbose("TokenCache - loading access token");const a=t.scope?ScopeSet.fromString(t.scope):new ScopeSet(e.scopes),s=i.expiresOn||t.expires_in+(new Date).getTime()/1e3,c=i.extendedExpiresOn||(t.ext_expires_in||t.expires_in)+(new Date).getTime()/1e3,l=createAccessTokenEntity(r,n,t.access_token,this.config.auth.clientId,o,a.printScopes(),s,c,base64Decode);return this.storage.setAccessTokenCredential(l),l}loadRefreshToken(e,t,r){if(!e.refresh_token)return this.logger.verbose("TokenCache - no refresh token found in response"),null;this.logger.verbose("TokenCache - loading refresh token");const n=createRefreshTokenEntity(t,r,e.refresh_token,this.config.auth.clientId,e.foci,void 0,e.refresh_token_expires_in);return this.storage.setRefreshTokenCredential(n),n}generateAuthenticationResult(e,t,r,n){let o,i="",a=[],s=null;t?.accessToken&&(i=t.accessToken.secret,a=ScopeSet.fromString(t.accessToken.target).asArray(),s=new Date(1e3*Number(t.accessToken.expiresOn)),o=new Date(1e3*Number(t.accessToken.extendedExpiresOn)));const c=t.account;return{authority:n?n.canonicalAuthority:"",uniqueId:t.account.localAccountId,tenantId:t.account.realm,scopes:a,account:c.getAccountInfo(),idToken:t.idToken?.secret||"",idTokenClaims:r||{},accessToken:i,fromCache:!0,expiresOn:s,correlationId:e.correlationId||"",requestId:"",extExpiresOn:o,familyId:t.refreshToken?.familyId||"",tokenType:t?.accessToken?.tokenType||"",state:e.state||"",cloudGraphHostName:c.cloudGraphHostName||"",msGraphHost:c.msGraphHost||"",fromNativeBroker:!1}}}class HybridSpaAuthorizationCodeClient extends AuthorizationCodeClient{constructor(e){super(e),this.includeRedirectUri=!1}}class SilentAuthCodeClient extends StandardInteractionClient{constructor(e,t,r,n,o,i,a,s,c,l){super(e,t,r,n,o,i,s,c,l),this.apiId=a}async acquireToken(e){if(!e.code)throw createBrowserAuthError(authCodeRequired);const t=await invokeAsync(this.initializeAuthorizationRequest.bind(this),PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,this.logger,this.performanceClient,e.correlationId)(e,exports.InteractionType.Silent),r=this.initializeServerTelemetryManager(this.apiId);try{const n={...t,code:e.code},o=await invokeAsync(this.getClientConfiguration.bind(this),PerformanceEvents.StandardInteractionClientGetClientConfiguration,this.logger,this.performanceClient,e.correlationId)({serverTelemetryManager:r,requestAuthority:t.authority,requestAzureCloudOptions:t.azureCloudOptions,requestExtraQueryParameters:t.extraQueryParameters,account:t.account}),i=new HybridSpaAuthorizationCodeClient(o);this.logger.verbose("Auth code client created");const a=new InteractionHandler(i,this.browserStorage,n,this.logger,this.performanceClient);return await invokeAsync(a.handleCodeResponseFromServer.bind(a),PerformanceEvents.HandleCodeResponseFromServer,this.logger,this.performanceClient,e.correlationId)({code:e.code,msgraph_host:e.msGraphHost,cloud_graph_host_name:e.cloudGraphHostName,cloud_instance_host_name:e.cloudInstanceHostName},t,!1)}catch(n){throw n instanceof AuthError&&(n.setCorrelationId(this.correlationId),r.cacheFailedRequest(n)),n}}logout(){return Promise.reject(createBrowserAuthError(silentLogoutUnsupported))}}function getAccountType(e){const t=e?.idTokenClaims;return t?.tfp||t?.acr?"B2C":t?.tid?"9188040d-6c67-4c5b-b112-36a304b66dad"===t?.tid?"MSA":"AAD":void 0}function preflightCheck(e,t){try{preflightCheck$1(e)}catch(r){throw t.end({success:!1},r),r}}class StandardController{constructor(e){this.operatingContext=e,this.isBrowserEnvironment=this.operatingContext.isBrowserEnvironment(),this.config=e.getConfig(),this.initialized=!1,this.logger=this.operatingContext.getLogger(),this.networkClient=this.config.system.networkClient,this.navigationClient=this.config.system.navigationClient,this.redirectResponse=new Map,this.hybridAuthCodeResponses=new Map,this.performanceClient=this.config.telemetry.client,this.browserCrypto=this.isBrowserEnvironment?new CryptoOps(this.logger,this.performanceClient):DEFAULT_CRYPTO_IMPLEMENTATION,this.eventHandler=new EventHandler(this.logger,this.browserCrypto),this.browserStorage=this.isBrowserEnvironment?new BrowserCacheManager(this.config.auth.clientId,this.config.cache,this.browserCrypto,this.logger,buildStaticAuthorityOptions(this.config.auth),this.performanceClient):DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId,this.logger);const t={cacheLocation:BrowserCacheLocation.MemoryStorage,temporaryCacheLocation:BrowserCacheLocation.MemoryStorage,storeAuthStateInCookie:!1,secureCookies:!1,cacheMigrationEnabled:!1,claimsBasedCachingEnabled:!1};this.nativeInternalStorage=new BrowserCacheManager(this.config.auth.clientId,t,this.browserCrypto,this.logger,void 0,this.performanceClient),this.tokenCache=new TokenCache(this.config,this.browserStorage,this.logger,this.browserCrypto),this.activeSilentTokenRequests=new Map,this.trackPageVisibility=this.trackPageVisibility.bind(this),this.trackPageVisibilityWithMeasurement=this.trackPageVisibilityWithMeasurement.bind(this)}static async createController(e,t){const r=new StandardController(e);return await r.initialize(t),r}trackPageVisibility(e){e&&(this.logger.info("Perf: Visibility change detected"),this.performanceClient.incrementFields({visibilityChangeCount:1},e))}async initialize(e){if(this.logger.trace("initialize called"),this.initialized)return void this.logger.info("initialize has already been called, exiting early.");const t=e?.correlationId||this.getRequestCorrelationId(),r=this.config.system.allowNativeBroker,n=this.performanceClient.startMeasurement(PerformanceEvents.InitializeClientApplication,t);if(this.eventHandler.emitEvent(EventType.INITIALIZE_START),r)try{this.nativeExtensionProvider=await NativeMessageHandler.createProvider(this.logger,this.config.system.nativeBrokerHandshakeTimeout,this.performanceClient)}catch(o){this.logger.verbose(o)}this.config.cache.claimsBasedCachingEnabled||(this.logger.verbose("Claims-based caching is disabled. Clearing the previous cache with claims"),await invokeAsync(this.browserStorage.clearTokensAndKeysWithClaims.bind(this.browserStorage),PerformanceEvents.ClearTokensAndKeysWithClaims,this.logger,this.performanceClient,t)(this.performanceClient,t)),this.initialized=!0,this.eventHandler.emitEvent(EventType.INITIALIZE_END),n.end({allowNativeBroker:r,success:!0})}async handleRedirectPromise(e){if(this.logger.verbose("handleRedirectPromise called"),blockAPICallsBeforeInitialize(this.initialized),this.isBrowserEnvironment){const t=e||"";let r=this.redirectResponse.get(t);return"undefined"===typeof r?(r=this.handleRedirectPromiseInternal(e),this.redirectResponse.set(t,r),this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise")):this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call"),r}return this.logger.verbose("handleRedirectPromise returns null, not browser environment"),null}async handleRedirectPromiseInternal(e){const t=this.getAllAccounts(),r=this.browserStorage.getCachedNativeRequest(),n=r&&NativeMessageHandler.isNativeAvailable(this.config,this.logger,this.nativeExtensionProvider)&&this.nativeExtensionProvider&&!e,o=n?r?.correlationId:this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CORRELATION_ID,!0)||"",i=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenRedirect,o);let a;if(this.eventHandler.emitEvent(EventType.HANDLE_REDIRECT_START,exports.InteractionType.Redirect),n&&this.nativeExtensionProvider){this.logger.trace("handleRedirectPromise - acquiring token from native platform");const e=new NativeInteractionClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,ApiId.handleRedirectPromise,this.performanceClient,this.nativeExtensionProvider,r.accountId,this.nativeInternalStorage,r.correlationId);a=invokeAsync(e.handleRedirectPromise.bind(e),PerformanceEvents.HandleNativeRedirectPromiseMeasurement,this.logger,this.performanceClient,i.event.correlationId)(this.performanceClient,i.event.correlationId)}else{this.logger.trace("handleRedirectPromise - acquiring token from web flow");const t=this.createRedirectClient(o);a=invokeAsync(t.handleRedirectPromise.bind(t),PerformanceEvents.HandleRedirectPromiseMeasurement,this.logger,this.performanceClient,i.event.correlationId)(e,i)}return a.then((e=>{if(e){t.length<this.getAllAccounts().length?(this.eventHandler.emitEvent(EventType.LOGIN_SUCCESS,exports.InteractionType.Redirect,e),this.logger.verbose("handleRedirectResponse returned result, login success")):(this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS,exports.InteractionType.Redirect,e),this.logger.verbose("handleRedirectResponse returned result, acquire token success")),i.end({success:!0,accountType:getAccountType(e.account)})}else i.event.errorCode?i.end({success:!1}):i.discard();return this.eventHandler.emitEvent(EventType.HANDLE_REDIRECT_END,exports.InteractionType.Redirect),e})).catch((e=>{const r=e;throw t.length>0?this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE,exports.InteractionType.Redirect,null,r):this.eventHandler.emitEvent(EventType.LOGIN_FAILURE,exports.InteractionType.Redirect,null,r),this.eventHandler.emitEvent(EventType.HANDLE_REDIRECT_END,exports.InteractionType.Redirect),i.end({success:!1},r),e}))}async acquireTokenRedirect(e){const t=this.getRequestCorrelationId(e);this.logger.verbose("acquireTokenRedirect called",t);const r=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPreRedirect,t);r.add({accountType:getAccountType(e.account),scenarioId:e.scenarioId});const n=e.onRedirectNavigate;if(n)e.onRedirectNavigate=e=>{const t="function"===typeof n?n(e):void 0;return!1!==t?r.end({success:!0}):r.discard(),t};else{const e=this.config.auth.onRedirectNavigate;this.config.auth.onRedirectNavigate=t=>{const n="function"===typeof e?e(t):void 0;return!1!==n?r.end({success:!0}):r.discard(),n}}const o=this.getAllAccounts().length>0;try{let n;if(redirectPreflightCheck(this.initialized,this.config),this.browserStorage.setInteractionInProgress(!0),o?this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START,exports.InteractionType.Redirect,e):this.eventHandler.emitEvent(EventType.LOGIN_START,exports.InteractionType.Redirect,e),this.nativeExtensionProvider&&this.canUseNative(e)){n=new NativeInteractionClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,ApiId.acquireTokenRedirect,this.performanceClient,this.nativeExtensionProvider,this.getNativeAccountId(e),this.nativeInternalStorage,t).acquireTokenRedirect(e,r).catch((r=>{if(r instanceof NativeAuthError&&isFatalNativeAuthError(r)){this.nativeExtensionProvider=void 0;return this.createRedirectClient(t).acquireToken(e)}if(r instanceof InteractionRequiredAuthError){this.logger.verbose("acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow");return this.createRedirectClient(t).acquireToken(e)}throw this.browserStorage.setInteractionInProgress(!1),r}))}else{n=this.createRedirectClient(t).acquireToken(e)}return await n}catch(i){throw r.end({success:!1},i),o?this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE,exports.InteractionType.Redirect,null,i):this.eventHandler.emitEvent(EventType.LOGIN_FAILURE,exports.InteractionType.Redirect,null,i),i}}acquireTokenPopup(e){const t=this.getRequestCorrelationId(e),r=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup,t);r.add({scenarioId:e.scenarioId,accountType:getAccountType(e.account)});try{this.logger.verbose("acquireTokenPopup called",t),preflightCheck(this.initialized,r),this.browserStorage.setInteractionInProgress(!0)}catch(i){return Promise.reject(i)}const n=this.getAllAccounts();let o;if(n.length>0?this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START,exports.InteractionType.Popup,e):this.eventHandler.emitEvent(EventType.LOGIN_START,exports.InteractionType.Popup,e),this.canUseNative(e))o=this.acquireTokenNative({...e,correlationId:t},ApiId.acquireTokenPopup).then((e=>(this.browserStorage.setInteractionInProgress(!1),r.end({success:!0,isNativeBroker:!0,requestId:e.requestId,accountType:getAccountType(e.account)}),e))).catch((r=>{if(r instanceof NativeAuthError&&isFatalNativeAuthError(r)){this.nativeExtensionProvider=void 0;return this.createPopupClient(t).acquireToken(e)}if(r instanceof InteractionRequiredAuthError){this.logger.verbose("acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow");return this.createPopupClient(t).acquireToken(e)}throw this.browserStorage.setInteractionInProgress(!1),r}));else{o=this.createPopupClient(t).acquireToken(e)}return o.then((e=>(n.length<this.getAllAccounts().length?this.eventHandler.emitEvent(EventType.LOGIN_SUCCESS,exports.InteractionType.Popup,e):this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS,exports.InteractionType.Popup,e),r.end({success:!0,requestId:e.requestId,accessTokenSize:e.accessToken.length,idTokenSize:e.idToken.length,accountType:getAccountType(e.account)}),e))).catch((e=>(n.length>0?this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE,exports.InteractionType.Popup,null,e):this.eventHandler.emitEvent(EventType.LOGIN_FAILURE,exports.InteractionType.Popup,null,e),r.end({success:!1},e),Promise.reject(e))))}trackPageVisibilityWithMeasurement(){const e=this.ssoSilentMeasurement||this.acquireTokenByCodeAsyncMeasurement;e&&(this.logger.info("Perf: Visibility change detected in ",e.event.name),e.increment({visibilityChangeCount:1}))}async ssoSilent(e){const t=this.getRequestCorrelationId(e),r={...e,prompt:e.prompt,correlationId:t};let n;if(this.ssoSilentMeasurement=this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent,t),this.ssoSilentMeasurement?.add({scenarioId:e.scenarioId,accountType:getAccountType(e.account)}),preflightCheck(this.initialized,this.ssoSilentMeasurement),this.ssoSilentMeasurement?.increment({visibilityChangeCount:0}),document.addEventListener("visibilitychange",this.trackPageVisibilityWithMeasurement),this.logger.verbose("ssoSilent called",t),this.eventHandler.emitEvent(EventType.SSO_SILENT_START,exports.InteractionType.Silent,r),this.canUseNative(r))n=this.acquireTokenNative(r,ApiId.ssoSilent).catch((e=>{if(e instanceof NativeAuthError&&isFatalNativeAuthError(e)){this.nativeExtensionProvider=void 0;return this.createSilentIframeClient(r.correlationId).acquireToken(r)}throw e}));else{n=this.createSilentIframeClient(r.correlationId).acquireToken(r)}return n.then((e=>(this.eventHandler.emitEvent(EventType.SSO_SILENT_SUCCESS,exports.InteractionType.Silent,e),this.ssoSilentMeasurement?.end({success:!0,isNativeBroker:e.fromNativeBroker,requestId:e.requestId,accessTokenSize:e.accessToken.length,idTokenSize:e.idToken.length,accountType:getAccountType(e.account)}),e))).catch((e=>{throw this.eventHandler.emitEvent(EventType.SSO_SILENT_FAILURE,exports.InteractionType.Silent,null,e),this.ssoSilentMeasurement?.end({success:!1},e),e})).finally((()=>{document.removeEventListener("visibilitychange",this.trackPageVisibilityWithMeasurement)}))}async acquireTokenByCode(e){const t=this.getRequestCorrelationId(e);this.logger.trace("acquireTokenByCode called",t);const r=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenByCode,t);preflightCheck(this.initialized,r),this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_BY_CODE_START,exports.InteractionType.Silent,e),r.add({scenarioId:e.scenarioId});try{if(e.code&&e.nativeAccountId)throw createBrowserAuthError(spaCodeAndNativeAccountIdPresent);if(e.code){const n=e.code;let o=this.hybridAuthCodeResponses.get(n);return o?(this.logger.verbose("Existing acquireTokenByCode request found",t),r.discard()):(this.logger.verbose("Initiating new acquireTokenByCode request",t),o=this.acquireTokenByCodeAsync({...e,correlationId:t}).then((e=>(this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS,exports.InteractionType.Silent,e),this.hybridAuthCodeResponses.delete(n),r.end({success:!0,isNativeBroker:e.fromNativeBroker,requestId:e.requestId,accessTokenSize:e.accessToken.length,idTokenSize:e.idToken.length,accountType:getAccountType(e.account)}),e))).catch((e=>{throw this.hybridAuthCodeResponses.delete(n),this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE,exports.InteractionType.Silent,null,e),r.end({success:!1},e),e})),this.hybridAuthCodeResponses.set(n,o)),await o}if(e.nativeAccountId){if(this.canUseNative(e,e.nativeAccountId)){const n=await this.acquireTokenNative({...e,correlationId:t},ApiId.acquireTokenByCode,e.nativeAccountId).catch((e=>{throw e instanceof NativeAuthError&&isFatalNativeAuthError(e)&&(this.nativeExtensionProvider=void 0),e}));return r.end({accountType:getAccountType(n.account),success:!0}),n}throw createBrowserAuthError(unableToAcquireTokenFromNativePlatform)}throw createBrowserAuthError(authCodeOrNativeAccountIdRequired)}catch(n){throw this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE,exports.InteractionType.Silent,null,n),r.end({success:!1},n),n}}async acquireTokenByCodeAsync(e){this.logger.trace("acquireTokenByCodeAsync called",e.correlationId),this.acquireTokenByCodeAsyncMeasurement=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenByCodeAsync,e.correlationId),this.acquireTokenByCodeAsyncMeasurement?.increment({visibilityChangeCount:0}),document.addEventListener("visibilitychange",this.trackPageVisibilityWithMeasurement);const t=this.createSilentAuthCodeClient(e.correlationId);return await t.acquireToken(e).then((e=>(this.acquireTokenByCodeAsyncMeasurement?.end({success:!0,fromCache:e.fromCache,isNativeBroker:e.fromNativeBroker,requestId:e.requestId}),e))).catch((e=>{throw this.acquireTokenByCodeAsyncMeasurement?.end({success:!1},e),e})).finally((()=>{document.removeEventListener("visibilitychange",this.trackPageVisibilityWithMeasurement)}))}async acquireTokenFromCache(e,t){switch(this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenFromCache,e.correlationId),t){case CacheLookupPolicy.Default:case CacheLookupPolicy.AccessToken:case CacheLookupPolicy.AccessTokenAndRefreshToken:const t=this.createSilentCacheClient(e.correlationId);return invokeAsync(t.acquireToken.bind(t),PerformanceEvents.SilentCacheClientAcquireToken,this.logger,this.performanceClient,e.correlationId)(e);default:throw createClientAuthError(tokenRefreshRequired)}}async acquireTokenByRefreshToken(e,t){switch(this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenByRefreshToken,e.correlationId),t){case CacheLookupPolicy.Default:case CacheLookupPolicy.AccessTokenAndRefreshToken:case CacheLookupPolicy.RefreshToken:case CacheLookupPolicy.RefreshTokenAndNetwork:const t=this.createSilentRefreshClient(e.correlationId);return invokeAsync(t.acquireToken.bind(t),PerformanceEvents.SilentRefreshClientAcquireToken,this.logger,this.performanceClient,e.correlationId)(e);default:throw createClientAuthError(tokenRefreshRequired)}}async acquireTokenBySilentIframe(e){this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenBySilentIframe,e.correlationId);const t=this.createSilentIframeClient(e.correlationId);return invokeAsync(t.acquireToken.bind(t),PerformanceEvents.SilentIframeClientAcquireToken,this.logger,this.performanceClient,e.correlationId)(e)}async logout(e){const t=this.getRequestCorrelationId(e);return this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.",t),this.logoutRedirect({correlationId:t,...e})}async logoutRedirect(e){const t=this.getRequestCorrelationId(e);redirectPreflightCheck(this.initialized,this.config),this.browserStorage.setInteractionInProgress(!0);return this.createRedirectClient(t).logout(e)}logoutPopup(e){try{const t=this.getRequestCorrelationId(e);preflightCheck$1(this.initialized),this.browserStorage.setInteractionInProgress(!0);return this.createPopupClient(t).logout(e)}catch(t){return Promise.reject(t)}}async clearCache(e){const t=this.getRequestCorrelationId(e);return this.createSilentCacheClient(t).logout(e)}getAllAccounts(e){return getAllAccounts(this.logger,this.browserStorage,this.isBrowserEnvironment,e)}getAccount(e){return getAccount(e,this.logger,this.browserStorage)}getAccountByUsername(e){return getAccountByUsername(e,this.logger,this.browserStorage)}getAccountByHomeId(e){return getAccountByHomeId(e,this.logger,this.browserStorage)}getAccountByLocalId(e){return getAccountByLocalId(e,this.logger,this.browserStorage)}setActiveAccount(e){setActiveAccount(e,this.browserStorage)}getActiveAccount(){return getActiveAccount(this.browserStorage)}async hydrateCache(e,t){this.logger.verbose("hydrateCache called");const r=AccountEntity.createFromAccountInfo(e.account,e.cloudGraphHostName,e.msGraphHost);return this.browserStorage.setAccount(r),e.fromNativeBroker?(this.logger.verbose("Response was from native broker, storing in-memory"),this.nativeInternalStorage.hydrateCache(e,t)):this.browserStorage.hydrateCache(e,t)}async acquireTokenNative(e,t,r){if(this.logger.trace("acquireTokenNative called"),!this.nativeExtensionProvider)throw createBrowserAuthError(nativeConnectionNotEstablished);return new NativeInteractionClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,t,this.performanceClient,this.nativeExtensionProvider,r||this.getNativeAccountId(e),this.nativeInternalStorage,e.correlationId).acquireToken(e)}canUseNative(e,t){if(this.logger.trace("canUseNative called"),!NativeMessageHandler.isNativeAvailable(this.config,this.logger,this.nativeExtensionProvider,e.authenticationScheme))return this.logger.trace("canUseNative: isNativeAvailable returned false, returning false"),!1;if(e.prompt)switch(e.prompt){case PromptValue.NONE:case PromptValue.CONSENT:case PromptValue.LOGIN:this.logger.trace("canUseNative: prompt is compatible with native flow");break;default:return this.logger.trace(`canUseNative: prompt = ${e.prompt} is not compatible with native flow, returning false`),!1}return!(!t&&!this.getNativeAccountId(e))||(this.logger.trace("canUseNative: nativeAccountId is not available, returning false"),!1)}getNativeAccountId(e){const t=e.account||this.getAccount({loginHint:e.loginHint,sid:e.sid})||this.getActiveAccount();return t&&t.nativeAccountId||""}createPopupClient(e){return new PopupClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,this.performanceClient,this.nativeInternalStorage,this.nativeExtensionProvider,e)}createRedirectClient(e){return new RedirectClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,this.performanceClient,this.nativeInternalStorage,this.nativeExtensionProvider,e)}createSilentIframeClient(e){return new SilentIframeClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,ApiId.ssoSilent,this.performanceClient,this.nativeInternalStorage,this.nativeExtensionProvider,e)}createSilentCacheClient(e){return new SilentCacheClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,this.performanceClient,this.nativeExtensionProvider,e)}createSilentRefreshClient(e){return new SilentRefreshClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,this.performanceClient,this.nativeExtensionProvider,e)}createSilentAuthCodeClient(e){return new SilentAuthCodeClient(this.config,this.browserStorage,this.browserCrypto,this.logger,this.eventHandler,this.navigationClient,ApiId.acquireTokenByCode,this.performanceClient,this.nativeExtensionProvider,e)}addEventCallback(e){return this.eventHandler.addEventCallback(e)}removeEventCallback(e){this.eventHandler.removeEventCallback(e)}addPerformanceCallback(e){return this.performanceClient.addPerformanceCallback(e)}removePerformanceCallback(e){return this.performanceClient.removePerformanceCallback(e)}enableAccountStorageEvents(){this.eventHandler.enableAccountStorageEvents()}disableAccountStorageEvents(){this.eventHandler.disableAccountStorageEvents()}getTokenCache(){return this.tokenCache}getLogger(){return this.logger}setLogger(e){this.logger=e}initializeWrapperLibrary(e,t){this.browserStorage.setWrapperMetadata(e,t)}setNavigationClient(e){this.navigationClient=e}getConfiguration(){return this.config}getPerformanceClient(){return this.performanceClient}isBrowserEnv(){return this.isBrowserEnvironment}getEventHandler(){return this.eventHandler}getRequestCorrelationId(e){return e?.correlationId?e.correlationId:this.isBrowserEnvironment?createNewGuid():Constants.EMPTY_STRING}async loginRedirect(e){const t=this.getRequestCorrelationId(e);return this.logger.verbose("loginRedirect called",t),this.acquireTokenRedirect({correlationId:t,...e||DEFAULT_REQUEST})}loginPopup(e){const t=this.getRequestCorrelationId(e);return this.logger.verbose("loginPopup called",t),this.acquireTokenPopup({correlationId:t,...e||DEFAULT_REQUEST})}async acquireTokenSilent(e){const t=this.getRequestCorrelationId(e),r=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent,t);r.add({cacheLookupPolicy:e.cacheLookupPolicy,scenarioId:e.scenarioId}),preflightCheck(this.initialized,r),this.logger.verbose("acquireTokenSilent called",t);const n=e.account||this.getActiveAccount();if(!n)throw createBrowserAuthError(noAccountError);r.add({accountType:getAccountType(n)});const o={clientId:this.config.auth.clientId,authority:e.authority||Constants.EMPTY_STRING,scopes:e.scopes,homeAccountIdentifier:n.homeAccountId,claims:e.claims,authenticationScheme:e.authenticationScheme,resourceRequestMethod:e.resourceRequestMethod,resourceRequestUri:e.resourceRequestUri,shrClaims:e.shrClaims,sshKid:e.sshKid,shrOptions:e.shrOptions},i=JSON.stringify(o),a=this.activeSilentTokenRequests.get(i);if("undefined"===typeof a){this.logger.verbose("acquireTokenSilent called for the first time, storing active request",t);const o=invokeAsync(this.acquireTokenSilentAsync.bind(this),PerformanceEvents.AcquireTokenSilentAsync,this.logger,this.performanceClient,t)({...e,correlationId:t},n).then((t=>(this.activeSilentTokenRequests.delete(i),r.end({success:!0,fromCache:t.fromCache,isNativeBroker:t.fromNativeBroker,cacheLookupPolicy:e.cacheLookupPolicy,requestId:t.requestId,accessTokenSize:t.accessToken.length,idTokenSize:t.idToken.length}),t))).catch((e=>{throw this.activeSilentTokenRequests.delete(i),r.end({success:!1},e),e}));return this.activeSilentTokenRequests.set(i,o),{...await o,state:e.state}}return this.logger.verbose("acquireTokenSilent has been called previously, returning the result from the first call",t),r.discard(),{...await a,state:e.state}}async acquireTokenSilentAsync(e,t){const r=()=>this.trackPageVisibility(e.correlationId);this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync,e.correlationId),this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START,exports.InteractionType.Silent,e),e.correlationId&&this.performanceClient.incrementFields({visibilityChangeCount:0},e.correlationId),document.addEventListener("visibilitychange",r);const n=await invokeAsync(initializeSilentRequest,PerformanceEvents.InitializeSilentRequest,this.logger,this.performanceClient,e.correlationId)(e,t,this.config,this.performanceClient,this.logger),o=e.cacheLookupPolicy||CacheLookupPolicy.Default;return this.acquireTokenSilentNoIframe(n,o).catch((async e=>{if(checkIfRefreshTokenErrorCanBeResolvedSilently(e,o)){if(this.activeIframeRequest){if(o!==CacheLookupPolicy.Skip){const[t,r]=this.activeIframeRequest;this.logger.verbose(`Iframe request is already in progress, awaiting resolution for request with correlationId: ${r}`,n.correlationId);const i=this.performanceClient.startMeasurement(PerformanceEvents.AwaitConcurrentIframe,n.correlationId);i.add({awaitIframeCorrelationId:r});const a=await t;if(i.end({success:a}),a)return this.logger.verbose(`Parallel iframe request with correlationId: ${r} succeeded. Retrying cache and/or RT redemption`,n.correlationId),this.acquireTokenSilentNoIframe(n,o);throw this.logger.info(`Iframe request with correlationId: ${r} failed. Interaction is required.`),e}return this.logger.warning("Another iframe request is currently in progress and CacheLookupPolicy is set to Skip. This may result in degraded performance and/or reliability for both calls. Please consider changing the CacheLookupPolicy to take advantage of request queuing and token cache.",n.correlationId),invokeAsync(this.acquireTokenBySilentIframe.bind(this),PerformanceEvents.AcquireTokenBySilentIframe,this.logger,this.performanceClient,n.correlationId)(n)}{let e;return this.activeIframeRequest=[new Promise((t=>{e=t})),n.correlationId],this.logger.verbose("Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.",n.correlationId),invokeAsync(this.acquireTokenBySilentIframe.bind(this),PerformanceEvents.AcquireTokenBySilentIframe,this.logger,this.performanceClient,n.correlationId)(n).then((t=>(e(!0),t))).catch((t=>{throw e(!1),t})).finally((()=>{this.activeIframeRequest=void 0}))}}throw e})).then((t=>(this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS,exports.InteractionType.Silent,t),e.correlationId&&this.performanceClient.addFields({fromCache:t.fromCache,isNativeBroker:t.fromNativeBroker,requestId:t.requestId},e.correlationId),t))).catch((e=>{throw this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE,exports.InteractionType.Silent,null,e),e})).finally((()=>{document.removeEventListener("visibilitychange",r)}))}async acquireTokenSilentNoIframe(e,t){return NativeMessageHandler.isNativeAvailable(this.config,this.logger,this.nativeExtensionProvider,e.authenticationScheme)&&e.account.nativeAccountId?(this.logger.verbose("acquireTokenSilent - attempting to acquire token from native platform"),this.acquireTokenNative(e,ApiId.acquireTokenSilent_silentFlow).catch((async e=>{if(e instanceof NativeAuthError&&isFatalNativeAuthError(e))throw this.logger.verbose("acquireTokenSilent - native platform unavailable, falling back to web flow"),this.nativeExtensionProvider=void 0,createClientAuthError(tokenRefreshRequired);throw e}))):(this.logger.verbose("acquireTokenSilent - attempting to acquire token from web flow"),invokeAsync(this.acquireTokenFromCache.bind(this),PerformanceEvents.AcquireTokenFromCache,this.logger,this.performanceClient,e.correlationId)(e,t).catch((r=>{if(t===CacheLookupPolicy.AccessToken)throw r;return this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START,exports.InteractionType.Silent,e),invokeAsync(this.acquireTokenByRefreshToken.bind(this),PerformanceEvents.AcquireTokenByRefreshToken,this.logger,this.performanceClient,e.correlationId)(e,t)})))}}function checkIfRefreshTokenErrorCanBeResolvedSilently(e,t){const r=!(e instanceof InteractionRequiredAuthError&&e.subError!==badToken),n=e.errorCode===BrowserConstants.INVALID_GRANT_ERROR||e.errorCode===tokenRefreshRequired,o=r&&n||e.errorCode===noTokensFound||e.errorCode===refreshTokenExpired,i=iFrameRenewalPolicies.includes(t);return o&&i}function isBridgeError(e){return void 0!==e.status}class NestedAppAuthAdapter{constructor(e,t,r,n){this.clientId=e,this.clientCapabilities=t,this.crypto=r,this.logger=n}toNaaTokenRequest(e){let t;t=void 0===e.extraQueryParameters?new Map:new Map(Object.entries(e.extraQueryParameters));const r=(new RequestParameterBuilder).addClientCapabilitiesToClaims(e.claims,this.clientCapabilities),n=e.scopes||OIDC_DEFAULT_SCOPES;return{platformBrokerId:e.account?.homeAccountId,clientId:this.clientId,authority:e.authority,scope:n.join(" "),correlationId:void 0!==e.correlationId?e.correlationId:this.crypto.createNewGuid(),claims:StringUtils.isEmptyObj(r)?void 0:r,state:e.state,authenticationScheme:e.authenticationScheme||AuthenticationScheme.BEARER,extraParameters:t}}fromNaaTokenResponse(e,t,r){if(!t.token.id_token||!t.token.access_token)throw createClientAuthError(nullOrEmptyToken);const n=new Date(1e3*(r+(t.token.expires_in||0))),o=extractTokenClaims(t.token.id_token,this.crypto.base64Decode),i=this.fromNaaAccountInfo(t.account,t.token.id_token,o),a=t.token.scope||e.scope;return{authority:t.token.authority||i.environment,uniqueId:i.localAccountId,tenantId:i.tenantId,scopes:a.split(" "),account:i,idToken:t.token.id_token,idTokenClaims:o,accessToken:t.token.access_token,fromCache:!1,expiresOn:n,tokenType:e.authenticationScheme||AuthenticationScheme.BEARER,correlationId:e.correlationId,extExpiresOn:n,state:e.state}}fromNaaAccountInfo(e,t,r){const n=r||e.idTokenClaims,o=e.localAccountId||n?.oid||n?.sub||"",i=e.tenantId||n?.tid||"",a=e.homeAccountId||`${o}.${i}`,s=e.username||n?.preferred_username||"",c=e.name||n?.name,l=new Map,d=buildTenantProfile(a,o,i,n);l.set(i,d);return{homeAccountId:a,environment:e.environment,tenantId:i,username:s,localAccountId:o,name:c,idToken:t,idTokenClaims:n,tenantProfiles:l}}fromBridgeError(e){if(!isBridgeError(e))return new AuthError("unknown_error","An unknown error occurred");switch(e.status){case BridgeStatusCode.UserCancel:return new ClientAuthError(userCanceled);case BridgeStatusCode.NoNetwork:return new ClientAuthError(noNetworkConnectivity$1);case BridgeStatusCode.AccountUnavailable:return new ClientAuthError(noAccountFound);case BridgeStatusCode.Disabled:return new ClientAuthError(nestedAppAuthBridgeDisabled);case BridgeStatusCode.NestedAppAuthUnavailable:return new ClientAuthError(e.code||nestedAppAuthBridgeDisabled,e.description);case BridgeStatusCode.TransientError:case BridgeStatusCode.PersistentError:return new ServerError(e.code,e.description);case BridgeStatusCode.UserInteractionRequired:return new InteractionRequiredAuthError(e.code,e.description);default:return new AuthError(e.code,e.description)}}toAuthenticationResultFromCache(e,t,r,n,o){if(!t||!r)throw createClientAuthError(nullOrEmptyToken);const i=extractTokenClaims(t.secret,this.crypto.base64Decode),a=r.target||n.scopes.join(" ");return{authority:r.environment||e.environment,uniqueId:e.localAccountId,tenantId:e.tenantId,scopes:a.split(" "),account:e,idToken:t.secret,idTokenClaims:i||{},accessToken:r.secret,fromCache:!0,expiresOn:new Date(1e3*Number(r.expiresOn)),tokenType:n.authenticationScheme||AuthenticationScheme.BEARER,correlationId:o,extExpiresOn:new Date(1e3*Number(r.extendedExpiresOn)),state:n.state}}}const NestedAppAuthErrorMessage={unsupportedMethod:{code:"unsupported_method",desc:"This method is not supported in nested app environment."}};class NestedAppAuthError extends AuthError{constructor(e,t){super(e,t),Object.setPrototypeOf(this,NestedAppAuthError.prototype),this.name="NestedAppAuthError"}static createUnsupportedError(){return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code,NestedAppAuthErrorMessage.unsupportedMethod.desc)}}class NestedAppAuthController{constructor(e){this.operatingContext=e;const t=this.operatingContext.getBridgeProxy();if(void 0===t)throw new Error("unexpected: bridgeProxy is undefined");this.bridgeProxy=t,this.config=e.getConfig(),this.logger=this.operatingContext.getLogger(),this.performanceClient=this.config.telemetry.client,this.browserCrypto=e.isBrowserEnvironment()?new CryptoOps(this.logger,this.performanceClient):DEFAULT_CRYPTO_IMPLEMENTATION,this.browserStorage=this.operatingContext.isBrowserEnvironment()?new BrowserCacheManager(this.config.auth.clientId,this.config.cache,this.browserCrypto,this.logger,buildStaticAuthorityOptions(this.config.auth)):DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId,this.logger),this.eventHandler=new EventHandler(this.logger,this.browserCrypto),this.nestedAppAuthAdapter=new NestedAppAuthAdapter(this.config.auth.clientId,this.config.auth.clientCapabilities,this.browserCrypto,this.logger);const r=this.bridgeProxy.getAccountContext();if(r){setActiveAccount(getAccount(r,this.logger,this.browserStorage),this.browserStorage)}}getEventHandler(){return this.eventHandler}static async createController(e){const t=new NestedAppAuthController(e);return Promise.resolve(t)}initialize(){return Promise.resolve()}ensureValidRequest(e){return e?.correlationId?e:{...e,correlationId:this.browserCrypto.createNewGuid()}}async acquireTokenInteractive(e){const t=this.ensureValidRequest(e);this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START,exports.InteractionType.Popup,t);const r=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup,t.correlationId);r?.add({nestedAppAuthRequest:!0});try{const n=this.nestedAppAuthAdapter.toNaaTokenRequest(t),o=nowSeconds(),i=await this.bridgeProxy.getTokenInteractive(n),a=this.nestedAppAuthAdapter.fromNaaTokenResponse(n,i,o);return await this.hydrateCache(a,e),this.browserStorage.setActiveAccount(a.account),this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS,exports.InteractionType.Popup,a),r.add({accessTokenSize:a.accessToken.length,idTokenSize:a.idToken.length}),r.end({success:!0,requestId:a.requestId}),a}catch(n){const e=this.nestedAppAuthAdapter.fromBridgeError(n);throw this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE,exports.InteractionType.Popup,null,n),r.end({success:!1},n),e}}async acquireTokenSilentInternal(e){const t=this.ensureValidRequest(e);this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START,exports.InteractionType.Silent,t);const r=await this.acquireTokenFromCache(t);if(r)return this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS,exports.InteractionType.Silent,r),r;const n=this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent,t.correlationId);n?.increment({visibilityChangeCount:0}),n?.add({nestedAppAuthRequest:!0});try{const r=this.nestedAppAuthAdapter.toNaaTokenRequest(t),o=nowSeconds(),i=await this.bridgeProxy.getTokenSilent(r),a=this.nestedAppAuthAdapter.fromNaaTokenResponse(r,i,o);return await this.hydrateCache(a,e),this.browserStorage.setActiveAccount(a.account),this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS,exports.InteractionType.Silent,a),n?.add({accessTokenSize:a.accessToken.length,idTokenSize:a.idToken.length}),n?.end({success:!0,requestId:a.requestId}),a}catch(o){const e=this.nestedAppAuthAdapter.fromBridgeError(o);throw this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE,exports.InteractionType.Silent,null,o),n?.end({success:!1},o),e}}async acquireTokenFromCache(e){const t=this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent,e.correlationId);t?.add({nestedAppAuthRequest:!0});const r=await this.acquireTokenFromCacheInternal(e);return r?(this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS,exports.InteractionType.Silent,r),t?.add({accessTokenSize:r?.accessToken.length,idTokenSize:r?.idToken.length}),t?.end({success:!0}),r):(this.logger.error("Cached tokens are not found for the account, proceeding with silent token request."),this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE,exports.InteractionType.Silent,null),t?.end({success:!1}),null)}async acquireTokenFromCacheInternal(e){const t=this.bridgeProxy.getAccountContext();let r=null;if(t){r=getAccount(t,this.logger,this.browserStorage)||e.account}if(!r)return this.logger.verbose("No active account found, falling back to the host"),Promise.resolve(null);this.logger.verbose("active account found, attempting to acquire token silently");const n={...e,correlationId:e.correlationId||this.browserCrypto.createNewGuid(),authority:e.authority||r.environment,scopes:e.scopes?.length?e.scopes:[...OIDC_DEFAULT_SCOPES]},o=this.browserStorage.getTokenKeys(),i=this.browserStorage.getAccessToken(r,n,o,r.tenantId,this.performanceClient,n.correlationId);if(!i)return this.logger.verbose("No cached access token found"),Promise.resolve(null);if(wasClockTurnedBack(i.cachedAt)||isTokenExpired(i.expiresOn,this.config.system.tokenRenewalOffsetSeconds)){this.logger.verbose("Cached access token has expired, deleting all related tokens from cache");const e=AccountEntity.createFromAccountInfo(r);return await this.browserStorage.removeAccountContext(e),Promise.resolve(null)}const a=this.browserStorage.getIdToken(r,o,r.tenantId,this.performanceClient,n.correlationId);return a?this.nestedAppAuthAdapter.toAuthenticationResultFromCache(r,a,i,n,n.correlationId):(this.logger.verbose("No cached id token found"),Promise.resolve(null))}async acquireTokenPopup(e){return this.acquireTokenInteractive(e)}acquireTokenRedirect(e){throw NestedAppAuthError.createUnsupportedError()}async acquireTokenSilent(e){return this.acquireTokenSilentInternal(e)}acquireTokenByCode(e){throw NestedAppAuthError.createUnsupportedError()}acquireTokenNative(e,t,r){throw NestedAppAuthError.createUnsupportedError()}acquireTokenByRefreshToken(e,t){throw NestedAppAuthError.createUnsupportedError()}addEventCallback(e){return this.eventHandler.addEventCallback(e)}removeEventCallback(e){this.eventHandler.removeEventCallback(e)}addPerformanceCallback(e){throw NestedAppAuthError.createUnsupportedError()}removePerformanceCallback(e){throw NestedAppAuthError.createUnsupportedError()}enableAccountStorageEvents(){throw NestedAppAuthError.createUnsupportedError()}disableAccountStorageEvents(){throw NestedAppAuthError.createUnsupportedError()}getAllAccounts(e){return getAllAccounts(this.logger,this.browserStorage,this.isBrowserEnv(),e)}getAccount(e){return getAccount(e,this.logger,this.browserStorage)}getAccountByUsername(e){return getAccountByUsername(e,this.logger,this.browserStorage)}getAccountByHomeId(e){return getAccountByHomeId(e,this.logger,this.browserStorage)}getAccountByLocalId(e){return getAccountByLocalId(e,this.logger,this.browserStorage)}setActiveAccount(e){return setActiveAccount(e,this.browserStorage)}getActiveAccount(){return getActiveAccount(this.browserStorage)}handleRedirectPromise(e){return Promise.resolve(null)}loginPopup(e){return this.acquireTokenInteractive(e||DEFAULT_REQUEST)}loginRedirect(e){throw NestedAppAuthError.createUnsupportedError()}logout(e){throw NestedAppAuthError.createUnsupportedError()}logoutRedirect(e){throw NestedAppAuthError.createUnsupportedError()}logoutPopup(e){throw NestedAppAuthError.createUnsupportedError()}ssoSilent(e){return this.acquireTokenSilentInternal(e)}getTokenCache(){throw NestedAppAuthError.createUnsupportedError()}getLogger(){return this.logger}setLogger(e){this.logger=e}initializeWrapperLibrary(e,t){}setNavigationClient(e){this.logger.warning("setNavigationClient is not supported in nested app auth")}getConfiguration(){return this.config}isBrowserEnv(){return this.operatingContext.isBrowserEnvironment()}getBrowserCrypto(){return this.browserCrypto}getPerformanceClient(){throw NestedAppAuthError.createUnsupportedError()}getRedirectResponse(){throw NestedAppAuthError.createUnsupportedError()}async clearCache(e){throw NestedAppAuthError.createUnsupportedError()}async hydrateCache(e,t){this.logger.verbose("hydrateCache called");const r=AccountEntity.createFromAccountInfo(e.account,e.cloudGraphHostName,e.msGraphHost);return this.browserStorage.setAccount(r),this.browserStorage.hydrateCache(e,t)}}async function createV3Controller(e,t){const r=new StandardOperatingContext(e);return await r.initialize(),StandardController.createController(r,t)}async function createController(e){const t=new StandardOperatingContext(e),r=new NestedAppOperatingContext(e),n=[t.initialize(),r.initialize()];return await Promise.all(n),r.isAvailable()&&e.auth.supportsNestedAppAuth?NestedAppAuthController.createController(r):t.isAvailable()?StandardController.createController(t):null}class PublicClientApplication{static async createPublicClientApplication(e){const t=await createV3Controller(e);return new PublicClientApplication(e,t)}constructor(e,t){this.controller=t||new StandardController(new StandardOperatingContext(e))}async initialize(e){return this.controller.initialize(e)}async acquireTokenPopup(e){return this.controller.acquireTokenPopup(e)}acquireTokenRedirect(e){return this.controller.acquireTokenRedirect(e)}acquireTokenSilent(e){return this.controller.acquireTokenSilent(e)}acquireTokenByCode(e){return this.controller.acquireTokenByCode(e)}addEventCallback(e){return this.controller.addEventCallback(e)}removeEventCallback(e){return this.controller.removeEventCallback(e)}addPerformanceCallback(e){return this.controller.addPerformanceCallback(e)}removePerformanceCallback(e){return this.controller.removePerformanceCallback(e)}enableAccountStorageEvents(){this.controller.enableAccountStorageEvents()}disableAccountStorageEvents(){this.controller.disableAccountStorageEvents()}getAccount(e){return this.controller.getAccount(e)}getAccountByHomeId(e){return this.controller.getAccountByHomeId(e)}getAccountByLocalId(e){return this.controller.getAccountByLocalId(e)}getAccountByUsername(e){return this.controller.getAccountByUsername(e)}getAllAccounts(e){return this.controller.getAllAccounts(e)}handleRedirectPromise(e){return this.controller.handleRedirectPromise(e)}loginPopup(e){return this.controller.loginPopup(e)}loginRedirect(e){return this.controller.loginRedirect(e)}logout(e){return this.controller.logout(e)}logoutRedirect(e){return this.controller.logoutRedirect(e)}logoutPopup(e){return this.controller.logoutPopup(e)}ssoSilent(e){return this.controller.ssoSilent(e)}getTokenCache(){return this.controller.getTokenCache()}getLogger(){return this.controller.getLogger()}setLogger(e){this.controller.setLogger(e)}setActiveAccount(e){this.controller.setActiveAccount(e)}getActiveAccount(){return this.controller.getActiveAccount()}initializeWrapperLibrary(e,t){return this.controller.initializeWrapperLibrary(e,t)}setNavigationClient(e){this.controller.setNavigationClient(e)}getConfiguration(){return this.controller.getConfiguration()}async hydrateCache(e,t){return this.controller.hydrateCache(e,t)}clearCache(e){return this.controller.clearCache(e)}}async function createNestablePublicClientApplication(e){const t=new NestedAppOperatingContext(e);if(await t.initialize(),t.isAvailable()){const r=new NestedAppAuthController(t);return new PublicClientApplication(e,r)}return createStandardPublicClientApplication(e)}async function createStandardPublicClientApplication(e){const t=new PublicClientApplication(e);return await t.initialize(),t}class UnknownOperatingContextController{constructor(e){this.initialized=!1,this.operatingContext=e,this.isBrowserEnvironment=this.operatingContext.isBrowserEnvironment(),this.config=e.getConfig(),this.logger=e.getLogger(),this.performanceClient=this.config.telemetry.client,this.browserCrypto=this.isBrowserEnvironment?new CryptoOps(this.logger,this.performanceClient):DEFAULT_CRYPTO_IMPLEMENTATION,this.browserStorage=this.isBrowserEnvironment?new BrowserCacheManager(this.config.auth.clientId,this.config.cache,this.browserCrypto,this.logger,void 0,this.performanceClient):DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId,this.logger),this.eventHandler=new EventHandler(this.logger,this.browserCrypto)}getBrowserStorage(){return this.browserStorage}getEventHandler(){return this.eventHandler}getAccount(e){return null}getAccountByHomeId(e){return null}getAccountByLocalId(e){return null}getAccountByUsername(e){return null}getAllAccounts(){return[]}initialize(){return this.initialized=!0,Promise.resolve()}acquireTokenPopup(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}acquireTokenRedirect(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),Promise.resolve()}acquireTokenSilent(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}acquireTokenByCode(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}acquireTokenNative(e,t,r){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}acquireTokenByRefreshToken(e,t){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}addEventCallback(e){return this.eventHandler.addEventCallback(e)}removeEventCallback(e){this.eventHandler.removeEventCallback(e)}addPerformanceCallback(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),""}removePerformanceCallback(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),!0}enableAccountStorageEvents(){blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment()}disableAccountStorageEvents(){blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment()}handleRedirectPromise(e){return blockAPICallsBeforeInitialize(this.initialized),Promise.resolve(null)}loginPopup(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}loginRedirect(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}logout(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}logoutRedirect(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}logoutPopup(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}ssoSilent(e){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}getTokenCache(){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}getLogger(){return this.logger}setLogger(e){blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment()}setActiveAccount(e){blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment()}getActiveAccount(){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),null}initializeWrapperLibrary(e,t){this.browserStorage.setWrapperMetadata(e,t)}setNavigationClient(e){blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment()}getConfiguration(){return this.config}isBrowserEnv(){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),!0}getBrowserCrypto(){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}getPerformanceClient(){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}getRedirectResponse(){return blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment(),{}}async clearCache(e){blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment()}async hydrateCache(e,t){blockAPICallsBeforeInitialize(this.initialized),blockNonBrowserEnvironment()}}class UnknownOperatingContext extends BaseOperatingContext{getId(){return UnknownOperatingContext.ID}getModuleName(){return UnknownOperatingContext.MODULE_NAME}async initialize(){return!0}}UnknownOperatingContext.MODULE_NAME="",UnknownOperatingContext.ID="UnknownOperatingContext";class PublicClientNext{static async createPublicClientApplication(e){const t=await createController(e);let r;return r=null!==t?new PublicClientNext(e,t):new PublicClientNext(e),r}constructor(e,t){if(this.configuration=e,t)this.controller=t;else{const t=new UnknownOperatingContext(e);this.controller=new UnknownOperatingContextController(t)}}async initialize(){if(this.controller instanceof UnknownOperatingContextController){const e=await createController(this.configuration);return null!==e&&(this.controller=e),this.controller.initialize()}return Promise.resolve()}async acquireTokenPopup(e){return this.controller.acquireTokenPopup(e)}acquireTokenRedirect(e){return this.controller.acquireTokenRedirect(e)}acquireTokenSilent(e){return this.controller.acquireTokenSilent(e)}acquireTokenByCode(e){return this.controller.acquireTokenByCode(e)}addEventCallback(e){return this.controller.addEventCallback(e)}removeEventCallback(e){return this.controller.removeEventCallback(e)}addPerformanceCallback(e){return this.controller.addPerformanceCallback(e)}removePerformanceCallback(e){return this.controller.removePerformanceCallback(e)}enableAccountStorageEvents(){this.controller.enableAccountStorageEvents()}disableAccountStorageEvents(){this.controller.disableAccountStorageEvents()}getAccount(e){return this.controller.getAccount(e)}getAccountByHomeId(e){return this.controller.getAccountByHomeId(e)}getAccountByLocalId(e){return this.controller.getAccountByLocalId(e)}getAccountByUsername(e){return this.controller.getAccountByUsername(e)}getAllAccounts(e){return this.controller.getAllAccounts(e)}handleRedirectPromise(e){return this.controller.handleRedirectPromise(e)}loginPopup(e){return this.controller.loginPopup(e)}loginRedirect(e){return this.controller.loginRedirect(e)}logout(e){return this.controller.logout(e)}logoutRedirect(e){return this.controller.logoutRedirect(e)}logoutPopup(e){return this.controller.logoutPopup(e)}ssoSilent(e){return this.controller.ssoSilent(e)}getTokenCache(){return this.controller.getTokenCache()}getLogger(){return this.controller.getLogger()}setLogger(e){this.controller.setLogger(e)}setActiveAccount(e){this.controller.setActiveAccount(e)}getActiveAccount(){return this.controller.getActiveAccount()}initializeWrapperLibrary(e,t){return this.controller.initializeWrapperLibrary(e,t)}setNavigationClient(e){this.controller.setNavigationClient(e)}getConfiguration(){return this.controller.getConfiguration()}async hydrateCache(e,t){return this.controller.hydrateCache(e,t)}clearCache(e){return this.controller.clearCache(e)}}const stubbedPublicClientApplication={initialize:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),acquireTokenPopup:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),acquireTokenRedirect:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),acquireTokenSilent:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),acquireTokenByCode:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),getAllAccounts:()=>[],getAccount:()=>null,getAccountByHomeId:()=>null,getAccountByUsername:()=>null,getAccountByLocalId:()=>null,handleRedirectPromise:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),loginPopup:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),loginRedirect:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),logout:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),logoutRedirect:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),logoutPopup:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),ssoSilent:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),addEventCallback:()=>null,removeEventCallback:()=>{},addPerformanceCallback:()=>"",removePerformanceCallback:()=>!1,enableAccountStorageEvents:()=>{},disableAccountStorageEvents:()=>{},getTokenCache:()=>{throw createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)},getLogger:()=>{throw createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)},setLogger:()=>{},setActiveAccount:()=>{},getActiveAccount:()=>null,initializeWrapperLibrary:()=>{},setNavigationClient:()=>{},getConfiguration:()=>{throw createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)},hydrateCache:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled)),clearCache:()=>Promise.reject(createBrowserConfigurationAuthError(stubbedPublicClientApplicationCalled))};class EventMessageUtils{static getInteractionStatusFromEvent(e,t){switch(e.eventType){case EventType.LOGIN_START:return InteractionStatus.Login;case EventType.SSO_SILENT_START:return InteractionStatus.SsoSilent;case EventType.ACQUIRE_TOKEN_START:if(e.interactionType===exports.InteractionType.Redirect||e.interactionType===exports.InteractionType.Popup)return InteractionStatus.AcquireToken;break;case EventType.HANDLE_REDIRECT_START:return InteractionStatus.HandleRedirect;case EventType.LOGOUT_START:return InteractionStatus.Logout;case EventType.SSO_SILENT_SUCCESS:case EventType.SSO_SILENT_FAILURE:if(t&&t!==InteractionStatus.SsoSilent)break;return InteractionStatus.None;case EventType.LOGOUT_END:if(t&&t!==InteractionStatus.Logout)break;return InteractionStatus.None;case EventType.HANDLE_REDIRECT_END:if(t&&t!==InteractionStatus.HandleRedirect)break;return InteractionStatus.None;case EventType.LOGIN_SUCCESS:case EventType.LOGIN_FAILURE:case EventType.ACQUIRE_TOKEN_SUCCESS:case EventType.ACQUIRE_TOKEN_FAILURE:case EventType.RESTORE_FROM_BFCACHE:if(e.interactionType===exports.InteractionType.Redirect||e.interactionType===exports.InteractionType.Popup){if(t&&t!==InteractionStatus.Login&&t!==InteractionStatus.AcquireToken)break;return InteractionStatus.None}}return null}}class SignedHttpRequest{constructor(e,t){const r=t&&t.loggerOptions||{};this.logger=new Logger(r,name,version),this.cryptoOps=new CryptoOps(this.logger),this.popTokenGenerator=new PopTokenGenerator(this.cryptoOps),this.shrParameters=e}async generatePublicKeyThumbprint(){const{kid:e}=await this.popTokenGenerator.generateKid(this.shrParameters);return e}async signRequest(e,t,r){return this.popTokenGenerator.signPayload(e,t,this.shrParameters,r)}async removeKeys(e){return this.cryptoOps.removeTokenBindingKey(e)}}function getPerfMeasurementModule(){let e;try{e=window[BrowserCacheLocation.SessionStorage];const t=e?.getItem(BROWSER_PERF_ENABLED_KEY);if(1===Number(t))return Promise.resolve().then((function(){return BrowserPerformanceMeasurement$1}))}catch(t){}}function supportsBrowserPerformanceNow(){return"undefined"!==typeof window&&"undefined"!==typeof window.performance&&"function"===typeof window.performance.now}function getPerfDurationMs(e){if(e&&supportsBrowserPerformanceNow())return Math.round(window.performance.now()-e)}class BrowserPerformanceClient extends PerformanceClient{constructor(e,t,r){super(e.auth.clientId,e.auth.authority||`${Constants.DEFAULT_AUTHORITY}`,new Logger(e.system?.loggerOptions||{},name,version),name,version,e.telemetry?.application||{appName:"",appVersion:""},t,r)}generateId(){return createNewGuid()}getPageVisibility(){return document.visibilityState?.toString()||null}deleteIncompleteSubMeasurements(e){getPerfMeasurementModule()?.then((t=>{const r=this.eventsByCorrelationId.get(e.event.correlationId),n=r&&r.eventId===e.event.eventId,o=[];n&&r?.incompleteSubMeasurements&&r.incompleteSubMeasurements.forEach((e=>{o.push({...e})})),t.BrowserPerformanceMeasurement.flushMeasurements(e.event.correlationId,o)}))}startMeasurement(e,t){const r=this.getPageVisibility(),n=super.startMeasurement(e,t),o=supportsBrowserPerformanceNow()?window.performance.now():void 0,i=getPerfMeasurementModule()?.then((t=>new t.BrowserPerformanceMeasurement(e,n.event.correlationId)));return i?.then((e=>e.startMeasurement())),{...n,end:(e,t)=>{const a=n.end({...e,startPageVisibility:r,endPageVisibility:this.getPageVisibility(),durationMs:getPerfDurationMs(o)},t);return i?.then((e=>e.endMeasurement())),this.deleteIncompleteSubMeasurements(n),a},discard:()=>{n.discard(),i?.then((e=>e.flushMeasurement())),this.deleteIncompleteSubMeasurements(n)}}}setPreQueueTime(e,t){if(!supportsBrowserPerformanceNow())return void this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${e}`);if(!t)return void this.logger.trace(`BrowserPerformanceClient: correlationId for ${e} not provided, unable to set telemetry queue time`);const r=this.preQueueTimeByCorrelationId.get(t);r&&(this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${r.name} found`,t),this.addQueueMeasurement(r.name,t,void 0,!0)),this.preQueueTimeByCorrelationId.set(t,{name:e,time:window.performance.now()})}addQueueMeasurement(e,t,r,n){if(!supportsBrowserPerformanceNow())return void this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${e}`);if(!t)return void this.logger.trace(`BrowserPerformanceClient: correlationId for ${e} not provided, unable to add queue measurement`);const o=super.getPreQueueTime(e,t);if(!o)return;const i=window.performance.now(),a=r||super.calculateQueuedTime(o,i);return super.addQueueMeasurement(e,t,a,n)}}class BrowserPerformanceMeasurement{constructor(e,t){this.correlationId=t,this.measureName=BrowserPerformanceMeasurement.makeMeasureName(e,t),this.startMark=BrowserPerformanceMeasurement.makeStartMark(e,t),this.endMark=BrowserPerformanceMeasurement.makeEndMark(e,t)}static makeMeasureName(e,t){return`msal.measure.${e}.${t}`}static makeStartMark(e,t){return`msal.start.${e}.${t}`}static makeEndMark(e,t){return`msal.end.${e}.${t}`}static supportsBrowserPerformance(){return"undefined"!==typeof window&&"undefined"!==typeof window.performance&&"function"===typeof window.performance.mark&&"function"===typeof window.performance.measure&&"function"===typeof window.performance.clearMarks&&"function"===typeof window.performance.clearMeasures&&"function"===typeof window.performance.getEntriesByName}static flushMeasurements(e,t){if(BrowserPerformanceMeasurement.supportsBrowserPerformance())try{t.forEach((t=>{const r=BrowserPerformanceMeasurement.makeMeasureName(t.name,e);window.performance.getEntriesByName(r,"measure").length>0&&(window.performance.clearMeasures(r),window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(r,e)),window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(r,e)))}))}catch(r){}}startMeasurement(){if(BrowserPerformanceMeasurement.supportsBrowserPerformance())try{window.performance.mark(this.startMark)}catch(e){}}endMeasurement(){if(BrowserPerformanceMeasurement.supportsBrowserPerformance())try{window.performance.mark(this.endMark),window.performance.measure(this.measureName,this.startMark,this.endMark)}catch(e){}}flushMeasurement(){if(BrowserPerformanceMeasurement.supportsBrowserPerformance())try{const e=window.performance.getEntriesByName(this.measureName,"measure");if(e.length>0){const t=e[0].duration;return window.performance.clearMeasures(this.measureName),window.performance.clearMarks(this.startMark),window.performance.clearMarks(this.endMark),t}}catch(e){}return null}}var BrowserPerformanceMeasurement$1=Object.freeze({__proto__:null,BrowserPerformanceMeasurement:BrowserPerformanceMeasurement});exports.AccountEntity=AccountEntity,exports.ApiId=ApiId,exports.AuthError=AuthError,exports.AuthErrorCodes=AuthErrorCodes,exports.AuthErrorMessage=AuthErrorMessage,exports.AuthenticationHeaderParser=AuthenticationHeaderParser,exports.AuthenticationScheme=AuthenticationScheme,exports.AzureCloudInstance=AzureCloudInstance,exports.BrowserAuthError=BrowserAuthError,exports.BrowserAuthErrorCodes=BrowserAuthErrorCodes,exports.BrowserAuthErrorMessage=BrowserAuthErrorMessage,exports.BrowserCacheLocation=BrowserCacheLocation,exports.BrowserConfigurationAuthError=BrowserConfigurationAuthError,exports.BrowserConfigurationAuthErrorCodes=BrowserConfigurationAuthErrorCodes,exports.BrowserConfigurationAuthErrorMessage=BrowserConfigurationAuthErrorMessage,exports.BrowserPerformanceClient=BrowserPerformanceClient,exports.BrowserPerformanceMeasurement=BrowserPerformanceMeasurement,exports.BrowserStorage=BrowserStorage,exports.BrowserUtils=BrowserUtils,exports.CacheLookupPolicy=CacheLookupPolicy,exports.ClientAuthError=ClientAuthError,exports.ClientAuthErrorCodes=ClientAuthErrorCodes,exports.ClientAuthErrorMessage=ClientAuthErrorMessage,exports.ClientConfigurationError=ClientConfigurationError,exports.ClientConfigurationErrorCodes=ClientConfigurationErrorCodes,exports.ClientConfigurationErrorMessage=ClientConfigurationErrorMessage,exports.DEFAULT_IFRAME_TIMEOUT_MS=1e4,exports.EventMessageUtils=EventMessageUtils,exports.EventType=EventType,exports.InteractionRequiredAuthError=InteractionRequiredAuthError,exports.InteractionRequiredAuthErrorCodes=InteractionRequiredAuthErrorCodes,exports.InteractionRequiredAuthErrorMessage=InteractionRequiredAuthErrorMessage,exports.InteractionStatus=InteractionStatus,exports.JsonWebTokenTypes=JsonWebTokenTypes,exports.Logger=Logger,exports.MemoryStorage=MemoryStorage,exports.NavigationClient=NavigationClient,exports.OIDC_DEFAULT_SCOPES=OIDC_DEFAULT_SCOPES,exports.PerformanceEvents=PerformanceEvents,exports.PromptValue=PromptValue,exports.ProtocolMode=ProtocolMode,exports.PublicClientApplication=PublicClientApplication,exports.PublicClientNext=PublicClientNext,exports.ServerError=ServerError,exports.ServerResponseType=ServerResponseType,exports.SignedHttpRequest=SignedHttpRequest,exports.StringUtils=StringUtils,exports.StubPerformanceClient=StubPerformanceClient,exports.UrlString=UrlString,exports.WrapperSKU=WrapperSKU,exports.createNestablePublicClientApplication=createNestablePublicClientApplication,exports.createStandardPublicClientApplication=createStandardPublicClientApplication,exports.stubbedPublicClientApplication=stubbedPublicClientApplication,exports.version=version;